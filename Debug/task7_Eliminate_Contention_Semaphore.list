
task7_Eliminate_Contention_Semaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005854  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  080059f4  080059f4  000069f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ae8  08005ae8  00007014  2**0
                  CONTENTS
  4 .ARM          00000008  08005ae8  08005ae8  00006ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005af0  08005af0  00007014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005af0  08005af0  00006af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005af4  08005af4  00006af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08005af8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a14  20000014  08005b0c  00007014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004a28  08005b0c  00007a28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000130ce  00000000  00000000  00007044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d9b  00000000  00000000  0001a112  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b8  00000000  00000000  0001ceb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000da7  00000000  00000000  0001e068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002b7e  00000000  00000000  0001ee0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012a45  00000000  00000000  0002198d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094e21  00000000  00000000  000343d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c91f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a50  00000000  00000000  000c9238  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000ac  00000000  00000000  000cdc88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000014 	.word	0x20000014
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080059dc 	.word	0x080059dc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000018 	.word	0x20000018
 80001dc:	080059dc 	.word	0x080059dc

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <AccessSharedData>:
/* USER CODE BEGIN PFP */

uint32_t count = 0;
int flag = 1;
void AccessSharedData()
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	if (flag) flag = 0;
 80004d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000540 <AccessSharedData+0x70>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d003      	beq.n	80004e4 <AccessSharedData+0x14>
 80004dc:	4b18      	ldr	r3, [pc, #96]	@ (8000540 <AccessSharedData+0x70>)
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
 80004e2:	e004      	b.n	80004ee <AccessSharedData+0x1e>
	else HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 80004e4:	2201      	movs	r2, #1
 80004e6:	2110      	movs	r1, #16
 80004e8:	4816      	ldr	r0, [pc, #88]	@ (8000544 <AccessSharedData+0x74>)
 80004ea:	f000 fdc3 	bl	8001074 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 80004ee:	2201      	movs	r2, #1
 80004f0:	2110      	movs	r1, #16
 80004f2:	4814      	ldr	r0, [pc, #80]	@ (8000544 <AccessSharedData+0x74>)
 80004f4:	f000 fdbe 	bl	8001074 <HAL_GPIO_WritePin>
	TIM2->CNT = 0;
 80004f8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004fc:	2200      	movs	r2, #0
 80004fe:	625a      	str	r2, [r3, #36]	@ 0x24
	count = 0;
 8000500:	4b11      	ldr	r3, [pc, #68]	@ (8000548 <AccessSharedData+0x78>)
 8000502:	2200      	movs	r2, #0
 8000504:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start(&htim2);
 8000506:	4811      	ldr	r0, [pc, #68]	@ (800054c <AccessSharedData+0x7c>)
 8000508:	f001 faae 	bl	8001a68 <HAL_TIM_Base_Start>
	while (TIM2->CNT < 1000000)
 800050c:	e004      	b.n	8000518 <AccessSharedData+0x48>
	{
		count = TIM2->CNT;
 800050e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000514:	4a0c      	ldr	r2, [pc, #48]	@ (8000548 <AccessSharedData+0x78>)
 8000516:	6013      	str	r3, [r2, #0]
	while (TIM2->CNT < 1000000)
 8000518:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800051c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800051e:	4a0c      	ldr	r2, [pc, #48]	@ (8000550 <AccessSharedData+0x80>)
 8000520:	4293      	cmp	r3, r2
 8000522:	d9f4      	bls.n	800050e <AccessSharedData+0x3e>
	}
	HAL_TIM_Base_Stop(&htim2);
 8000524:	4809      	ldr	r0, [pc, #36]	@ (800054c <AccessSharedData+0x7c>)
 8000526:	f001 faf9 	bl	8001b1c <HAL_TIM_Base_Stop>

	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 800052a:	2200      	movs	r2, #0
 800052c:	2110      	movs	r1, #16
 800052e:	4805      	ldr	r0, [pc, #20]	@ (8000544 <AccessSharedData+0x74>)
 8000530:	f000 fda0 	bl	8001074 <HAL_GPIO_WritePin>

	flag = 1;
 8000534:	4b02      	ldr	r3, [pc, #8]	@ (8000540 <AccessSharedData+0x70>)
 8000536:	2201      	movs	r2, #1
 8000538:	601a      	str	r2, [r3, #0]
}
 800053a:	bf00      	nop
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	20000000 	.word	0x20000000
 8000544:	40020000 	.word	0x40020000
 8000548:	20000088 	.word	0x20000088
 800054c:	20000030 	.word	0x20000030
 8000550:	000f423f 	.word	0x000f423f

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000558:	f000 fae4 	bl	8000b24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055c:	f000 f840 	bl	80005e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000560:	f000 f8f4 	bl	800074c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000564:	f000 f8a6 	bl	80006b4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000568:	f001 ff2e 	bl	80023c8 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of CriticalResourceSemaphore */
  CriticalResourceSemaphoreHandle = osSemaphoreNew(1, 1, &CriticalResourceSemaphore_attributes);
 800056c:	4a11      	ldr	r2, [pc, #68]	@ (80005b4 <main+0x60>)
 800056e:	2101      	movs	r1, #1
 8000570:	2001      	movs	r0, #1
 8000572:	f002 f820 	bl	80025b6 <osSemaphoreNew>
 8000576:	4603      	mov	r3, r0
 8000578:	4a0f      	ldr	r2, [pc, #60]	@ (80005b8 <main+0x64>)
 800057a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of GreenLEDTask */
  GreenLEDTaskHandle = osThreadNew(StartGreenLEDTask, NULL, &GreenLEDTask_attributes);
 800057c:	4a0f      	ldr	r2, [pc, #60]	@ (80005bc <main+0x68>)
 800057e:	2100      	movs	r1, #0
 8000580:	480f      	ldr	r0, [pc, #60]	@ (80005c0 <main+0x6c>)
 8000582:	f001 ff6b 	bl	800245c <osThreadNew>
 8000586:	4603      	mov	r3, r0
 8000588:	4a0e      	ldr	r2, [pc, #56]	@ (80005c4 <main+0x70>)
 800058a:	6013      	str	r3, [r2, #0]

  /* creation of RedLEDTask */
  RedLEDTaskHandle = osThreadNew(StartRedLEDTask, NULL, &RedLEDTask_attributes);
 800058c:	4a0e      	ldr	r2, [pc, #56]	@ (80005c8 <main+0x74>)
 800058e:	2100      	movs	r1, #0
 8000590:	480e      	ldr	r0, [pc, #56]	@ (80005cc <main+0x78>)
 8000592:	f001 ff63 	bl	800245c <osThreadNew>
 8000596:	4603      	mov	r3, r0
 8000598:	4a0d      	ldr	r2, [pc, #52]	@ (80005d0 <main+0x7c>)
 800059a:	6013      	str	r3, [r2, #0]

  /* creation of OrangeLEDTask */
  OrangeLEDTaskHandle = osThreadNew(StartOrangeLEDTask, NULL, &OrangeLEDTask_attributes);
 800059c:	4a0d      	ldr	r2, [pc, #52]	@ (80005d4 <main+0x80>)
 800059e:	2100      	movs	r1, #0
 80005a0:	480d      	ldr	r0, [pc, #52]	@ (80005d8 <main+0x84>)
 80005a2:	f001 ff5b 	bl	800245c <osThreadNew>
 80005a6:	4603      	mov	r3, r0
 80005a8:	4a0c      	ldr	r2, [pc, #48]	@ (80005dc <main+0x88>)
 80005aa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005ac:	f001 ff30 	bl	8002410 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b0:	bf00      	nop
 80005b2:	e7fd      	b.n	80005b0 <main+0x5c>
 80005b4:	08005ac0 	.word	0x08005ac0
 80005b8:	20000084 	.word	0x20000084
 80005bc:	08005a54 	.word	0x08005a54
 80005c0:	080007d1 	.word	0x080007d1
 80005c4:	20000078 	.word	0x20000078
 80005c8:	08005a78 	.word	0x08005a78
 80005cc:	08000821 	.word	0x08000821
 80005d0:	2000007c 	.word	0x2000007c
 80005d4:	08005a9c 	.word	0x08005a9c
 80005d8:	08000875 	.word	0x08000875
 80005dc:	20000080 	.word	0x20000080

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b094      	sub	sp, #80	@ 0x50
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 0320 	add.w	r3, r7, #32
 80005ea:	2230      	movs	r2, #48	@ 0x30
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f005 f9ba 	bl	8005968 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000604:	2300      	movs	r3, #0
 8000606:	60bb      	str	r3, [r7, #8]
 8000608:	4b28      	ldr	r3, [pc, #160]	@ (80006ac <SystemClock_Config+0xcc>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800060c:	4a27      	ldr	r2, [pc, #156]	@ (80006ac <SystemClock_Config+0xcc>)
 800060e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000612:	6413      	str	r3, [r2, #64]	@ 0x40
 8000614:	4b25      	ldr	r3, [pc, #148]	@ (80006ac <SystemClock_Config+0xcc>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000618:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000620:	2300      	movs	r3, #0
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	4b22      	ldr	r3, [pc, #136]	@ (80006b0 <SystemClock_Config+0xd0>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800062c:	4a20      	ldr	r2, [pc, #128]	@ (80006b0 <SystemClock_Config+0xd0>)
 800062e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000632:	6013      	str	r3, [r2, #0]
 8000634:	4b1e      	ldr	r3, [pc, #120]	@ (80006b0 <SystemClock_Config+0xd0>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000640:	2301      	movs	r3, #1
 8000642:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000644:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000648:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064a:	2302      	movs	r3, #2
 800064c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800064e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000652:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000654:	2319      	movs	r3, #25
 8000656:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000658:	23a8      	movs	r3, #168	@ 0xa8
 800065a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800065c:	2302      	movs	r3, #2
 800065e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000660:	2304      	movs	r3, #4
 8000662:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000664:	f107 0320 	add.w	r3, r7, #32
 8000668:	4618      	mov	r0, r3
 800066a:	f000 fd37 	bl	80010dc <HAL_RCC_OscConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000674:	f000 f926 	bl	80008c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000678:	230f      	movs	r3, #15
 800067a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067c:	2302      	movs	r3, #2
 800067e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000684:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000688:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800068e:	f107 030c 	add.w	r3, r7, #12
 8000692:	2102      	movs	r1, #2
 8000694:	4618      	mov	r0, r3
 8000696:	f000 ff99 	bl	80015cc <HAL_RCC_ClockConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006a0:	f000 f910 	bl	80008c4 <Error_Handler>
  }
}
 80006a4:	bf00      	nop
 80006a6:	3750      	adds	r7, #80	@ 0x50
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40023800 	.word	0x40023800
 80006b0:	40007000 	.word	0x40007000

080006b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ba:	f107 0308 	add.w	r3, r7, #8
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006c8:	463b      	mov	r3, r7
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000748 <MX_TIM2_Init+0x94>)
 80006d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 80006d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000748 <MX_TIM2_Init+0x94>)
 80006da:	2253      	movs	r2, #83	@ 0x53
 80006dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006de:	4b1a      	ldr	r3, [pc, #104]	@ (8000748 <MX_TIM2_Init+0x94>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80006e4:	4b18      	ldr	r3, [pc, #96]	@ (8000748 <MX_TIM2_Init+0x94>)
 80006e6:	f04f 32ff 	mov.w	r2, #4294967295
 80006ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ec:	4b16      	ldr	r3, [pc, #88]	@ (8000748 <MX_TIM2_Init+0x94>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006f2:	4b15      	ldr	r3, [pc, #84]	@ (8000748 <MX_TIM2_Init+0x94>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006f8:	4813      	ldr	r0, [pc, #76]	@ (8000748 <MX_TIM2_Init+0x94>)
 80006fa:	f001 f965 	bl	80019c8 <HAL_TIM_Base_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000704:	f000 f8de 	bl	80008c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000708:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800070c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800070e:	f107 0308 	add.w	r3, r7, #8
 8000712:	4619      	mov	r1, r3
 8000714:	480c      	ldr	r0, [pc, #48]	@ (8000748 <MX_TIM2_Init+0x94>)
 8000716:	f001 fb7b 	bl	8001e10 <HAL_TIM_ConfigClockSource>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000720:	f000 f8d0 	bl	80008c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000724:	2300      	movs	r3, #0
 8000726:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000728:	2300      	movs	r3, #0
 800072a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800072c:	463b      	mov	r3, r7
 800072e:	4619      	mov	r1, r3
 8000730:	4805      	ldr	r0, [pc, #20]	@ (8000748 <MX_TIM2_Init+0x94>)
 8000732:	f001 fd83 	bl	800223c <HAL_TIMEx_MasterConfigSynchronization>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800073c:	f000 f8c2 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000740:	bf00      	nop
 8000742:	3718      	adds	r7, #24
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20000030 	.word	0x20000030

0800074c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b088      	sub	sp, #32
 8000750:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000752:	f107 030c 	add.w	r3, r7, #12
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
 8000760:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	60bb      	str	r3, [r7, #8]
 8000766:	4b18      	ldr	r3, [pc, #96]	@ (80007c8 <MX_GPIO_Init+0x7c>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	4a17      	ldr	r2, [pc, #92]	@ (80007c8 <MX_GPIO_Init+0x7c>)
 800076c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000770:	6313      	str	r3, [r2, #48]	@ 0x30
 8000772:	4b15      	ldr	r3, [pc, #84]	@ (80007c8 <MX_GPIO_Init+0x7c>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	4b11      	ldr	r3, [pc, #68]	@ (80007c8 <MX_GPIO_Init+0x7c>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	4a10      	ldr	r2, [pc, #64]	@ (80007c8 <MX_GPIO_Init+0x7c>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	6313      	str	r3, [r2, #48]	@ 0x30
 800078e:	4b0e      	ldr	r3, [pc, #56]	@ (80007c8 <MX_GPIO_Init+0x7c>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_BLUE_Pin|LED_GREEN_Pin|LED_RED_Pin|LED_ORANGE_Pin, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	21f0      	movs	r1, #240	@ 0xf0
 800079e:	480b      	ldr	r0, [pc, #44]	@ (80007cc <MX_GPIO_Init+0x80>)
 80007a0:	f000 fc68 	bl	8001074 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_BLUE_Pin LED_GREEN_Pin LED_RED_Pin LED_ORANGE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|LED_GREEN_Pin|LED_RED_Pin|LED_ORANGE_Pin;
 80007a4:	23f0      	movs	r3, #240	@ 0xf0
 80007a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a8:	2301      	movs	r3, #1
 80007aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b0:	2300      	movs	r3, #0
 80007b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b4:	f107 030c 	add.w	r3, r7, #12
 80007b8:	4619      	mov	r1, r3
 80007ba:	4804      	ldr	r0, [pc, #16]	@ (80007cc <MX_GPIO_Init+0x80>)
 80007bc:	f000 fad6 	bl	8000d6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007c0:	bf00      	nop
 80007c2:	3720      	adds	r7, #32
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40023800 	.word	0x40023800
 80007cc:	40020000 	.word	0x40020000

080007d0 <StartGreenLEDTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartGreenLEDTask */
void StartGreenLEDTask(void *argument)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80007d8:	2201      	movs	r2, #1
 80007da:	2120      	movs	r1, #32
 80007dc:	480e      	ldr	r0, [pc, #56]	@ (8000818 <StartGreenLEDTask+0x48>)
 80007de:	f000 fc49 	bl	8001074 <HAL_GPIO_WritePin>

	  osSemaphoreAcquire(CriticalResourceSemaphoreHandle, osWaitForever);
 80007e2:	4b0e      	ldr	r3, [pc, #56]	@ (800081c <StartGreenLEDTask+0x4c>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	f04f 31ff 	mov.w	r1, #4294967295
 80007ea:	4618      	mov	r0, r3
 80007ec:	f001 ff6c 	bl	80026c8 <osSemaphoreAcquire>
	  AccessSharedData();
 80007f0:	f7ff fe6e 	bl	80004d0 <AccessSharedData>
	  osSemaphoreRelease(CriticalResourceSemaphoreHandle);
 80007f4:	4b09      	ldr	r3, [pc, #36]	@ (800081c <StartGreenLEDTask+0x4c>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4618      	mov	r0, r3
 80007fa:	f001 ffb7 	bl	800276c <osSemaphoreRelease>

	  osDelay(200);
 80007fe:	20c8      	movs	r0, #200	@ 0xc8
 8000800:	f001 febe 	bl	8002580 <osDelay>
	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000804:	2200      	movs	r2, #0
 8000806:	2120      	movs	r1, #32
 8000808:	4803      	ldr	r0, [pc, #12]	@ (8000818 <StartGreenLEDTask+0x48>)
 800080a:	f000 fc33 	bl	8001074 <HAL_GPIO_WritePin>
	  osDelay(200);
 800080e:	20c8      	movs	r0, #200	@ 0xc8
 8000810:	f001 feb6 	bl	8002580 <osDelay>
	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000814:	bf00      	nop
 8000816:	e7df      	b.n	80007d8 <StartGreenLEDTask+0x8>
 8000818:	40020000 	.word	0x40020000
 800081c:	20000084 	.word	0x20000084

08000820 <StartRedLEDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRedLEDTask */
void StartRedLEDTask(void *argument)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRedLEDTask */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000828:	2201      	movs	r2, #1
 800082a:	2140      	movs	r1, #64	@ 0x40
 800082c:	480f      	ldr	r0, [pc, #60]	@ (800086c <StartRedLEDTask+0x4c>)
 800082e:	f000 fc21 	bl	8001074 <HAL_GPIO_WritePin>

	  osSemaphoreAcquire(CriticalResourceSemaphoreHandle, osWaitForever);
 8000832:	4b0f      	ldr	r3, [pc, #60]	@ (8000870 <StartRedLEDTask+0x50>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	f04f 31ff 	mov.w	r1, #4294967295
 800083a:	4618      	mov	r0, r3
 800083c:	f001 ff44 	bl	80026c8 <osSemaphoreAcquire>
	  AccessSharedData();
 8000840:	f7ff fe46 	bl	80004d0 <AccessSharedData>
	  osSemaphoreRelease(CriticalResourceSemaphoreHandle);
 8000844:	4b0a      	ldr	r3, [pc, #40]	@ (8000870 <StartRedLEDTask+0x50>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4618      	mov	r0, r3
 800084a:	f001 ff8f 	bl	800276c <osSemaphoreRelease>

	  osDelay(550);
 800084e:	f240 2026 	movw	r0, #550	@ 0x226
 8000852:	f001 fe95 	bl	8002580 <osDelay>
	  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	2140      	movs	r1, #64	@ 0x40
 800085a:	4804      	ldr	r0, [pc, #16]	@ (800086c <StartRedLEDTask+0x4c>)
 800085c:	f000 fc0a 	bl	8001074 <HAL_GPIO_WritePin>
	  osDelay(550);
 8000860:	f240 2026 	movw	r0, #550	@ 0x226
 8000864:	f001 fe8c 	bl	8002580 <osDelay>
	  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000868:	bf00      	nop
 800086a:	e7dd      	b.n	8000828 <StartRedLEDTask+0x8>
 800086c:	40020000 	.word	0x40020000
 8000870:	20000084 	.word	0x20000084

08000874 <StartOrangeLEDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOrangeLEDTask */
void StartOrangeLEDTask(void *argument)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOrangeLEDTask */
	osSemaphoreRelease(CriticalResourceSemaphoreHandle);
 800087c:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <StartOrangeLEDTask+0x24>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4618      	mov	r0, r3
 8000882:	f001 ff73 	bl	800276c <osSemaphoreRelease>
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin);
 8000886:	2180      	movs	r1, #128	@ 0x80
 8000888:	4804      	ldr	r0, [pc, #16]	@ (800089c <StartOrangeLEDTask+0x28>)
 800088a:	f000 fc0c 	bl	80010a6 <HAL_GPIO_TogglePin>
	  osDelay(50);
 800088e:	2032      	movs	r0, #50	@ 0x32
 8000890:	f001 fe76 	bl	8002580 <osDelay>
	  HAL_GPIO_TogglePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin);
 8000894:	bf00      	nop
 8000896:	e7f6      	b.n	8000886 <StartOrangeLEDTask+0x12>
 8000898:	20000084 	.word	0x20000084
 800089c:	40020000 	.word	0x40020000

080008a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a04      	ldr	r2, [pc, #16]	@ (80008c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d101      	bne.n	80008b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008b2:	f000 f959 	bl	8000b68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40000800 	.word	0x40000800

080008c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c8:	b672      	cpsid	i
}
 80008ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008cc:	bf00      	nop
 80008ce:	e7fd      	b.n	80008cc <Error_Handler+0x8>

080008d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	4b12      	ldr	r3, [pc, #72]	@ (8000924 <HAL_MspInit+0x54>)
 80008dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008de:	4a11      	ldr	r2, [pc, #68]	@ (8000924 <HAL_MspInit+0x54>)
 80008e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80008e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000924 <HAL_MspInit+0x54>)
 80008e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	603b      	str	r3, [r7, #0]
 80008f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000924 <HAL_MspInit+0x54>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000924 <HAL_MspInit+0x54>)
 80008fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000900:	6413      	str	r3, [r2, #64]	@ 0x40
 8000902:	4b08      	ldr	r3, [pc, #32]	@ (8000924 <HAL_MspInit+0x54>)
 8000904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000906:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800090a:	603b      	str	r3, [r7, #0]
 800090c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800090e:	2200      	movs	r2, #0
 8000910:	210f      	movs	r1, #15
 8000912:	f06f 0001 	mvn.w	r0, #1
 8000916:	f000 f9ff 	bl	8000d18 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40023800 	.word	0x40023800

08000928 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000928:	b480      	push	{r7}
 800092a:	b085      	sub	sp, #20
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000938:	d10d      	bne.n	8000956 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	4b09      	ldr	r3, [pc, #36]	@ (8000964 <HAL_TIM_Base_MspInit+0x3c>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000942:	4a08      	ldr	r2, [pc, #32]	@ (8000964 <HAL_TIM_Base_MspInit+0x3c>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6413      	str	r3, [r2, #64]	@ 0x40
 800094a:	4b06      	ldr	r3, [pc, #24]	@ (8000964 <HAL_TIM_Base_MspInit+0x3c>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000956:	bf00      	nop
 8000958:	3714      	adds	r7, #20
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	40023800 	.word	0x40023800

08000968 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08e      	sub	sp, #56	@ 0x38
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000970:	2300      	movs	r3, #0
 8000972:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000974:	2300      	movs	r3, #0
 8000976:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000978:	2300      	movs	r3, #0
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	4b33      	ldr	r3, [pc, #204]	@ (8000a4c <HAL_InitTick+0xe4>)
 800097e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000980:	4a32      	ldr	r2, [pc, #200]	@ (8000a4c <HAL_InitTick+0xe4>)
 8000982:	f043 0304 	orr.w	r3, r3, #4
 8000986:	6413      	str	r3, [r2, #64]	@ 0x40
 8000988:	4b30      	ldr	r3, [pc, #192]	@ (8000a4c <HAL_InitTick+0xe4>)
 800098a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800098c:	f003 0304 	and.w	r3, r3, #4
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000994:	f107 0210 	add.w	r2, r7, #16
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	4611      	mov	r1, r2
 800099e:	4618      	mov	r0, r3
 80009a0:	f000 ffe0 	bl	8001964 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009a4:	6a3b      	ldr	r3, [r7, #32]
 80009a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d103      	bne.n	80009b6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009ae:	f000 ffc5 	bl	800193c <HAL_RCC_GetPCLK1Freq>
 80009b2:	6378      	str	r0, [r7, #52]	@ 0x34
 80009b4:	e004      	b.n	80009c0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009b6:	f000 ffc1 	bl	800193c <HAL_RCC_GetPCLK1Freq>
 80009ba:	4603      	mov	r3, r0
 80009bc:	005b      	lsls	r3, r3, #1
 80009be:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009c2:	4a23      	ldr	r2, [pc, #140]	@ (8000a50 <HAL_InitTick+0xe8>)
 80009c4:	fba2 2303 	umull	r2, r3, r2, r3
 80009c8:	0c9b      	lsrs	r3, r3, #18
 80009ca:	3b01      	subs	r3, #1
 80009cc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80009ce:	4b21      	ldr	r3, [pc, #132]	@ (8000a54 <HAL_InitTick+0xec>)
 80009d0:	4a21      	ldr	r2, [pc, #132]	@ (8000a58 <HAL_InitTick+0xf0>)
 80009d2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80009d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000a54 <HAL_InitTick+0xec>)
 80009d6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80009da:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80009dc:	4a1d      	ldr	r2, [pc, #116]	@ (8000a54 <HAL_InitTick+0xec>)
 80009de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009e0:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80009e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000a54 <HAL_InitTick+0xec>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e8:	4b1a      	ldr	r3, [pc, #104]	@ (8000a54 <HAL_InitTick+0xec>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ee:	4b19      	ldr	r3, [pc, #100]	@ (8000a54 <HAL_InitTick+0xec>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80009f4:	4817      	ldr	r0, [pc, #92]	@ (8000a54 <HAL_InitTick+0xec>)
 80009f6:	f000 ffe7 	bl	80019c8 <HAL_TIM_Base_Init>
 80009fa:	4603      	mov	r3, r0
 80009fc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000a00:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d11b      	bne.n	8000a40 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000a08:	4812      	ldr	r0, [pc, #72]	@ (8000a54 <HAL_InitTick+0xec>)
 8000a0a:	f001 f8af 	bl	8001b6c <HAL_TIM_Base_Start_IT>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000a14:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d111      	bne.n	8000a40 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000a1c:	201e      	movs	r0, #30
 8000a1e:	f000 f997 	bl	8000d50 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2b0f      	cmp	r3, #15
 8000a26:	d808      	bhi.n	8000a3a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	6879      	ldr	r1, [r7, #4]
 8000a2c:	201e      	movs	r0, #30
 8000a2e:	f000 f973 	bl	8000d18 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a32:	4a0a      	ldr	r2, [pc, #40]	@ (8000a5c <HAL_InitTick+0xf4>)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	6013      	str	r3, [r2, #0]
 8000a38:	e002      	b.n	8000a40 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a40:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3738      	adds	r7, #56	@ 0x38
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40023800 	.word	0x40023800
 8000a50:	431bde83 	.word	0x431bde83
 8000a54:	2000008c 	.word	0x2000008c
 8000a58:	40000800 	.word	0x40000800
 8000a5c:	20000008 	.word	0x20000008

08000a60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a64:	bf00      	nop
 8000a66:	e7fd      	b.n	8000a64 <NMI_Handler+0x4>

08000a68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a6c:	bf00      	nop
 8000a6e:	e7fd      	b.n	8000a6c <HardFault_Handler+0x4>

08000a70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a74:	bf00      	nop
 8000a76:	e7fd      	b.n	8000a74 <MemManage_Handler+0x4>

08000a78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <BusFault_Handler+0x4>

08000a80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a84:	bf00      	nop
 8000a86:	e7fd      	b.n	8000a84 <UsageFault_Handler+0x4>

08000a88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
	...

08000a98 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000a9c:	4802      	ldr	r0, [pc, #8]	@ (8000aa8 <TIM4_IRQHandler+0x10>)
 8000a9e:	f001 f8c7 	bl	8001c30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	2000008c 	.word	0x2000008c

08000aac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ab0:	4b06      	ldr	r3, [pc, #24]	@ (8000acc <SystemInit+0x20>)
 8000ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ab6:	4a05      	ldr	r2, [pc, #20]	@ (8000acc <SystemInit+0x20>)
 8000ab8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000abc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ad0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b08 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ad4:	f7ff ffea 	bl	8000aac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ad8:	480c      	ldr	r0, [pc, #48]	@ (8000b0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ada:	490d      	ldr	r1, [pc, #52]	@ (8000b10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000adc:	4a0d      	ldr	r2, [pc, #52]	@ (8000b14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ade:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae0:	e002      	b.n	8000ae8 <LoopCopyDataInit>

08000ae2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ae2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ae6:	3304      	adds	r3, #4

08000ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aec:	d3f9      	bcc.n	8000ae2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aee:	4a0a      	ldr	r2, [pc, #40]	@ (8000b18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000af0:	4c0a      	ldr	r4, [pc, #40]	@ (8000b1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000af2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af4:	e001      	b.n	8000afa <LoopFillZerobss>

08000af6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000af6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af8:	3204      	adds	r2, #4

08000afa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000afa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000afc:	d3fb      	bcc.n	8000af6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000afe:	f004 ff3b 	bl	8005978 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b02:	f7ff fd27 	bl	8000554 <main>
  bx  lr    
 8000b06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b08:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b10:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000b14:	08005af8 	.word	0x08005af8
  ldr r2, =_sbss
 8000b18:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000b1c:	20004a28 	.word	0x20004a28

08000b20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b20:	e7fe      	b.n	8000b20 <ADC_IRQHandler>
	...

08000b24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b28:	4b0e      	ldr	r3, [pc, #56]	@ (8000b64 <HAL_Init+0x40>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b64 <HAL_Init+0x40>)
 8000b2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b34:	4b0b      	ldr	r3, [pc, #44]	@ (8000b64 <HAL_Init+0x40>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a0a      	ldr	r2, [pc, #40]	@ (8000b64 <HAL_Init+0x40>)
 8000b3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b40:	4b08      	ldr	r3, [pc, #32]	@ (8000b64 <HAL_Init+0x40>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a07      	ldr	r2, [pc, #28]	@ (8000b64 <HAL_Init+0x40>)
 8000b46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b4c:	2003      	movs	r0, #3
 8000b4e:	f000 f8d8 	bl	8000d02 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b52:	200f      	movs	r0, #15
 8000b54:	f7ff ff08 	bl	8000968 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b58:	f7ff feba 	bl	80008d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40023c00 	.word	0x40023c00

08000b68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b6c:	4b06      	ldr	r3, [pc, #24]	@ (8000b88 <HAL_IncTick+0x20>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	461a      	mov	r2, r3
 8000b72:	4b06      	ldr	r3, [pc, #24]	@ (8000b8c <HAL_IncTick+0x24>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4413      	add	r3, r2
 8000b78:	4a04      	ldr	r2, [pc, #16]	@ (8000b8c <HAL_IncTick+0x24>)
 8000b7a:	6013      	str	r3, [r2, #0]
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	2000000c 	.word	0x2000000c
 8000b8c:	200000d4 	.word	0x200000d4

08000b90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  return uwTick;
 8000b94:	4b03      	ldr	r3, [pc, #12]	@ (8000ba4 <HAL_GetTick+0x14>)
 8000b96:	681b      	ldr	r3, [r3, #0]
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	200000d4 	.word	0x200000d4

08000ba8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	f003 0307 	and.w	r3, r3, #7
 8000bb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000bec <__NVIC_SetPriorityGrouping+0x44>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bbe:	68ba      	ldr	r2, [r7, #8]
 8000bc0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bd0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bda:	4a04      	ldr	r2, [pc, #16]	@ (8000bec <__NVIC_SetPriorityGrouping+0x44>)
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	60d3      	str	r3, [r2, #12]
}
 8000be0:	bf00      	nop
 8000be2:	3714      	adds	r7, #20
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf4:	4b04      	ldr	r3, [pc, #16]	@ (8000c08 <__NVIC_GetPriorityGrouping+0x18>)
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	0a1b      	lsrs	r3, r3, #8
 8000bfa:	f003 0307 	and.w	r3, r3, #7
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	db0b      	blt.n	8000c36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	f003 021f 	and.w	r2, r3, #31
 8000c24:	4907      	ldr	r1, [pc, #28]	@ (8000c44 <__NVIC_EnableIRQ+0x38>)
 8000c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2a:	095b      	lsrs	r3, r3, #5
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c36:	bf00      	nop
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	e000e100 	.word	0xe000e100

08000c48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	6039      	str	r1, [r7, #0]
 8000c52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	db0a      	blt.n	8000c72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	b2da      	uxtb	r2, r3
 8000c60:	490c      	ldr	r1, [pc, #48]	@ (8000c94 <__NVIC_SetPriority+0x4c>)
 8000c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c66:	0112      	lsls	r2, r2, #4
 8000c68:	b2d2      	uxtb	r2, r2
 8000c6a:	440b      	add	r3, r1
 8000c6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c70:	e00a      	b.n	8000c88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	b2da      	uxtb	r2, r3
 8000c76:	4908      	ldr	r1, [pc, #32]	@ (8000c98 <__NVIC_SetPriority+0x50>)
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	f003 030f 	and.w	r3, r3, #15
 8000c7e:	3b04      	subs	r3, #4
 8000c80:	0112      	lsls	r2, r2, #4
 8000c82:	b2d2      	uxtb	r2, r2
 8000c84:	440b      	add	r3, r1
 8000c86:	761a      	strb	r2, [r3, #24]
}
 8000c88:	bf00      	nop
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	e000e100 	.word	0xe000e100
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b089      	sub	sp, #36	@ 0x24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	f003 0307 	and.w	r3, r3, #7
 8000cae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	f1c3 0307 	rsb	r3, r3, #7
 8000cb6:	2b04      	cmp	r3, #4
 8000cb8:	bf28      	it	cs
 8000cba:	2304      	movcs	r3, #4
 8000cbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	3304      	adds	r3, #4
 8000cc2:	2b06      	cmp	r3, #6
 8000cc4:	d902      	bls.n	8000ccc <NVIC_EncodePriority+0x30>
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	3b03      	subs	r3, #3
 8000cca:	e000      	b.n	8000cce <NVIC_EncodePriority+0x32>
 8000ccc:	2300      	movs	r3, #0
 8000cce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd4:	69bb      	ldr	r3, [r7, #24]
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	43da      	mvns	r2, r3
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	401a      	ands	r2, r3
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ce4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	fa01 f303 	lsl.w	r3, r1, r3
 8000cee:	43d9      	mvns	r1, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf4:	4313      	orrs	r3, r2
         );
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3724      	adds	r7, #36	@ 0x24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr

08000d02 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b082      	sub	sp, #8
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f7ff ff4c 	bl	8000ba8 <__NVIC_SetPriorityGrouping>
}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b086      	sub	sp, #24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
 8000d24:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d26:	2300      	movs	r3, #0
 8000d28:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d2a:	f7ff ff61 	bl	8000bf0 <__NVIC_GetPriorityGrouping>
 8000d2e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d30:	687a      	ldr	r2, [r7, #4]
 8000d32:	68b9      	ldr	r1, [r7, #8]
 8000d34:	6978      	ldr	r0, [r7, #20]
 8000d36:	f7ff ffb1 	bl	8000c9c <NVIC_EncodePriority>
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d40:	4611      	mov	r1, r2
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff ff80 	bl	8000c48 <__NVIC_SetPriority>
}
 8000d48:	bf00      	nop
 8000d4a:	3718      	adds	r7, #24
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff ff54 	bl	8000c0c <__NVIC_EnableIRQ>
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b089      	sub	sp, #36	@ 0x24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d76:	2300      	movs	r3, #0
 8000d78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
 8000d86:	e159      	b.n	800103c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d88:	2201      	movs	r2, #1
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	697a      	ldr	r2, [r7, #20]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	f040 8148 	bne.w	8001036 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f003 0303 	and.w	r3, r3, #3
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d005      	beq.n	8000dbe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dba:	2b02      	cmp	r3, #2
 8000dbc:	d130      	bne.n	8000e20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	2203      	movs	r2, #3
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	43db      	mvns	r3, r3
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	68da      	ldr	r2, [r3, #12]
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000df4:	2201      	movs	r2, #1
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	4013      	ands	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	091b      	lsrs	r3, r3, #4
 8000e0a:	f003 0201 	and.w	r2, r3, #1
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f003 0303 	and.w	r3, r3, #3
 8000e28:	2b03      	cmp	r3, #3
 8000e2a:	d017      	beq.n	8000e5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	2203      	movs	r2, #3
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	4013      	ands	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	689a      	ldr	r2, [r3, #8]
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f003 0303 	and.w	r3, r3, #3
 8000e64:	2b02      	cmp	r3, #2
 8000e66:	d123      	bne.n	8000eb0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	08da      	lsrs	r2, r3, #3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3208      	adds	r2, #8
 8000e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	f003 0307 	and.w	r3, r3, #7
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	220f      	movs	r2, #15
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	43db      	mvns	r3, r3
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	691a      	ldr	r2, [r3, #16]
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	f003 0307 	and.w	r3, r3, #7
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	08da      	lsrs	r2, r3, #3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	3208      	adds	r2, #8
 8000eaa:	69b9      	ldr	r1, [r7, #24]
 8000eac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	2203      	movs	r2, #3
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f003 0203 	and.w	r2, r3, #3
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	f000 80a2 	beq.w	8001036 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	4b57      	ldr	r3, [pc, #348]	@ (8001054 <HAL_GPIO_Init+0x2e8>)
 8000ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000efa:	4a56      	ldr	r2, [pc, #344]	@ (8001054 <HAL_GPIO_Init+0x2e8>)
 8000efc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f00:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f02:	4b54      	ldr	r3, [pc, #336]	@ (8001054 <HAL_GPIO_Init+0x2e8>)
 8000f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f0e:	4a52      	ldr	r2, [pc, #328]	@ (8001058 <HAL_GPIO_Init+0x2ec>)
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	089b      	lsrs	r3, r3, #2
 8000f14:	3302      	adds	r3, #2
 8000f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	f003 0303 	and.w	r3, r3, #3
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	220f      	movs	r2, #15
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a49      	ldr	r2, [pc, #292]	@ (800105c <HAL_GPIO_Init+0x2f0>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d019      	beq.n	8000f6e <HAL_GPIO_Init+0x202>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a48      	ldr	r2, [pc, #288]	@ (8001060 <HAL_GPIO_Init+0x2f4>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d013      	beq.n	8000f6a <HAL_GPIO_Init+0x1fe>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a47      	ldr	r2, [pc, #284]	@ (8001064 <HAL_GPIO_Init+0x2f8>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d00d      	beq.n	8000f66 <HAL_GPIO_Init+0x1fa>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a46      	ldr	r2, [pc, #280]	@ (8001068 <HAL_GPIO_Init+0x2fc>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d007      	beq.n	8000f62 <HAL_GPIO_Init+0x1f6>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a45      	ldr	r2, [pc, #276]	@ (800106c <HAL_GPIO_Init+0x300>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d101      	bne.n	8000f5e <HAL_GPIO_Init+0x1f2>
 8000f5a:	2304      	movs	r3, #4
 8000f5c:	e008      	b.n	8000f70 <HAL_GPIO_Init+0x204>
 8000f5e:	2307      	movs	r3, #7
 8000f60:	e006      	b.n	8000f70 <HAL_GPIO_Init+0x204>
 8000f62:	2303      	movs	r3, #3
 8000f64:	e004      	b.n	8000f70 <HAL_GPIO_Init+0x204>
 8000f66:	2302      	movs	r3, #2
 8000f68:	e002      	b.n	8000f70 <HAL_GPIO_Init+0x204>
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e000      	b.n	8000f70 <HAL_GPIO_Init+0x204>
 8000f6e:	2300      	movs	r3, #0
 8000f70:	69fa      	ldr	r2, [r7, #28]
 8000f72:	f002 0203 	and.w	r2, r2, #3
 8000f76:	0092      	lsls	r2, r2, #2
 8000f78:	4093      	lsls	r3, r2
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f80:	4935      	ldr	r1, [pc, #212]	@ (8001058 <HAL_GPIO_Init+0x2ec>)
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	089b      	lsrs	r3, r3, #2
 8000f86:	3302      	adds	r3, #2
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f8e:	4b38      	ldr	r3, [pc, #224]	@ (8001070 <HAL_GPIO_Init+0x304>)
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	43db      	mvns	r3, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d003      	beq.n	8000fb2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fb2:	4a2f      	ldr	r2, [pc, #188]	@ (8001070 <HAL_GPIO_Init+0x304>)
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fb8:	4b2d      	ldr	r3, [pc, #180]	@ (8001070 <HAL_GPIO_Init+0x304>)
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d003      	beq.n	8000fdc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fdc:	4a24      	ldr	r2, [pc, #144]	@ (8001070 <HAL_GPIO_Init+0x304>)
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fe2:	4b23      	ldr	r3, [pc, #140]	@ (8001070 <HAL_GPIO_Init+0x304>)
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	43db      	mvns	r3, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d003      	beq.n	8001006 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	4313      	orrs	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001006:	4a1a      	ldr	r2, [pc, #104]	@ (8001070 <HAL_GPIO_Init+0x304>)
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800100c:	4b18      	ldr	r3, [pc, #96]	@ (8001070 <HAL_GPIO_Init+0x304>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	43db      	mvns	r3, r3
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4013      	ands	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001024:	2b00      	cmp	r3, #0
 8001026:	d003      	beq.n	8001030 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	4313      	orrs	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001030:	4a0f      	ldr	r2, [pc, #60]	@ (8001070 <HAL_GPIO_Init+0x304>)
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	3301      	adds	r3, #1
 800103a:	61fb      	str	r3, [r7, #28]
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	2b0f      	cmp	r3, #15
 8001040:	f67f aea2 	bls.w	8000d88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001044:	bf00      	nop
 8001046:	bf00      	nop
 8001048:	3724      	adds	r7, #36	@ 0x24
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	40023800 	.word	0x40023800
 8001058:	40013800 	.word	0x40013800
 800105c:	40020000 	.word	0x40020000
 8001060:	40020400 	.word	0x40020400
 8001064:	40020800 	.word	0x40020800
 8001068:	40020c00 	.word	0x40020c00
 800106c:	40021000 	.word	0x40021000
 8001070:	40013c00 	.word	0x40013c00

08001074 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	460b      	mov	r3, r1
 800107e:	807b      	strh	r3, [r7, #2]
 8001080:	4613      	mov	r3, r2
 8001082:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001084:	787b      	ldrb	r3, [r7, #1]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d003      	beq.n	8001092 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800108a:	887a      	ldrh	r2, [r7, #2]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001090:	e003      	b.n	800109a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001092:	887b      	ldrh	r3, [r7, #2]
 8001094:	041a      	lsls	r2, r3, #16
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	619a      	str	r2, [r3, #24]
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010a6:	b480      	push	{r7}
 80010a8:	b085      	sub	sp, #20
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
 80010ae:	460b      	mov	r3, r1
 80010b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	695b      	ldr	r3, [r3, #20]
 80010b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010b8:	887a      	ldrh	r2, [r7, #2]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	4013      	ands	r3, r2
 80010be:	041a      	lsls	r2, r3, #16
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	43d9      	mvns	r1, r3
 80010c4:	887b      	ldrh	r3, [r7, #2]
 80010c6:	400b      	ands	r3, r1
 80010c8:	431a      	orrs	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	619a      	str	r2, [r3, #24]
}
 80010ce:	bf00      	nop
 80010d0:	3714      	adds	r7, #20
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
	...

080010dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d101      	bne.n	80010ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e267      	b.n	80015be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d075      	beq.n	80011e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80010fa:	4b88      	ldr	r3, [pc, #544]	@ (800131c <HAL_RCC_OscConfig+0x240>)
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	f003 030c 	and.w	r3, r3, #12
 8001102:	2b04      	cmp	r3, #4
 8001104:	d00c      	beq.n	8001120 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001106:	4b85      	ldr	r3, [pc, #532]	@ (800131c <HAL_RCC_OscConfig+0x240>)
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800110e:	2b08      	cmp	r3, #8
 8001110:	d112      	bne.n	8001138 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001112:	4b82      	ldr	r3, [pc, #520]	@ (800131c <HAL_RCC_OscConfig+0x240>)
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800111a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800111e:	d10b      	bne.n	8001138 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001120:	4b7e      	ldr	r3, [pc, #504]	@ (800131c <HAL_RCC_OscConfig+0x240>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d05b      	beq.n	80011e4 <HAL_RCC_OscConfig+0x108>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d157      	bne.n	80011e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001134:	2301      	movs	r3, #1
 8001136:	e242      	b.n	80015be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001140:	d106      	bne.n	8001150 <HAL_RCC_OscConfig+0x74>
 8001142:	4b76      	ldr	r3, [pc, #472]	@ (800131c <HAL_RCC_OscConfig+0x240>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a75      	ldr	r2, [pc, #468]	@ (800131c <HAL_RCC_OscConfig+0x240>)
 8001148:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800114c:	6013      	str	r3, [r2, #0]
 800114e:	e01d      	b.n	800118c <HAL_RCC_OscConfig+0xb0>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001158:	d10c      	bne.n	8001174 <HAL_RCC_OscConfig+0x98>
 800115a:	4b70      	ldr	r3, [pc, #448]	@ (800131c <HAL_RCC_OscConfig+0x240>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a6f      	ldr	r2, [pc, #444]	@ (800131c <HAL_RCC_OscConfig+0x240>)
 8001160:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001164:	6013      	str	r3, [r2, #0]
 8001166:	4b6d      	ldr	r3, [pc, #436]	@ (800131c <HAL_RCC_OscConfig+0x240>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a6c      	ldr	r2, [pc, #432]	@ (800131c <HAL_RCC_OscConfig+0x240>)
 800116c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001170:	6013      	str	r3, [r2, #0]
 8001172:	e00b      	b.n	800118c <HAL_RCC_OscConfig+0xb0>
 8001174:	4b69      	ldr	r3, [pc, #420]	@ (800131c <HAL_RCC_OscConfig+0x240>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a68      	ldr	r2, [pc, #416]	@ (800131c <HAL_RCC_OscConfig+0x240>)
 800117a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800117e:	6013      	str	r3, [r2, #0]
 8001180:	4b66      	ldr	r3, [pc, #408]	@ (800131c <HAL_RCC_OscConfig+0x240>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a65      	ldr	r2, [pc, #404]	@ (800131c <HAL_RCC_OscConfig+0x240>)
 8001186:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800118a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d013      	beq.n	80011bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001194:	f7ff fcfc 	bl	8000b90 <HAL_GetTick>
 8001198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800119a:	e008      	b.n	80011ae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800119c:	f7ff fcf8 	bl	8000b90 <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	2b64      	cmp	r3, #100	@ 0x64
 80011a8:	d901      	bls.n	80011ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	e207      	b.n	80015be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ae:	4b5b      	ldr	r3, [pc, #364]	@ (800131c <HAL_RCC_OscConfig+0x240>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d0f0      	beq.n	800119c <HAL_RCC_OscConfig+0xc0>
 80011ba:	e014      	b.n	80011e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011bc:	f7ff fce8 	bl	8000b90 <HAL_GetTick>
 80011c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011c2:	e008      	b.n	80011d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011c4:	f7ff fce4 	bl	8000b90 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	2b64      	cmp	r3, #100	@ 0x64
 80011d0:	d901      	bls.n	80011d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011d2:	2303      	movs	r3, #3
 80011d4:	e1f3      	b.n	80015be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011d6:	4b51      	ldr	r3, [pc, #324]	@ (800131c <HAL_RCC_OscConfig+0x240>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d1f0      	bne.n	80011c4 <HAL_RCC_OscConfig+0xe8>
 80011e2:	e000      	b.n	80011e6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d063      	beq.n	80012ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80011f2:	4b4a      	ldr	r3, [pc, #296]	@ (800131c <HAL_RCC_OscConfig+0x240>)
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	f003 030c 	and.w	r3, r3, #12
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d00b      	beq.n	8001216 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011fe:	4b47      	ldr	r3, [pc, #284]	@ (800131c <HAL_RCC_OscConfig+0x240>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001206:	2b08      	cmp	r3, #8
 8001208:	d11c      	bne.n	8001244 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800120a:	4b44      	ldr	r3, [pc, #272]	@ (800131c <HAL_RCC_OscConfig+0x240>)
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d116      	bne.n	8001244 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001216:	4b41      	ldr	r3, [pc, #260]	@ (800131c <HAL_RCC_OscConfig+0x240>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	2b00      	cmp	r3, #0
 8001220:	d005      	beq.n	800122e <HAL_RCC_OscConfig+0x152>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	68db      	ldr	r3, [r3, #12]
 8001226:	2b01      	cmp	r3, #1
 8001228:	d001      	beq.n	800122e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e1c7      	b.n	80015be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800122e:	4b3b      	ldr	r3, [pc, #236]	@ (800131c <HAL_RCC_OscConfig+0x240>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	691b      	ldr	r3, [r3, #16]
 800123a:	00db      	lsls	r3, r3, #3
 800123c:	4937      	ldr	r1, [pc, #220]	@ (800131c <HAL_RCC_OscConfig+0x240>)
 800123e:	4313      	orrs	r3, r2
 8001240:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001242:	e03a      	b.n	80012ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d020      	beq.n	800128e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800124c:	4b34      	ldr	r3, [pc, #208]	@ (8001320 <HAL_RCC_OscConfig+0x244>)
 800124e:	2201      	movs	r2, #1
 8001250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001252:	f7ff fc9d 	bl	8000b90 <HAL_GetTick>
 8001256:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001258:	e008      	b.n	800126c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800125a:	f7ff fc99 	bl	8000b90 <HAL_GetTick>
 800125e:	4602      	mov	r2, r0
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	2b02      	cmp	r3, #2
 8001266:	d901      	bls.n	800126c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001268:	2303      	movs	r3, #3
 800126a:	e1a8      	b.n	80015be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800126c:	4b2b      	ldr	r3, [pc, #172]	@ (800131c <HAL_RCC_OscConfig+0x240>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 0302 	and.w	r3, r3, #2
 8001274:	2b00      	cmp	r3, #0
 8001276:	d0f0      	beq.n	800125a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001278:	4b28      	ldr	r3, [pc, #160]	@ (800131c <HAL_RCC_OscConfig+0x240>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	691b      	ldr	r3, [r3, #16]
 8001284:	00db      	lsls	r3, r3, #3
 8001286:	4925      	ldr	r1, [pc, #148]	@ (800131c <HAL_RCC_OscConfig+0x240>)
 8001288:	4313      	orrs	r3, r2
 800128a:	600b      	str	r3, [r1, #0]
 800128c:	e015      	b.n	80012ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800128e:	4b24      	ldr	r3, [pc, #144]	@ (8001320 <HAL_RCC_OscConfig+0x244>)
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001294:	f7ff fc7c 	bl	8000b90 <HAL_GetTick>
 8001298:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800129a:	e008      	b.n	80012ae <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800129c:	f7ff fc78 	bl	8000b90 <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d901      	bls.n	80012ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e187      	b.n	80015be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ae:	4b1b      	ldr	r3, [pc, #108]	@ (800131c <HAL_RCC_OscConfig+0x240>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0302 	and.w	r3, r3, #2
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d1f0      	bne.n	800129c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0308 	and.w	r3, r3, #8
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d036      	beq.n	8001334 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	695b      	ldr	r3, [r3, #20]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d016      	beq.n	80012fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012ce:	4b15      	ldr	r3, [pc, #84]	@ (8001324 <HAL_RCC_OscConfig+0x248>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012d4:	f7ff fc5c 	bl	8000b90 <HAL_GetTick>
 80012d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012da:	e008      	b.n	80012ee <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012dc:	f7ff fc58 	bl	8000b90 <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d901      	bls.n	80012ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e167      	b.n	80015be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ee:	4b0b      	ldr	r3, [pc, #44]	@ (800131c <HAL_RCC_OscConfig+0x240>)
 80012f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d0f0      	beq.n	80012dc <HAL_RCC_OscConfig+0x200>
 80012fa:	e01b      	b.n	8001334 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012fc:	4b09      	ldr	r3, [pc, #36]	@ (8001324 <HAL_RCC_OscConfig+0x248>)
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001302:	f7ff fc45 	bl	8000b90 <HAL_GetTick>
 8001306:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001308:	e00e      	b.n	8001328 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800130a:	f7ff fc41 	bl	8000b90 <HAL_GetTick>
 800130e:	4602      	mov	r2, r0
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	2b02      	cmp	r3, #2
 8001316:	d907      	bls.n	8001328 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001318:	2303      	movs	r3, #3
 800131a:	e150      	b.n	80015be <HAL_RCC_OscConfig+0x4e2>
 800131c:	40023800 	.word	0x40023800
 8001320:	42470000 	.word	0x42470000
 8001324:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001328:	4b88      	ldr	r3, [pc, #544]	@ (800154c <HAL_RCC_OscConfig+0x470>)
 800132a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800132c:	f003 0302 	and.w	r3, r3, #2
 8001330:	2b00      	cmp	r3, #0
 8001332:	d1ea      	bne.n	800130a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0304 	and.w	r3, r3, #4
 800133c:	2b00      	cmp	r3, #0
 800133e:	f000 8097 	beq.w	8001470 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001342:	2300      	movs	r3, #0
 8001344:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001346:	4b81      	ldr	r3, [pc, #516]	@ (800154c <HAL_RCC_OscConfig+0x470>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d10f      	bne.n	8001372 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	60bb      	str	r3, [r7, #8]
 8001356:	4b7d      	ldr	r3, [pc, #500]	@ (800154c <HAL_RCC_OscConfig+0x470>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135a:	4a7c      	ldr	r2, [pc, #496]	@ (800154c <HAL_RCC_OscConfig+0x470>)
 800135c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001360:	6413      	str	r3, [r2, #64]	@ 0x40
 8001362:	4b7a      	ldr	r3, [pc, #488]	@ (800154c <HAL_RCC_OscConfig+0x470>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001366:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800136a:	60bb      	str	r3, [r7, #8]
 800136c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800136e:	2301      	movs	r3, #1
 8001370:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001372:	4b77      	ldr	r3, [pc, #476]	@ (8001550 <HAL_RCC_OscConfig+0x474>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800137a:	2b00      	cmp	r3, #0
 800137c:	d118      	bne.n	80013b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800137e:	4b74      	ldr	r3, [pc, #464]	@ (8001550 <HAL_RCC_OscConfig+0x474>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a73      	ldr	r2, [pc, #460]	@ (8001550 <HAL_RCC_OscConfig+0x474>)
 8001384:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001388:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800138a:	f7ff fc01 	bl	8000b90 <HAL_GetTick>
 800138e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001390:	e008      	b.n	80013a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001392:	f7ff fbfd 	bl	8000b90 <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2b02      	cmp	r3, #2
 800139e:	d901      	bls.n	80013a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	e10c      	b.n	80015be <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013a4:	4b6a      	ldr	r3, [pc, #424]	@ (8001550 <HAL_RCC_OscConfig+0x474>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d0f0      	beq.n	8001392 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d106      	bne.n	80013c6 <HAL_RCC_OscConfig+0x2ea>
 80013b8:	4b64      	ldr	r3, [pc, #400]	@ (800154c <HAL_RCC_OscConfig+0x470>)
 80013ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013bc:	4a63      	ldr	r2, [pc, #396]	@ (800154c <HAL_RCC_OscConfig+0x470>)
 80013be:	f043 0301 	orr.w	r3, r3, #1
 80013c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80013c4:	e01c      	b.n	8001400 <HAL_RCC_OscConfig+0x324>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	2b05      	cmp	r3, #5
 80013cc:	d10c      	bne.n	80013e8 <HAL_RCC_OscConfig+0x30c>
 80013ce:	4b5f      	ldr	r3, [pc, #380]	@ (800154c <HAL_RCC_OscConfig+0x470>)
 80013d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013d2:	4a5e      	ldr	r2, [pc, #376]	@ (800154c <HAL_RCC_OscConfig+0x470>)
 80013d4:	f043 0304 	orr.w	r3, r3, #4
 80013d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80013da:	4b5c      	ldr	r3, [pc, #368]	@ (800154c <HAL_RCC_OscConfig+0x470>)
 80013dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013de:	4a5b      	ldr	r2, [pc, #364]	@ (800154c <HAL_RCC_OscConfig+0x470>)
 80013e0:	f043 0301 	orr.w	r3, r3, #1
 80013e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80013e6:	e00b      	b.n	8001400 <HAL_RCC_OscConfig+0x324>
 80013e8:	4b58      	ldr	r3, [pc, #352]	@ (800154c <HAL_RCC_OscConfig+0x470>)
 80013ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013ec:	4a57      	ldr	r2, [pc, #348]	@ (800154c <HAL_RCC_OscConfig+0x470>)
 80013ee:	f023 0301 	bic.w	r3, r3, #1
 80013f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80013f4:	4b55      	ldr	r3, [pc, #340]	@ (800154c <HAL_RCC_OscConfig+0x470>)
 80013f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013f8:	4a54      	ldr	r2, [pc, #336]	@ (800154c <HAL_RCC_OscConfig+0x470>)
 80013fa:	f023 0304 	bic.w	r3, r3, #4
 80013fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d015      	beq.n	8001434 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001408:	f7ff fbc2 	bl	8000b90 <HAL_GetTick>
 800140c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800140e:	e00a      	b.n	8001426 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001410:	f7ff fbbe 	bl	8000b90 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800141e:	4293      	cmp	r3, r2
 8001420:	d901      	bls.n	8001426 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e0cb      	b.n	80015be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001426:	4b49      	ldr	r3, [pc, #292]	@ (800154c <HAL_RCC_OscConfig+0x470>)
 8001428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d0ee      	beq.n	8001410 <HAL_RCC_OscConfig+0x334>
 8001432:	e014      	b.n	800145e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001434:	f7ff fbac 	bl	8000b90 <HAL_GetTick>
 8001438:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800143a:	e00a      	b.n	8001452 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800143c:	f7ff fba8 	bl	8000b90 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	f241 3288 	movw	r2, #5000	@ 0x1388
 800144a:	4293      	cmp	r3, r2
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e0b5      	b.n	80015be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001452:	4b3e      	ldr	r3, [pc, #248]	@ (800154c <HAL_RCC_OscConfig+0x470>)
 8001454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1ee      	bne.n	800143c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800145e:	7dfb      	ldrb	r3, [r7, #23]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d105      	bne.n	8001470 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001464:	4b39      	ldr	r3, [pc, #228]	@ (800154c <HAL_RCC_OscConfig+0x470>)
 8001466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001468:	4a38      	ldr	r2, [pc, #224]	@ (800154c <HAL_RCC_OscConfig+0x470>)
 800146a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800146e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	2b00      	cmp	r3, #0
 8001476:	f000 80a1 	beq.w	80015bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800147a:	4b34      	ldr	r3, [pc, #208]	@ (800154c <HAL_RCC_OscConfig+0x470>)
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	f003 030c 	and.w	r3, r3, #12
 8001482:	2b08      	cmp	r3, #8
 8001484:	d05c      	beq.n	8001540 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	699b      	ldr	r3, [r3, #24]
 800148a:	2b02      	cmp	r3, #2
 800148c:	d141      	bne.n	8001512 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800148e:	4b31      	ldr	r3, [pc, #196]	@ (8001554 <HAL_RCC_OscConfig+0x478>)
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001494:	f7ff fb7c 	bl	8000b90 <HAL_GetTick>
 8001498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800149a:	e008      	b.n	80014ae <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800149c:	f7ff fb78 	bl	8000b90 <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e087      	b.n	80015be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ae:	4b27      	ldr	r3, [pc, #156]	@ (800154c <HAL_RCC_OscConfig+0x470>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1f0      	bne.n	800149c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	69da      	ldr	r2, [r3, #28]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6a1b      	ldr	r3, [r3, #32]
 80014c2:	431a      	orrs	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014c8:	019b      	lsls	r3, r3, #6
 80014ca:	431a      	orrs	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014d0:	085b      	lsrs	r3, r3, #1
 80014d2:	3b01      	subs	r3, #1
 80014d4:	041b      	lsls	r3, r3, #16
 80014d6:	431a      	orrs	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014dc:	061b      	lsls	r3, r3, #24
 80014de:	491b      	ldr	r1, [pc, #108]	@ (800154c <HAL_RCC_OscConfig+0x470>)
 80014e0:	4313      	orrs	r3, r2
 80014e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001554 <HAL_RCC_OscConfig+0x478>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ea:	f7ff fb51 	bl	8000b90 <HAL_GetTick>
 80014ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014f0:	e008      	b.n	8001504 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014f2:	f7ff fb4d 	bl	8000b90 <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d901      	bls.n	8001504 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e05c      	b.n	80015be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001504:	4b11      	ldr	r3, [pc, #68]	@ (800154c <HAL_RCC_OscConfig+0x470>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d0f0      	beq.n	80014f2 <HAL_RCC_OscConfig+0x416>
 8001510:	e054      	b.n	80015bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001512:	4b10      	ldr	r3, [pc, #64]	@ (8001554 <HAL_RCC_OscConfig+0x478>)
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001518:	f7ff fb3a 	bl	8000b90 <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001520:	f7ff fb36 	bl	8000b90 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b02      	cmp	r3, #2
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e045      	b.n	80015be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001532:	4b06      	ldr	r3, [pc, #24]	@ (800154c <HAL_RCC_OscConfig+0x470>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1f0      	bne.n	8001520 <HAL_RCC_OscConfig+0x444>
 800153e:	e03d      	b.n	80015bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d107      	bne.n	8001558 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e038      	b.n	80015be <HAL_RCC_OscConfig+0x4e2>
 800154c:	40023800 	.word	0x40023800
 8001550:	40007000 	.word	0x40007000
 8001554:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001558:	4b1b      	ldr	r3, [pc, #108]	@ (80015c8 <HAL_RCC_OscConfig+0x4ec>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d028      	beq.n	80015b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001570:	429a      	cmp	r2, r3
 8001572:	d121      	bne.n	80015b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800157e:	429a      	cmp	r2, r3
 8001580:	d11a      	bne.n	80015b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001582:	68fa      	ldr	r2, [r7, #12]
 8001584:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001588:	4013      	ands	r3, r2
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800158e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001590:	4293      	cmp	r3, r2
 8001592:	d111      	bne.n	80015b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800159e:	085b      	lsrs	r3, r3, #1
 80015a0:	3b01      	subs	r3, #1
 80015a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d107      	bne.n	80015b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d001      	beq.n	80015bc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e000      	b.n	80015be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3718      	adds	r7, #24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40023800 	.word	0x40023800

080015cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d101      	bne.n	80015e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e0cc      	b.n	800177a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015e0:	4b68      	ldr	r3, [pc, #416]	@ (8001784 <HAL_RCC_ClockConfig+0x1b8>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0307 	and.w	r3, r3, #7
 80015e8:	683a      	ldr	r2, [r7, #0]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d90c      	bls.n	8001608 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ee:	4b65      	ldr	r3, [pc, #404]	@ (8001784 <HAL_RCC_ClockConfig+0x1b8>)
 80015f0:	683a      	ldr	r2, [r7, #0]
 80015f2:	b2d2      	uxtb	r2, r2
 80015f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015f6:	4b63      	ldr	r3, [pc, #396]	@ (8001784 <HAL_RCC_ClockConfig+0x1b8>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0307 	and.w	r3, r3, #7
 80015fe:	683a      	ldr	r2, [r7, #0]
 8001600:	429a      	cmp	r2, r3
 8001602:	d001      	beq.n	8001608 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e0b8      	b.n	800177a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	2b00      	cmp	r3, #0
 8001612:	d020      	beq.n	8001656 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0304 	and.w	r3, r3, #4
 800161c:	2b00      	cmp	r3, #0
 800161e:	d005      	beq.n	800162c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001620:	4b59      	ldr	r3, [pc, #356]	@ (8001788 <HAL_RCC_ClockConfig+0x1bc>)
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	4a58      	ldr	r2, [pc, #352]	@ (8001788 <HAL_RCC_ClockConfig+0x1bc>)
 8001626:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800162a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0308 	and.w	r3, r3, #8
 8001634:	2b00      	cmp	r3, #0
 8001636:	d005      	beq.n	8001644 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001638:	4b53      	ldr	r3, [pc, #332]	@ (8001788 <HAL_RCC_ClockConfig+0x1bc>)
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	4a52      	ldr	r2, [pc, #328]	@ (8001788 <HAL_RCC_ClockConfig+0x1bc>)
 800163e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001642:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001644:	4b50      	ldr	r3, [pc, #320]	@ (8001788 <HAL_RCC_ClockConfig+0x1bc>)
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	494d      	ldr	r1, [pc, #308]	@ (8001788 <HAL_RCC_ClockConfig+0x1bc>)
 8001652:	4313      	orrs	r3, r2
 8001654:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	2b00      	cmp	r3, #0
 8001660:	d044      	beq.n	80016ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d107      	bne.n	800167a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800166a:	4b47      	ldr	r3, [pc, #284]	@ (8001788 <HAL_RCC_ClockConfig+0x1bc>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d119      	bne.n	80016aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e07f      	b.n	800177a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	2b02      	cmp	r3, #2
 8001680:	d003      	beq.n	800168a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001686:	2b03      	cmp	r3, #3
 8001688:	d107      	bne.n	800169a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800168a:	4b3f      	ldr	r3, [pc, #252]	@ (8001788 <HAL_RCC_ClockConfig+0x1bc>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d109      	bne.n	80016aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e06f      	b.n	800177a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800169a:	4b3b      	ldr	r3, [pc, #236]	@ (8001788 <HAL_RCC_ClockConfig+0x1bc>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d101      	bne.n	80016aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e067      	b.n	800177a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016aa:	4b37      	ldr	r3, [pc, #220]	@ (8001788 <HAL_RCC_ClockConfig+0x1bc>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f023 0203 	bic.w	r2, r3, #3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	4934      	ldr	r1, [pc, #208]	@ (8001788 <HAL_RCC_ClockConfig+0x1bc>)
 80016b8:	4313      	orrs	r3, r2
 80016ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016bc:	f7ff fa68 	bl	8000b90 <HAL_GetTick>
 80016c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016c2:	e00a      	b.n	80016da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016c4:	f7ff fa64 	bl	8000b90 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d901      	bls.n	80016da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e04f      	b.n	800177a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016da:	4b2b      	ldr	r3, [pc, #172]	@ (8001788 <HAL_RCC_ClockConfig+0x1bc>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f003 020c 	and.w	r2, r3, #12
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d1eb      	bne.n	80016c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016ec:	4b25      	ldr	r3, [pc, #148]	@ (8001784 <HAL_RCC_ClockConfig+0x1b8>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0307 	and.w	r3, r3, #7
 80016f4:	683a      	ldr	r2, [r7, #0]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d20c      	bcs.n	8001714 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016fa:	4b22      	ldr	r3, [pc, #136]	@ (8001784 <HAL_RCC_ClockConfig+0x1b8>)
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	b2d2      	uxtb	r2, r2
 8001700:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001702:	4b20      	ldr	r3, [pc, #128]	@ (8001784 <HAL_RCC_ClockConfig+0x1b8>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0307 	and.w	r3, r3, #7
 800170a:	683a      	ldr	r2, [r7, #0]
 800170c:	429a      	cmp	r2, r3
 800170e:	d001      	beq.n	8001714 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e032      	b.n	800177a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0304 	and.w	r3, r3, #4
 800171c:	2b00      	cmp	r3, #0
 800171e:	d008      	beq.n	8001732 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001720:	4b19      	ldr	r3, [pc, #100]	@ (8001788 <HAL_RCC_ClockConfig+0x1bc>)
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	4916      	ldr	r1, [pc, #88]	@ (8001788 <HAL_RCC_ClockConfig+0x1bc>)
 800172e:	4313      	orrs	r3, r2
 8001730:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0308 	and.w	r3, r3, #8
 800173a:	2b00      	cmp	r3, #0
 800173c:	d009      	beq.n	8001752 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800173e:	4b12      	ldr	r3, [pc, #72]	@ (8001788 <HAL_RCC_ClockConfig+0x1bc>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	691b      	ldr	r3, [r3, #16]
 800174a:	00db      	lsls	r3, r3, #3
 800174c:	490e      	ldr	r1, [pc, #56]	@ (8001788 <HAL_RCC_ClockConfig+0x1bc>)
 800174e:	4313      	orrs	r3, r2
 8001750:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001752:	f000 f821 	bl	8001798 <HAL_RCC_GetSysClockFreq>
 8001756:	4602      	mov	r2, r0
 8001758:	4b0b      	ldr	r3, [pc, #44]	@ (8001788 <HAL_RCC_ClockConfig+0x1bc>)
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	091b      	lsrs	r3, r3, #4
 800175e:	f003 030f 	and.w	r3, r3, #15
 8001762:	490a      	ldr	r1, [pc, #40]	@ (800178c <HAL_RCC_ClockConfig+0x1c0>)
 8001764:	5ccb      	ldrb	r3, [r1, r3]
 8001766:	fa22 f303 	lsr.w	r3, r2, r3
 800176a:	4a09      	ldr	r2, [pc, #36]	@ (8001790 <HAL_RCC_ClockConfig+0x1c4>)
 800176c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800176e:	4b09      	ldr	r3, [pc, #36]	@ (8001794 <HAL_RCC_ClockConfig+0x1c8>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff f8f8 	bl	8000968 <HAL_InitTick>

  return HAL_OK;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40023c00 	.word	0x40023c00
 8001788:	40023800 	.word	0x40023800
 800178c:	08005ad0 	.word	0x08005ad0
 8001790:	20000004 	.word	0x20000004
 8001794:	20000008 	.word	0x20000008

08001798 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001798:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800179c:	b090      	sub	sp, #64	@ 0x40
 800179e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80017a0:	2300      	movs	r3, #0
 80017a2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80017a4:	2300      	movs	r3, #0
 80017a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80017a8:	2300      	movs	r3, #0
 80017aa:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80017ac:	2300      	movs	r3, #0
 80017ae:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017b0:	4b59      	ldr	r3, [pc, #356]	@ (8001918 <HAL_RCC_GetSysClockFreq+0x180>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f003 030c 	and.w	r3, r3, #12
 80017b8:	2b08      	cmp	r3, #8
 80017ba:	d00d      	beq.n	80017d8 <HAL_RCC_GetSysClockFreq+0x40>
 80017bc:	2b08      	cmp	r3, #8
 80017be:	f200 80a1 	bhi.w	8001904 <HAL_RCC_GetSysClockFreq+0x16c>
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d002      	beq.n	80017cc <HAL_RCC_GetSysClockFreq+0x34>
 80017c6:	2b04      	cmp	r3, #4
 80017c8:	d003      	beq.n	80017d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80017ca:	e09b      	b.n	8001904 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017cc:	4b53      	ldr	r3, [pc, #332]	@ (800191c <HAL_RCC_GetSysClockFreq+0x184>)
 80017ce:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80017d0:	e09b      	b.n	800190a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017d2:	4b53      	ldr	r3, [pc, #332]	@ (8001920 <HAL_RCC_GetSysClockFreq+0x188>)
 80017d4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80017d6:	e098      	b.n	800190a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017d8:	4b4f      	ldr	r3, [pc, #316]	@ (8001918 <HAL_RCC_GetSysClockFreq+0x180>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017e0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017e2:	4b4d      	ldr	r3, [pc, #308]	@ (8001918 <HAL_RCC_GetSysClockFreq+0x180>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d028      	beq.n	8001840 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017ee:	4b4a      	ldr	r3, [pc, #296]	@ (8001918 <HAL_RCC_GetSysClockFreq+0x180>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	099b      	lsrs	r3, r3, #6
 80017f4:	2200      	movs	r2, #0
 80017f6:	623b      	str	r3, [r7, #32]
 80017f8:	627a      	str	r2, [r7, #36]	@ 0x24
 80017fa:	6a3b      	ldr	r3, [r7, #32]
 80017fc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001800:	2100      	movs	r1, #0
 8001802:	4b47      	ldr	r3, [pc, #284]	@ (8001920 <HAL_RCC_GetSysClockFreq+0x188>)
 8001804:	fb03 f201 	mul.w	r2, r3, r1
 8001808:	2300      	movs	r3, #0
 800180a:	fb00 f303 	mul.w	r3, r0, r3
 800180e:	4413      	add	r3, r2
 8001810:	4a43      	ldr	r2, [pc, #268]	@ (8001920 <HAL_RCC_GetSysClockFreq+0x188>)
 8001812:	fba0 1202 	umull	r1, r2, r0, r2
 8001816:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001818:	460a      	mov	r2, r1
 800181a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800181c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800181e:	4413      	add	r3, r2
 8001820:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001822:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001824:	2200      	movs	r2, #0
 8001826:	61bb      	str	r3, [r7, #24]
 8001828:	61fa      	str	r2, [r7, #28]
 800182a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800182e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001832:	f7fe fcd5 	bl	80001e0 <__aeabi_uldivmod>
 8001836:	4602      	mov	r2, r0
 8001838:	460b      	mov	r3, r1
 800183a:	4613      	mov	r3, r2
 800183c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800183e:	e053      	b.n	80018e8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001840:	4b35      	ldr	r3, [pc, #212]	@ (8001918 <HAL_RCC_GetSysClockFreq+0x180>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	099b      	lsrs	r3, r3, #6
 8001846:	2200      	movs	r2, #0
 8001848:	613b      	str	r3, [r7, #16]
 800184a:	617a      	str	r2, [r7, #20]
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001852:	f04f 0b00 	mov.w	fp, #0
 8001856:	4652      	mov	r2, sl
 8001858:	465b      	mov	r3, fp
 800185a:	f04f 0000 	mov.w	r0, #0
 800185e:	f04f 0100 	mov.w	r1, #0
 8001862:	0159      	lsls	r1, r3, #5
 8001864:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001868:	0150      	lsls	r0, r2, #5
 800186a:	4602      	mov	r2, r0
 800186c:	460b      	mov	r3, r1
 800186e:	ebb2 080a 	subs.w	r8, r2, sl
 8001872:	eb63 090b 	sbc.w	r9, r3, fp
 8001876:	f04f 0200 	mov.w	r2, #0
 800187a:	f04f 0300 	mov.w	r3, #0
 800187e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001882:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001886:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800188a:	ebb2 0408 	subs.w	r4, r2, r8
 800188e:	eb63 0509 	sbc.w	r5, r3, r9
 8001892:	f04f 0200 	mov.w	r2, #0
 8001896:	f04f 0300 	mov.w	r3, #0
 800189a:	00eb      	lsls	r3, r5, #3
 800189c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018a0:	00e2      	lsls	r2, r4, #3
 80018a2:	4614      	mov	r4, r2
 80018a4:	461d      	mov	r5, r3
 80018a6:	eb14 030a 	adds.w	r3, r4, sl
 80018aa:	603b      	str	r3, [r7, #0]
 80018ac:	eb45 030b 	adc.w	r3, r5, fp
 80018b0:	607b      	str	r3, [r7, #4]
 80018b2:	f04f 0200 	mov.w	r2, #0
 80018b6:	f04f 0300 	mov.w	r3, #0
 80018ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018be:	4629      	mov	r1, r5
 80018c0:	028b      	lsls	r3, r1, #10
 80018c2:	4621      	mov	r1, r4
 80018c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018c8:	4621      	mov	r1, r4
 80018ca:	028a      	lsls	r2, r1, #10
 80018cc:	4610      	mov	r0, r2
 80018ce:	4619      	mov	r1, r3
 80018d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018d2:	2200      	movs	r2, #0
 80018d4:	60bb      	str	r3, [r7, #8]
 80018d6:	60fa      	str	r2, [r7, #12]
 80018d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018dc:	f7fe fc80 	bl	80001e0 <__aeabi_uldivmod>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	4613      	mov	r3, r2
 80018e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80018e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001918 <HAL_RCC_GetSysClockFreq+0x180>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	0c1b      	lsrs	r3, r3, #16
 80018ee:	f003 0303 	and.w	r3, r3, #3
 80018f2:	3301      	adds	r3, #1
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80018f8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80018fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001900:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001902:	e002      	b.n	800190a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001904:	4b05      	ldr	r3, [pc, #20]	@ (800191c <HAL_RCC_GetSysClockFreq+0x184>)
 8001906:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001908:	bf00      	nop
    }
  }
  return sysclockfreq;
 800190a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800190c:	4618      	mov	r0, r3
 800190e:	3740      	adds	r7, #64	@ 0x40
 8001910:	46bd      	mov	sp, r7
 8001912:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001916:	bf00      	nop
 8001918:	40023800 	.word	0x40023800
 800191c:	00f42400 	.word	0x00f42400
 8001920:	017d7840 	.word	0x017d7840

08001924 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001928:	4b03      	ldr	r3, [pc, #12]	@ (8001938 <HAL_RCC_GetHCLKFreq+0x14>)
 800192a:	681b      	ldr	r3, [r3, #0]
}
 800192c:	4618      	mov	r0, r3
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	20000004 	.word	0x20000004

0800193c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001940:	f7ff fff0 	bl	8001924 <HAL_RCC_GetHCLKFreq>
 8001944:	4602      	mov	r2, r0
 8001946:	4b05      	ldr	r3, [pc, #20]	@ (800195c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	0a9b      	lsrs	r3, r3, #10
 800194c:	f003 0307 	and.w	r3, r3, #7
 8001950:	4903      	ldr	r1, [pc, #12]	@ (8001960 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001952:	5ccb      	ldrb	r3, [r1, r3]
 8001954:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001958:	4618      	mov	r0, r3
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40023800 	.word	0x40023800
 8001960:	08005ae0 	.word	0x08005ae0

08001964 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	220f      	movs	r2, #15
 8001972:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001974:	4b12      	ldr	r3, [pc, #72]	@ (80019c0 <HAL_RCC_GetClockConfig+0x5c>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f003 0203 	and.w	r2, r3, #3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001980:	4b0f      	ldr	r3, [pc, #60]	@ (80019c0 <HAL_RCC_GetClockConfig+0x5c>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800198c:	4b0c      	ldr	r3, [pc, #48]	@ (80019c0 <HAL_RCC_GetClockConfig+0x5c>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001998:	4b09      	ldr	r3, [pc, #36]	@ (80019c0 <HAL_RCC_GetClockConfig+0x5c>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	08db      	lsrs	r3, r3, #3
 800199e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80019a6:	4b07      	ldr	r3, [pc, #28]	@ (80019c4 <HAL_RCC_GetClockConfig+0x60>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0207 	and.w	r2, r3, #7
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	601a      	str	r2, [r3, #0]
}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	40023800 	.word	0x40023800
 80019c4:	40023c00 	.word	0x40023c00

080019c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e041      	b.n	8001a5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d106      	bne.n	80019f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7fe ff9a 	bl	8000928 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2202      	movs	r2, #2
 80019f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	3304      	adds	r3, #4
 8001a04:	4619      	mov	r1, r3
 8001a06:	4610      	mov	r0, r2
 8001a08:	f000 faf2 	bl	8001ff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2201      	movs	r2, #1
 8001a38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2201      	movs	r2, #1
 8001a48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
	...

08001a68 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d001      	beq.n	8001a80 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e03c      	b.n	8001afa <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2202      	movs	r2, #2
 8001a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a1e      	ldr	r2, [pc, #120]	@ (8001b08 <HAL_TIM_Base_Start+0xa0>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d018      	beq.n	8001ac4 <HAL_TIM_Base_Start+0x5c>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a9a:	d013      	beq.n	8001ac4 <HAL_TIM_Base_Start+0x5c>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a1a      	ldr	r2, [pc, #104]	@ (8001b0c <HAL_TIM_Base_Start+0xa4>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d00e      	beq.n	8001ac4 <HAL_TIM_Base_Start+0x5c>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a19      	ldr	r2, [pc, #100]	@ (8001b10 <HAL_TIM_Base_Start+0xa8>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d009      	beq.n	8001ac4 <HAL_TIM_Base_Start+0x5c>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a17      	ldr	r2, [pc, #92]	@ (8001b14 <HAL_TIM_Base_Start+0xac>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d004      	beq.n	8001ac4 <HAL_TIM_Base_Start+0x5c>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a16      	ldr	r2, [pc, #88]	@ (8001b18 <HAL_TIM_Base_Start+0xb0>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d111      	bne.n	8001ae8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2b06      	cmp	r3, #6
 8001ad4:	d010      	beq.n	8001af8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f042 0201 	orr.w	r2, r2, #1
 8001ae4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ae6:	e007      	b.n	8001af8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f042 0201 	orr.w	r2, r2, #1
 8001af6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3714      	adds	r7, #20
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	40010000 	.word	0x40010000
 8001b0c:	40000400 	.word	0x40000400
 8001b10:	40000800 	.word	0x40000800
 8001b14:	40000c00 	.word	0x40000c00
 8001b18:	40014000 	.word	0x40014000

08001b1c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6a1a      	ldr	r2, [r3, #32]
 8001b2a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001b2e:	4013      	ands	r3, r2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d10f      	bne.n	8001b54 <HAL_TIM_Base_Stop+0x38>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	6a1a      	ldr	r2, [r3, #32]
 8001b3a:	f240 4344 	movw	r3, #1092	@ 0x444
 8001b3e:	4013      	ands	r3, r2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d107      	bne.n	8001b54 <HAL_TIM_Base_Stop+0x38>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f022 0201 	bic.w	r2, r2, #1
 8001b52:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
	...

08001b6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d001      	beq.n	8001b84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e044      	b.n	8001c0e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2202      	movs	r2, #2
 8001b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	68da      	ldr	r2, [r3, #12]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f042 0201 	orr.w	r2, r2, #1
 8001b9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a1e      	ldr	r2, [pc, #120]	@ (8001c1c <HAL_TIM_Base_Start_IT+0xb0>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d018      	beq.n	8001bd8 <HAL_TIM_Base_Start_IT+0x6c>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bae:	d013      	beq.n	8001bd8 <HAL_TIM_Base_Start_IT+0x6c>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a1a      	ldr	r2, [pc, #104]	@ (8001c20 <HAL_TIM_Base_Start_IT+0xb4>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d00e      	beq.n	8001bd8 <HAL_TIM_Base_Start_IT+0x6c>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a19      	ldr	r2, [pc, #100]	@ (8001c24 <HAL_TIM_Base_Start_IT+0xb8>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d009      	beq.n	8001bd8 <HAL_TIM_Base_Start_IT+0x6c>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a17      	ldr	r2, [pc, #92]	@ (8001c28 <HAL_TIM_Base_Start_IT+0xbc>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d004      	beq.n	8001bd8 <HAL_TIM_Base_Start_IT+0x6c>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a16      	ldr	r2, [pc, #88]	@ (8001c2c <HAL_TIM_Base_Start_IT+0xc0>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d111      	bne.n	8001bfc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2b06      	cmp	r3, #6
 8001be8:	d010      	beq.n	8001c0c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f042 0201 	orr.w	r2, r2, #1
 8001bf8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bfa:	e007      	b.n	8001c0c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f042 0201 	orr.w	r2, r2, #1
 8001c0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3714      	adds	r7, #20
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	40010000 	.word	0x40010000
 8001c20:	40000400 	.word	0x40000400
 8001c24:	40000800 	.word	0x40000800
 8001c28:	40000c00 	.word	0x40000c00
 8001c2c:	40014000 	.word	0x40014000

08001c30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d020      	beq.n	8001c94 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d01b      	beq.n	8001c94 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f06f 0202 	mvn.w	r2, #2
 8001c64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	f003 0303 	and.w	r3, r3, #3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d003      	beq.n	8001c82 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 f999 	bl	8001fb2 <HAL_TIM_IC_CaptureCallback>
 8001c80:	e005      	b.n	8001c8e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 f98b 	bl	8001f9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f000 f99c 	bl	8001fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	f003 0304 	and.w	r3, r3, #4
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d020      	beq.n	8001ce0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f003 0304 	and.w	r3, r3, #4
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d01b      	beq.n	8001ce0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f06f 0204 	mvn.w	r2, #4
 8001cb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2202      	movs	r2, #2
 8001cb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 f973 	bl	8001fb2 <HAL_TIM_IC_CaptureCallback>
 8001ccc:	e005      	b.n	8001cda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f965 	bl	8001f9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f000 f976 	bl	8001fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	f003 0308 	and.w	r3, r3, #8
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d020      	beq.n	8001d2c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f003 0308 	and.w	r3, r3, #8
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d01b      	beq.n	8001d2c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f06f 0208 	mvn.w	r2, #8
 8001cfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2204      	movs	r2, #4
 8001d02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	f003 0303 	and.w	r3, r3, #3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d003      	beq.n	8001d1a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 f94d 	bl	8001fb2 <HAL_TIM_IC_CaptureCallback>
 8001d18:	e005      	b.n	8001d26 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 f93f 	bl	8001f9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 f950 	bl	8001fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	f003 0310 	and.w	r3, r3, #16
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d020      	beq.n	8001d78 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f003 0310 	and.w	r3, r3, #16
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d01b      	beq.n	8001d78 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f06f 0210 	mvn.w	r2, #16
 8001d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2208      	movs	r2, #8
 8001d4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	69db      	ldr	r3, [r3, #28]
 8001d56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 f927 	bl	8001fb2 <HAL_TIM_IC_CaptureCallback>
 8001d64:	e005      	b.n	8001d72 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 f919 	bl	8001f9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f000 f92a 	bl	8001fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d00c      	beq.n	8001d9c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d007      	beq.n	8001d9c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f06f 0201 	mvn.w	r2, #1
 8001d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f7fe fd82 	bl	80008a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d00c      	beq.n	8001dc0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d007      	beq.n	8001dc0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 fab6 	bl	800232c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d00c      	beq.n	8001de4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d007      	beq.n	8001de4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001ddc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 f8fb 	bl	8001fda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	f003 0320 	and.w	r3, r3, #32
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d00c      	beq.n	8001e08 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f003 0320 	and.w	r3, r3, #32
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d007      	beq.n	8001e08 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f06f 0220 	mvn.w	r2, #32
 8001e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 fa88 	bl	8002318 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e08:	bf00      	nop
 8001e0a:	3710      	adds	r7, #16
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d101      	bne.n	8001e2c <HAL_TIM_ConfigClockSource+0x1c>
 8001e28:	2302      	movs	r3, #2
 8001e2a:	e0b4      	b.n	8001f96 <HAL_TIM_ConfigClockSource+0x186>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2202      	movs	r2, #2
 8001e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001e4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001e52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68ba      	ldr	r2, [r7, #8]
 8001e5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e64:	d03e      	beq.n	8001ee4 <HAL_TIM_ConfigClockSource+0xd4>
 8001e66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e6a:	f200 8087 	bhi.w	8001f7c <HAL_TIM_ConfigClockSource+0x16c>
 8001e6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e72:	f000 8086 	beq.w	8001f82 <HAL_TIM_ConfigClockSource+0x172>
 8001e76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e7a:	d87f      	bhi.n	8001f7c <HAL_TIM_ConfigClockSource+0x16c>
 8001e7c:	2b70      	cmp	r3, #112	@ 0x70
 8001e7e:	d01a      	beq.n	8001eb6 <HAL_TIM_ConfigClockSource+0xa6>
 8001e80:	2b70      	cmp	r3, #112	@ 0x70
 8001e82:	d87b      	bhi.n	8001f7c <HAL_TIM_ConfigClockSource+0x16c>
 8001e84:	2b60      	cmp	r3, #96	@ 0x60
 8001e86:	d050      	beq.n	8001f2a <HAL_TIM_ConfigClockSource+0x11a>
 8001e88:	2b60      	cmp	r3, #96	@ 0x60
 8001e8a:	d877      	bhi.n	8001f7c <HAL_TIM_ConfigClockSource+0x16c>
 8001e8c:	2b50      	cmp	r3, #80	@ 0x50
 8001e8e:	d03c      	beq.n	8001f0a <HAL_TIM_ConfigClockSource+0xfa>
 8001e90:	2b50      	cmp	r3, #80	@ 0x50
 8001e92:	d873      	bhi.n	8001f7c <HAL_TIM_ConfigClockSource+0x16c>
 8001e94:	2b40      	cmp	r3, #64	@ 0x40
 8001e96:	d058      	beq.n	8001f4a <HAL_TIM_ConfigClockSource+0x13a>
 8001e98:	2b40      	cmp	r3, #64	@ 0x40
 8001e9a:	d86f      	bhi.n	8001f7c <HAL_TIM_ConfigClockSource+0x16c>
 8001e9c:	2b30      	cmp	r3, #48	@ 0x30
 8001e9e:	d064      	beq.n	8001f6a <HAL_TIM_ConfigClockSource+0x15a>
 8001ea0:	2b30      	cmp	r3, #48	@ 0x30
 8001ea2:	d86b      	bhi.n	8001f7c <HAL_TIM_ConfigClockSource+0x16c>
 8001ea4:	2b20      	cmp	r3, #32
 8001ea6:	d060      	beq.n	8001f6a <HAL_TIM_ConfigClockSource+0x15a>
 8001ea8:	2b20      	cmp	r3, #32
 8001eaa:	d867      	bhi.n	8001f7c <HAL_TIM_ConfigClockSource+0x16c>
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d05c      	beq.n	8001f6a <HAL_TIM_ConfigClockSource+0x15a>
 8001eb0:	2b10      	cmp	r3, #16
 8001eb2:	d05a      	beq.n	8001f6a <HAL_TIM_ConfigClockSource+0x15a>
 8001eb4:	e062      	b.n	8001f7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001ec6:	f000 f999 	bl	80021fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001ed8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68ba      	ldr	r2, [r7, #8]
 8001ee0:	609a      	str	r2, [r3, #8]
      break;
 8001ee2:	e04f      	b.n	8001f84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001ef4:	f000 f982 	bl	80021fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	689a      	ldr	r2, [r3, #8]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001f06:	609a      	str	r2, [r3, #8]
      break;
 8001f08:	e03c      	b.n	8001f84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f16:	461a      	mov	r2, r3
 8001f18:	f000 f8f6 	bl	8002108 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2150      	movs	r1, #80	@ 0x50
 8001f22:	4618      	mov	r0, r3
 8001f24:	f000 f94f 	bl	80021c6 <TIM_ITRx_SetConfig>
      break;
 8001f28:	e02c      	b.n	8001f84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f36:	461a      	mov	r2, r3
 8001f38:	f000 f915 	bl	8002166 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2160      	movs	r1, #96	@ 0x60
 8001f42:	4618      	mov	r0, r3
 8001f44:	f000 f93f 	bl	80021c6 <TIM_ITRx_SetConfig>
      break;
 8001f48:	e01c      	b.n	8001f84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f56:	461a      	mov	r2, r3
 8001f58:	f000 f8d6 	bl	8002108 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2140      	movs	r1, #64	@ 0x40
 8001f62:	4618      	mov	r0, r3
 8001f64:	f000 f92f 	bl	80021c6 <TIM_ITRx_SetConfig>
      break;
 8001f68:	e00c      	b.n	8001f84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4619      	mov	r1, r3
 8001f74:	4610      	mov	r0, r2
 8001f76:	f000 f926 	bl	80021c6 <TIM_ITRx_SetConfig>
      break;
 8001f7a:	e003      	b.n	8001f84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	73fb      	strb	r3, [r7, #15]
      break;
 8001f80:	e000      	b.n	8001f84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001f82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b083      	sub	sp, #12
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fce:	bf00      	nop
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	b083      	sub	sp, #12
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
	...

08001ff0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a3a      	ldr	r2, [pc, #232]	@ (80020ec <TIM_Base_SetConfig+0xfc>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d00f      	beq.n	8002028 <TIM_Base_SetConfig+0x38>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800200e:	d00b      	beq.n	8002028 <TIM_Base_SetConfig+0x38>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a37      	ldr	r2, [pc, #220]	@ (80020f0 <TIM_Base_SetConfig+0x100>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d007      	beq.n	8002028 <TIM_Base_SetConfig+0x38>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a36      	ldr	r2, [pc, #216]	@ (80020f4 <TIM_Base_SetConfig+0x104>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d003      	beq.n	8002028 <TIM_Base_SetConfig+0x38>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a35      	ldr	r2, [pc, #212]	@ (80020f8 <TIM_Base_SetConfig+0x108>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d108      	bne.n	800203a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800202e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	4313      	orrs	r3, r2
 8002038:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a2b      	ldr	r2, [pc, #172]	@ (80020ec <TIM_Base_SetConfig+0xfc>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d01b      	beq.n	800207a <TIM_Base_SetConfig+0x8a>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002048:	d017      	beq.n	800207a <TIM_Base_SetConfig+0x8a>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a28      	ldr	r2, [pc, #160]	@ (80020f0 <TIM_Base_SetConfig+0x100>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d013      	beq.n	800207a <TIM_Base_SetConfig+0x8a>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a27      	ldr	r2, [pc, #156]	@ (80020f4 <TIM_Base_SetConfig+0x104>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d00f      	beq.n	800207a <TIM_Base_SetConfig+0x8a>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a26      	ldr	r2, [pc, #152]	@ (80020f8 <TIM_Base_SetConfig+0x108>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d00b      	beq.n	800207a <TIM_Base_SetConfig+0x8a>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a25      	ldr	r2, [pc, #148]	@ (80020fc <TIM_Base_SetConfig+0x10c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d007      	beq.n	800207a <TIM_Base_SetConfig+0x8a>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a24      	ldr	r2, [pc, #144]	@ (8002100 <TIM_Base_SetConfig+0x110>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d003      	beq.n	800207a <TIM_Base_SetConfig+0x8a>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a23      	ldr	r2, [pc, #140]	@ (8002104 <TIM_Base_SetConfig+0x114>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d108      	bne.n	800208c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002080:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	4313      	orrs	r3, r2
 800208a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	4313      	orrs	r3, r2
 8002098:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	689a      	ldr	r2, [r3, #8]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a0e      	ldr	r2, [pc, #56]	@ (80020ec <TIM_Base_SetConfig+0xfc>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d103      	bne.n	80020c0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	691a      	ldr	r2, [r3, #16]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d105      	bne.n	80020de <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	f023 0201 	bic.w	r2, r3, #1
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	611a      	str	r2, [r3, #16]
  }
}
 80020de:	bf00      	nop
 80020e0:	3714      	adds	r7, #20
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	40010000 	.word	0x40010000
 80020f0:	40000400 	.word	0x40000400
 80020f4:	40000800 	.word	0x40000800
 80020f8:	40000c00 	.word	0x40000c00
 80020fc:	40014000 	.word	0x40014000
 8002100:	40014400 	.word	0x40014400
 8002104:	40014800 	.word	0x40014800

08002108 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002108:	b480      	push	{r7}
 800210a:	b087      	sub	sp, #28
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6a1b      	ldr	r3, [r3, #32]
 8002118:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6a1b      	ldr	r3, [r3, #32]
 800211e:	f023 0201 	bic.w	r2, r3, #1
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002132:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	011b      	lsls	r3, r3, #4
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	4313      	orrs	r3, r2
 800213c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	f023 030a 	bic.w	r3, r3, #10
 8002144:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002146:	697a      	ldr	r2, [r7, #20]
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	4313      	orrs	r3, r2
 800214c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	697a      	ldr	r2, [r7, #20]
 8002158:	621a      	str	r2, [r3, #32]
}
 800215a:	bf00      	nop
 800215c:	371c      	adds	r7, #28
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002166:	b480      	push	{r7}
 8002168:	b087      	sub	sp, #28
 800216a:	af00      	add	r7, sp, #0
 800216c:	60f8      	str	r0, [r7, #12]
 800216e:	60b9      	str	r1, [r7, #8]
 8002170:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6a1b      	ldr	r3, [r3, #32]
 800217c:	f023 0210 	bic.w	r2, r3, #16
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002190:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	031b      	lsls	r3, r3, #12
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	4313      	orrs	r3, r2
 800219a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80021a2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	011b      	lsls	r3, r3, #4
 80021a8:	697a      	ldr	r2, [r7, #20]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	621a      	str	r2, [r3, #32]
}
 80021ba:	bf00      	nop
 80021bc:	371c      	adds	r7, #28
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b085      	sub	sp, #20
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
 80021ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	f043 0307 	orr.w	r3, r3, #7
 80021e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	68fa      	ldr	r2, [r7, #12]
 80021ee:	609a      	str	r2, [r3, #8]
}
 80021f0:	bf00      	nop
 80021f2:	3714      	adds	r7, #20
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b087      	sub	sp, #28
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
 8002208:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002216:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	021a      	lsls	r2, r3, #8
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	431a      	orrs	r2, r3
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	4313      	orrs	r3, r2
 8002224:	697a      	ldr	r2, [r7, #20]
 8002226:	4313      	orrs	r3, r2
 8002228:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	697a      	ldr	r2, [r7, #20]
 800222e:	609a      	str	r2, [r3, #8]
}
 8002230:	bf00      	nop
 8002232:	371c      	adds	r7, #28
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800224c:	2b01      	cmp	r3, #1
 800224e:	d101      	bne.n	8002254 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002250:	2302      	movs	r3, #2
 8002252:	e050      	b.n	80022f6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2202      	movs	r2, #2
 8002260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800227a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	4313      	orrs	r3, r2
 8002284:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a1c      	ldr	r2, [pc, #112]	@ (8002304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d018      	beq.n	80022ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022a0:	d013      	beq.n	80022ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a18      	ldr	r2, [pc, #96]	@ (8002308 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d00e      	beq.n	80022ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a16      	ldr	r2, [pc, #88]	@ (800230c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d009      	beq.n	80022ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a15      	ldr	r2, [pc, #84]	@ (8002310 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d004      	beq.n	80022ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a13      	ldr	r2, [pc, #76]	@ (8002314 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d10c      	bne.n	80022e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80022d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	68ba      	ldr	r2, [r7, #8]
 80022d8:	4313      	orrs	r3, r2
 80022da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68ba      	ldr	r2, [r7, #8]
 80022e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3714      	adds	r7, #20
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	40010000 	.word	0x40010000
 8002308:	40000400 	.word	0x40000400
 800230c:	40000800 	.word	0x40000800
 8002310:	40000c00 	.word	0x40000c00
 8002314:	40014000 	.word	0x40014000

08002318 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <__NVIC_SetPriority>:
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	4603      	mov	r3, r0
 8002348:	6039      	str	r1, [r7, #0]
 800234a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800234c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002350:	2b00      	cmp	r3, #0
 8002352:	db0a      	blt.n	800236a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	b2da      	uxtb	r2, r3
 8002358:	490c      	ldr	r1, [pc, #48]	@ (800238c <__NVIC_SetPriority+0x4c>)
 800235a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235e:	0112      	lsls	r2, r2, #4
 8002360:	b2d2      	uxtb	r2, r2
 8002362:	440b      	add	r3, r1
 8002364:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002368:	e00a      	b.n	8002380 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	b2da      	uxtb	r2, r3
 800236e:	4908      	ldr	r1, [pc, #32]	@ (8002390 <__NVIC_SetPriority+0x50>)
 8002370:	79fb      	ldrb	r3, [r7, #7]
 8002372:	f003 030f 	and.w	r3, r3, #15
 8002376:	3b04      	subs	r3, #4
 8002378:	0112      	lsls	r2, r2, #4
 800237a:	b2d2      	uxtb	r2, r2
 800237c:	440b      	add	r3, r1
 800237e:	761a      	strb	r2, [r3, #24]
}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr
 800238c:	e000e100 	.word	0xe000e100
 8002390:	e000ed00 	.word	0xe000ed00

08002394 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002398:	4b05      	ldr	r3, [pc, #20]	@ (80023b0 <SysTick_Handler+0x1c>)
 800239a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800239c:	f002 f968 	bl	8004670 <xTaskGetSchedulerState>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d001      	beq.n	80023aa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80023a6:	f003 f85f 	bl	8005468 <xPortSysTickHandler>
  }
}
 80023aa:	bf00      	nop
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	e000e010 	.word	0xe000e010

080023b4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80023b8:	2100      	movs	r1, #0
 80023ba:	f06f 0004 	mvn.w	r0, #4
 80023be:	f7ff ffbf 	bl	8002340 <__NVIC_SetPriority>
#endif
}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}
	...

080023c8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80023ce:	f3ef 8305 	mrs	r3, IPSR
 80023d2:	603b      	str	r3, [r7, #0]
  return(result);
 80023d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80023da:	f06f 0305 	mvn.w	r3, #5
 80023de:	607b      	str	r3, [r7, #4]
 80023e0:	e00c      	b.n	80023fc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80023e2:	4b0a      	ldr	r3, [pc, #40]	@ (800240c <osKernelInitialize+0x44>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d105      	bne.n	80023f6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80023ea:	4b08      	ldr	r3, [pc, #32]	@ (800240c <osKernelInitialize+0x44>)
 80023ec:	2201      	movs	r2, #1
 80023ee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80023f0:	2300      	movs	r3, #0
 80023f2:	607b      	str	r3, [r7, #4]
 80023f4:	e002      	b.n	80023fc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80023f6:	f04f 33ff 	mov.w	r3, #4294967295
 80023fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80023fc:	687b      	ldr	r3, [r7, #4]
}
 80023fe:	4618      	mov	r0, r3
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	200000d8 	.word	0x200000d8

08002410 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002416:	f3ef 8305 	mrs	r3, IPSR
 800241a:	603b      	str	r3, [r7, #0]
  return(result);
 800241c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <osKernelStart+0x1a>
    stat = osErrorISR;
 8002422:	f06f 0305 	mvn.w	r3, #5
 8002426:	607b      	str	r3, [r7, #4]
 8002428:	e010      	b.n	800244c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800242a:	4b0b      	ldr	r3, [pc, #44]	@ (8002458 <osKernelStart+0x48>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d109      	bne.n	8002446 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002432:	f7ff ffbf 	bl	80023b4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002436:	4b08      	ldr	r3, [pc, #32]	@ (8002458 <osKernelStart+0x48>)
 8002438:	2202      	movs	r2, #2
 800243a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800243c:	f001 fcca 	bl	8003dd4 <vTaskStartScheduler>
      stat = osOK;
 8002440:	2300      	movs	r3, #0
 8002442:	607b      	str	r3, [r7, #4]
 8002444:	e002      	b.n	800244c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002446:	f04f 33ff 	mov.w	r3, #4294967295
 800244a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800244c:	687b      	ldr	r3, [r7, #4]
}
 800244e:	4618      	mov	r0, r3
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	200000d8 	.word	0x200000d8

0800245c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800245c:	b580      	push	{r7, lr}
 800245e:	b08e      	sub	sp, #56	@ 0x38
 8002460:	af04      	add	r7, sp, #16
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002468:	2300      	movs	r3, #0
 800246a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800246c:	f3ef 8305 	mrs	r3, IPSR
 8002470:	617b      	str	r3, [r7, #20]
  return(result);
 8002472:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002474:	2b00      	cmp	r3, #0
 8002476:	d17e      	bne.n	8002576 <osThreadNew+0x11a>
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d07b      	beq.n	8002576 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800247e:	2380      	movs	r3, #128	@ 0x80
 8002480:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002482:	2318      	movs	r3, #24
 8002484:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002486:	2300      	movs	r3, #0
 8002488:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800248a:	f04f 33ff 	mov.w	r3, #4294967295
 800248e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d045      	beq.n	8002522 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d002      	beq.n	80024a4 <osThreadNew+0x48>
        name = attr->name;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d002      	beq.n	80024b2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d008      	beq.n	80024ca <osThreadNew+0x6e>
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	2b38      	cmp	r3, #56	@ 0x38
 80024bc:	d805      	bhi.n	80024ca <osThreadNew+0x6e>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <osThreadNew+0x72>
        return (NULL);
 80024ca:	2300      	movs	r3, #0
 80024cc:	e054      	b.n	8002578 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	089b      	lsrs	r3, r3, #2
 80024dc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00e      	beq.n	8002504 <osThreadNew+0xa8>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	2b5b      	cmp	r3, #91	@ 0x5b
 80024ec:	d90a      	bls.n	8002504 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d006      	beq.n	8002504 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d002      	beq.n	8002504 <osThreadNew+0xa8>
        mem = 1;
 80024fe:	2301      	movs	r3, #1
 8002500:	61bb      	str	r3, [r7, #24]
 8002502:	e010      	b.n	8002526 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d10c      	bne.n	8002526 <osThreadNew+0xca>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d108      	bne.n	8002526 <osThreadNew+0xca>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d104      	bne.n	8002526 <osThreadNew+0xca>
          mem = 0;
 800251c:	2300      	movs	r3, #0
 800251e:	61bb      	str	r3, [r7, #24]
 8002520:	e001      	b.n	8002526 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002522:	2300      	movs	r3, #0
 8002524:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d110      	bne.n	800254e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002534:	9202      	str	r2, [sp, #8]
 8002536:	9301      	str	r3, [sp, #4]
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	9300      	str	r3, [sp, #0]
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	6a3a      	ldr	r2, [r7, #32]
 8002540:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f001 fa6a 	bl	8003a1c <xTaskCreateStatic>
 8002548:	4603      	mov	r3, r0
 800254a:	613b      	str	r3, [r7, #16]
 800254c:	e013      	b.n	8002576 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d110      	bne.n	8002576 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002554:	6a3b      	ldr	r3, [r7, #32]
 8002556:	b29a      	uxth	r2, r3
 8002558:	f107 0310 	add.w	r3, r7, #16
 800255c:	9301      	str	r3, [sp, #4]
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	9300      	str	r3, [sp, #0]
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002566:	68f8      	ldr	r0, [r7, #12]
 8002568:	f001 fab8 	bl	8003adc <xTaskCreate>
 800256c:	4603      	mov	r3, r0
 800256e:	2b01      	cmp	r3, #1
 8002570:	d001      	beq.n	8002576 <osThreadNew+0x11a>
            hTask = NULL;
 8002572:	2300      	movs	r3, #0
 8002574:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002576:	693b      	ldr	r3, [r7, #16]
}
 8002578:	4618      	mov	r0, r3
 800257a:	3728      	adds	r7, #40	@ 0x28
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002588:	f3ef 8305 	mrs	r3, IPSR
 800258c:	60bb      	str	r3, [r7, #8]
  return(result);
 800258e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002590:	2b00      	cmp	r3, #0
 8002592:	d003      	beq.n	800259c <osDelay+0x1c>
    stat = osErrorISR;
 8002594:	f06f 0305 	mvn.w	r3, #5
 8002598:	60fb      	str	r3, [r7, #12]
 800259a:	e007      	b.n	80025ac <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800259c:	2300      	movs	r3, #0
 800259e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d002      	beq.n	80025ac <osDelay+0x2c>
      vTaskDelay(ticks);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f001 fbde 	bl	8003d68 <vTaskDelay>
    }
  }

  return (stat);
 80025ac:	68fb      	ldr	r3, [r7, #12]
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b08a      	sub	sp, #40	@ 0x28
 80025ba:	af02      	add	r7, sp, #8
 80025bc:	60f8      	str	r0, [r7, #12]
 80025be:	60b9      	str	r1, [r7, #8]
 80025c0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80025c2:	2300      	movs	r3, #0
 80025c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025c6:	f3ef 8305 	mrs	r3, IPSR
 80025ca:	613b      	str	r3, [r7, #16]
  return(result);
 80025cc:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d175      	bne.n	80026be <osSemaphoreNew+0x108>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d072      	beq.n	80026be <osSemaphoreNew+0x108>
 80025d8:	68ba      	ldr	r2, [r7, #8]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d86e      	bhi.n	80026be <osSemaphoreNew+0x108>
    mem = -1;
 80025e0:	f04f 33ff 	mov.w	r3, #4294967295
 80025e4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d015      	beq.n	8002618 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d006      	beq.n	8002602 <osSemaphoreNew+0x4c>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	2b4f      	cmp	r3, #79	@ 0x4f
 80025fa:	d902      	bls.n	8002602 <osSemaphoreNew+0x4c>
        mem = 1;
 80025fc:	2301      	movs	r3, #1
 80025fe:	61bb      	str	r3, [r7, #24]
 8002600:	e00c      	b.n	800261c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d108      	bne.n	800261c <osSemaphoreNew+0x66>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d104      	bne.n	800261c <osSemaphoreNew+0x66>
          mem = 0;
 8002612:	2300      	movs	r3, #0
 8002614:	61bb      	str	r3, [r7, #24]
 8002616:	e001      	b.n	800261c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8002618:	2300      	movs	r3, #0
 800261a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002622:	d04c      	beq.n	80026be <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d128      	bne.n	800267c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d10a      	bne.n	8002646 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	2203      	movs	r2, #3
 8002636:	9200      	str	r2, [sp, #0]
 8002638:	2200      	movs	r2, #0
 800263a:	2100      	movs	r1, #0
 800263c:	2001      	movs	r0, #1
 800263e:	f000 fa2b 	bl	8002a98 <xQueueGenericCreateStatic>
 8002642:	61f8      	str	r0, [r7, #28]
 8002644:	e005      	b.n	8002652 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8002646:	2203      	movs	r2, #3
 8002648:	2100      	movs	r1, #0
 800264a:	2001      	movs	r0, #1
 800264c:	f000 faa1 	bl	8002b92 <xQueueGenericCreate>
 8002650:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d022      	beq.n	800269e <osSemaphoreNew+0xe8>
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d01f      	beq.n	800269e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800265e:	2300      	movs	r3, #0
 8002660:	2200      	movs	r2, #0
 8002662:	2100      	movs	r1, #0
 8002664:	69f8      	ldr	r0, [r7, #28]
 8002666:	f000 fb61 	bl	8002d2c <xQueueGenericSend>
 800266a:	4603      	mov	r3, r0
 800266c:	2b01      	cmp	r3, #1
 800266e:	d016      	beq.n	800269e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8002670:	69f8      	ldr	r0, [r7, #28]
 8002672:	f000 ffff 	bl	8003674 <vQueueDelete>
            hSemaphore = NULL;
 8002676:	2300      	movs	r3, #0
 8002678:	61fb      	str	r3, [r7, #28]
 800267a:	e010      	b.n	800269e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d108      	bne.n	8002694 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	461a      	mov	r2, r3
 8002688:	68b9      	ldr	r1, [r7, #8]
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f000 fadf 	bl	8002c4e <xQueueCreateCountingSemaphoreStatic>
 8002690:	61f8      	str	r0, [r7, #28]
 8002692:	e004      	b.n	800269e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8002694:	68b9      	ldr	r1, [r7, #8]
 8002696:	68f8      	ldr	r0, [r7, #12]
 8002698:	f000 fb12 	bl	8002cc0 <xQueueCreateCountingSemaphore>
 800269c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d00c      	beq.n	80026be <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <osSemaphoreNew+0xfc>
          name = attr->name;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	617b      	str	r3, [r7, #20]
 80026b0:	e001      	b.n	80026b6 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80026b2:	2300      	movs	r3, #0
 80026b4:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80026b6:	6979      	ldr	r1, [r7, #20]
 80026b8:	69f8      	ldr	r0, [r7, #28]
 80026ba:	f001 f927 	bl	800390c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80026be:	69fb      	ldr	r3, [r7, #28]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3720      	adds	r7, #32
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80026d6:	2300      	movs	r3, #0
 80026d8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d103      	bne.n	80026e8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80026e0:	f06f 0303 	mvn.w	r3, #3
 80026e4:	617b      	str	r3, [r7, #20]
 80026e6:	e039      	b.n	800275c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80026e8:	f3ef 8305 	mrs	r3, IPSR
 80026ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80026ee:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d022      	beq.n	800273a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d003      	beq.n	8002702 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80026fa:	f06f 0303 	mvn.w	r3, #3
 80026fe:	617b      	str	r3, [r7, #20]
 8002700:	e02c      	b.n	800275c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8002702:	2300      	movs	r3, #0
 8002704:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8002706:	f107 0308 	add.w	r3, r7, #8
 800270a:	461a      	mov	r2, r3
 800270c:	2100      	movs	r1, #0
 800270e:	6938      	ldr	r0, [r7, #16]
 8002710:	f000 ff2e 	bl	8003570 <xQueueReceiveFromISR>
 8002714:	4603      	mov	r3, r0
 8002716:	2b01      	cmp	r3, #1
 8002718:	d003      	beq.n	8002722 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800271a:	f06f 0302 	mvn.w	r3, #2
 800271e:	617b      	str	r3, [r7, #20]
 8002720:	e01c      	b.n	800275c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d019      	beq.n	800275c <osSemaphoreAcquire+0x94>
 8002728:	4b0f      	ldr	r3, [pc, #60]	@ (8002768 <osSemaphoreAcquire+0xa0>)
 800272a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	f3bf 8f4f 	dsb	sy
 8002734:	f3bf 8f6f 	isb	sy
 8002738:	e010      	b.n	800275c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800273a:	6839      	ldr	r1, [r7, #0]
 800273c:	6938      	ldr	r0, [r7, #16]
 800273e:	f000 fe07 	bl	8003350 <xQueueSemaphoreTake>
 8002742:	4603      	mov	r3, r0
 8002744:	2b01      	cmp	r3, #1
 8002746:	d009      	beq.n	800275c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d003      	beq.n	8002756 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800274e:	f06f 0301 	mvn.w	r3, #1
 8002752:	617b      	str	r3, [r7, #20]
 8002754:	e002      	b.n	800275c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8002756:	f06f 0302 	mvn.w	r3, #2
 800275a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800275c:	697b      	ldr	r3, [r7, #20]
}
 800275e:	4618      	mov	r0, r3
 8002760:	3718      	adds	r7, #24
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	e000ed04 	.word	0xe000ed04

0800276c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8002778:	2300      	movs	r3, #0
 800277a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d103      	bne.n	800278a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8002782:	f06f 0303 	mvn.w	r3, #3
 8002786:	617b      	str	r3, [r7, #20]
 8002788:	e02c      	b.n	80027e4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800278a:	f3ef 8305 	mrs	r3, IPSR
 800278e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002790:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8002792:	2b00      	cmp	r3, #0
 8002794:	d01a      	beq.n	80027cc <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8002796:	2300      	movs	r3, #0
 8002798:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800279a:	f107 0308 	add.w	r3, r7, #8
 800279e:	4619      	mov	r1, r3
 80027a0:	6938      	ldr	r0, [r7, #16]
 80027a2:	f000 fc63 	bl	800306c <xQueueGiveFromISR>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d003      	beq.n	80027b4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80027ac:	f06f 0302 	mvn.w	r3, #2
 80027b0:	617b      	str	r3, [r7, #20]
 80027b2:	e017      	b.n	80027e4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d014      	beq.n	80027e4 <osSemaphoreRelease+0x78>
 80027ba:	4b0d      	ldr	r3, [pc, #52]	@ (80027f0 <osSemaphoreRelease+0x84>)
 80027bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80027c0:	601a      	str	r2, [r3, #0]
 80027c2:	f3bf 8f4f 	dsb	sy
 80027c6:	f3bf 8f6f 	isb	sy
 80027ca:	e00b      	b.n	80027e4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80027cc:	2300      	movs	r3, #0
 80027ce:	2200      	movs	r2, #0
 80027d0:	2100      	movs	r1, #0
 80027d2:	6938      	ldr	r0, [r7, #16]
 80027d4:	f000 faaa 	bl	8002d2c <xQueueGenericSend>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d002      	beq.n	80027e4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80027de:	f06f 0302 	mvn.w	r3, #2
 80027e2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80027e4:	697b      	ldr	r3, [r7, #20]
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3718      	adds	r7, #24
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	e000ed04 	.word	0xe000ed04

080027f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	4a07      	ldr	r2, [pc, #28]	@ (8002820 <vApplicationGetIdleTaskMemory+0x2c>)
 8002804:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	4a06      	ldr	r2, [pc, #24]	@ (8002824 <vApplicationGetIdleTaskMemory+0x30>)
 800280a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2280      	movs	r2, #128	@ 0x80
 8002810:	601a      	str	r2, [r3, #0]
}
 8002812:	bf00      	nop
 8002814:	3714      	adds	r7, #20
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	200000dc 	.word	0x200000dc
 8002824:	20000138 	.word	0x20000138

08002828 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	4a07      	ldr	r2, [pc, #28]	@ (8002854 <vApplicationGetTimerTaskMemory+0x2c>)
 8002838:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	4a06      	ldr	r2, [pc, #24]	@ (8002858 <vApplicationGetTimerTaskMemory+0x30>)
 800283e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002846:	601a      	str	r2, [r3, #0]
}
 8002848:	bf00      	nop
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	20000338 	.word	0x20000338
 8002858:	20000394 	.word	0x20000394

0800285c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f103 0208 	add.w	r2, r3, #8
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f04f 32ff 	mov.w	r2, #4294967295
 8002874:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f103 0208 	add.w	r2, r3, #8
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f103 0208 	add.w	r2, r3, #8
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr

080028b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80028b6:	b480      	push	{r7}
 80028b8:	b085      	sub	sp, #20
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
 80028be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	689a      	ldr	r2, [r3, #8]
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	1c5a      	adds	r2, r3, #1
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	601a      	str	r2, [r3, #0]
}
 80028f2:	bf00      	nop
 80028f4:	3714      	adds	r7, #20
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80028fe:	b480      	push	{r7}
 8002900:	b085      	sub	sp, #20
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
 8002906:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002914:	d103      	bne.n	800291e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	60fb      	str	r3, [r7, #12]
 800291c:	e00c      	b.n	8002938 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	3308      	adds	r3, #8
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	e002      	b.n	800292c <vListInsert+0x2e>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	60fb      	str	r3, [r7, #12]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68ba      	ldr	r2, [r7, #8]
 8002934:	429a      	cmp	r2, r3
 8002936:	d2f6      	bcs.n	8002926 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	685a      	ldr	r2, [r3, #4]
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	1c5a      	adds	r2, r3, #1
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	601a      	str	r2, [r3, #0]
}
 8002964:	bf00      	nop
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	6892      	ldr	r2, [r2, #8]
 8002986:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	6852      	ldr	r2, [r2, #4]
 8002990:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	429a      	cmp	r2, r3
 800299a:	d103      	bne.n	80029a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689a      	ldr	r2, [r3, #8]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	1e5a      	subs	r2, r3, #1
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d10b      	bne.n	80029f0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80029d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029dc:	f383 8811 	msr	BASEPRI, r3
 80029e0:	f3bf 8f6f 	isb	sy
 80029e4:	f3bf 8f4f 	dsb	sy
 80029e8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80029ea:	bf00      	nop
 80029ec:	bf00      	nop
 80029ee:	e7fd      	b.n	80029ec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80029f0:	f002 fcaa 	bl	8005348 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029fc:	68f9      	ldr	r1, [r7, #12]
 80029fe:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002a00:	fb01 f303 	mul.w	r3, r1, r3
 8002a04:	441a      	add	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a20:	3b01      	subs	r3, #1
 8002a22:	68f9      	ldr	r1, [r7, #12]
 8002a24:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002a26:	fb01 f303 	mul.w	r3, r1, r3
 8002a2a:	441a      	add	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	22ff      	movs	r2, #255	@ 0xff
 8002a34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	22ff      	movs	r2, #255	@ 0xff
 8002a3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d114      	bne.n	8002a70 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d01a      	beq.n	8002a84 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	3310      	adds	r3, #16
 8002a52:	4618      	mov	r0, r3
 8002a54:	f001 fc4c 	bl	80042f0 <xTaskRemoveFromEventList>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d012      	beq.n	8002a84 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8002a94 <xQueueGenericReset+0xd0>)
 8002a60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a64:	601a      	str	r2, [r3, #0]
 8002a66:	f3bf 8f4f 	dsb	sy
 8002a6a:	f3bf 8f6f 	isb	sy
 8002a6e:	e009      	b.n	8002a84 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	3310      	adds	r3, #16
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7ff fef1 	bl	800285c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	3324      	adds	r3, #36	@ 0x24
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7ff feec 	bl	800285c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002a84:	f002 fc92 	bl	80053ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002a88:	2301      	movs	r3, #1
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	e000ed04 	.word	0xe000ed04

08002a98 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b08e      	sub	sp, #56	@ 0x38
 8002a9c:	af02      	add	r7, sp, #8
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
 8002aa4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d10b      	bne.n	8002ac4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002aac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ab0:	f383 8811 	msr	BASEPRI, r3
 8002ab4:	f3bf 8f6f 	isb	sy
 8002ab8:	f3bf 8f4f 	dsb	sy
 8002abc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002abe:	bf00      	nop
 8002ac0:	bf00      	nop
 8002ac2:	e7fd      	b.n	8002ac0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d10b      	bne.n	8002ae2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002aca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ace:	f383 8811 	msr	BASEPRI, r3
 8002ad2:	f3bf 8f6f 	isb	sy
 8002ad6:	f3bf 8f4f 	dsb	sy
 8002ada:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002adc:	bf00      	nop
 8002ade:	bf00      	nop
 8002ae0:	e7fd      	b.n	8002ade <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d002      	beq.n	8002aee <xQueueGenericCreateStatic+0x56>
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <xQueueGenericCreateStatic+0x5a>
 8002aee:	2301      	movs	r3, #1
 8002af0:	e000      	b.n	8002af4 <xQueueGenericCreateStatic+0x5c>
 8002af2:	2300      	movs	r3, #0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d10b      	bne.n	8002b10 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002af8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002afc:	f383 8811 	msr	BASEPRI, r3
 8002b00:	f3bf 8f6f 	isb	sy
 8002b04:	f3bf 8f4f 	dsb	sy
 8002b08:	623b      	str	r3, [r7, #32]
}
 8002b0a:	bf00      	nop
 8002b0c:	bf00      	nop
 8002b0e:	e7fd      	b.n	8002b0c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d102      	bne.n	8002b1c <xQueueGenericCreateStatic+0x84>
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d101      	bne.n	8002b20 <xQueueGenericCreateStatic+0x88>
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e000      	b.n	8002b22 <xQueueGenericCreateStatic+0x8a>
 8002b20:	2300      	movs	r3, #0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10b      	bne.n	8002b3e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b2a:	f383 8811 	msr	BASEPRI, r3
 8002b2e:	f3bf 8f6f 	isb	sy
 8002b32:	f3bf 8f4f 	dsb	sy
 8002b36:	61fb      	str	r3, [r7, #28]
}
 8002b38:	bf00      	nop
 8002b3a:	bf00      	nop
 8002b3c:	e7fd      	b.n	8002b3a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002b3e:	2350      	movs	r3, #80	@ 0x50
 8002b40:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	2b50      	cmp	r3, #80	@ 0x50
 8002b46:	d00b      	beq.n	8002b60 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b4c:	f383 8811 	msr	BASEPRI, r3
 8002b50:	f3bf 8f6f 	isb	sy
 8002b54:	f3bf 8f4f 	dsb	sy
 8002b58:	61bb      	str	r3, [r7, #24]
}
 8002b5a:	bf00      	nop
 8002b5c:	bf00      	nop
 8002b5e:	e7fd      	b.n	8002b5c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002b60:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d00d      	beq.n	8002b88 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b74:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	68b9      	ldr	r1, [r7, #8]
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f000 f840 	bl	8002c08 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3730      	adds	r7, #48	@ 0x30
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b08a      	sub	sp, #40	@ 0x28
 8002b96:	af02      	add	r7, sp, #8
 8002b98:	60f8      	str	r0, [r7, #12]
 8002b9a:	60b9      	str	r1, [r7, #8]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d10b      	bne.n	8002bbe <xQueueGenericCreate+0x2c>
	__asm volatile
 8002ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002baa:	f383 8811 	msr	BASEPRI, r3
 8002bae:	f3bf 8f6f 	isb	sy
 8002bb2:	f3bf 8f4f 	dsb	sy
 8002bb6:	613b      	str	r3, [r7, #16]
}
 8002bb8:	bf00      	nop
 8002bba:	bf00      	nop
 8002bbc:	e7fd      	b.n	8002bba <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	68ba      	ldr	r2, [r7, #8]
 8002bc2:	fb02 f303 	mul.w	r3, r2, r3
 8002bc6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	3350      	adds	r3, #80	@ 0x50
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f002 fcdd 	bl	800558c <pvPortMalloc>
 8002bd2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d011      	beq.n	8002bfe <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	3350      	adds	r3, #80	@ 0x50
 8002be2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002bec:	79fa      	ldrb	r2, [r7, #7]
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	9300      	str	r3, [sp, #0]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	697a      	ldr	r2, [r7, #20]
 8002bf6:	68b9      	ldr	r1, [r7, #8]
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f000 f805 	bl	8002c08 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002bfe:	69bb      	ldr	r3, [r7, #24]
	}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3720      	adds	r7, #32
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
 8002c14:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d103      	bne.n	8002c24 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	601a      	str	r2, [r3, #0]
 8002c22:	e002      	b.n	8002c2a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	68ba      	ldr	r2, [r7, #8]
 8002c34:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002c36:	2101      	movs	r1, #1
 8002c38:	69b8      	ldr	r0, [r7, #24]
 8002c3a:	f7ff fec3 	bl	80029c4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	78fa      	ldrb	r2, [r7, #3]
 8002c42:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002c46:	bf00      	nop
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b08a      	sub	sp, #40	@ 0x28
 8002c52:	af02      	add	r7, sp, #8
 8002c54:	60f8      	str	r0, [r7, #12]
 8002c56:	60b9      	str	r1, [r7, #8]
 8002c58:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d10b      	bne.n	8002c78 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8002c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c64:	f383 8811 	msr	BASEPRI, r3
 8002c68:	f3bf 8f6f 	isb	sy
 8002c6c:	f3bf 8f4f 	dsb	sy
 8002c70:	61bb      	str	r3, [r7, #24]
}
 8002c72:	bf00      	nop
 8002c74:	bf00      	nop
 8002c76:	e7fd      	b.n	8002c74 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002c78:	68ba      	ldr	r2, [r7, #8]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d90b      	bls.n	8002c98 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8002c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c84:	f383 8811 	msr	BASEPRI, r3
 8002c88:	f3bf 8f6f 	isb	sy
 8002c8c:	f3bf 8f4f 	dsb	sy
 8002c90:	617b      	str	r3, [r7, #20]
}
 8002c92:	bf00      	nop
 8002c94:	bf00      	nop
 8002c96:	e7fd      	b.n	8002c94 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002c98:	2302      	movs	r3, #2
 8002c9a:	9300      	str	r3, [sp, #0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	f7ff fef8 	bl	8002a98 <xQueueGenericCreateStatic>
 8002ca8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d002      	beq.n	8002cb6 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	68ba      	ldr	r2, [r7, #8]
 8002cb4:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002cb6:	69fb      	ldr	r3, [r7, #28]
	}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3720      	adds	r7, #32
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d10b      	bne.n	8002ce8 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8002cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cd4:	f383 8811 	msr	BASEPRI, r3
 8002cd8:	f3bf 8f6f 	isb	sy
 8002cdc:	f3bf 8f4f 	dsb	sy
 8002ce0:	613b      	str	r3, [r7, #16]
}
 8002ce2:	bf00      	nop
 8002ce4:	bf00      	nop
 8002ce6:	e7fd      	b.n	8002ce4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d90b      	bls.n	8002d08 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8002cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cf4:	f383 8811 	msr	BASEPRI, r3
 8002cf8:	f3bf 8f6f 	isb	sy
 8002cfc:	f3bf 8f4f 	dsb	sy
 8002d00:	60fb      	str	r3, [r7, #12]
}
 8002d02:	bf00      	nop
 8002d04:	bf00      	nop
 8002d06:	e7fd      	b.n	8002d04 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002d08:	2202      	movs	r2, #2
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f7ff ff40 	bl	8002b92 <xQueueGenericCreate>
 8002d12:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d002      	beq.n	8002d20 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002d20:	697b      	ldr	r3, [r7, #20]
	}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3718      	adds	r7, #24
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
	...

08002d2c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b08e      	sub	sp, #56	@ 0x38
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
 8002d38:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d10b      	bne.n	8002d60 <xQueueGenericSend+0x34>
	__asm volatile
 8002d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d4c:	f383 8811 	msr	BASEPRI, r3
 8002d50:	f3bf 8f6f 	isb	sy
 8002d54:	f3bf 8f4f 	dsb	sy
 8002d58:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002d5a:	bf00      	nop
 8002d5c:	bf00      	nop
 8002d5e:	e7fd      	b.n	8002d5c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d103      	bne.n	8002d6e <xQueueGenericSend+0x42>
 8002d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <xQueueGenericSend+0x46>
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e000      	b.n	8002d74 <xQueueGenericSend+0x48>
 8002d72:	2300      	movs	r3, #0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d10b      	bne.n	8002d90 <xQueueGenericSend+0x64>
	__asm volatile
 8002d78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d7c:	f383 8811 	msr	BASEPRI, r3
 8002d80:	f3bf 8f6f 	isb	sy
 8002d84:	f3bf 8f4f 	dsb	sy
 8002d88:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002d8a:	bf00      	nop
 8002d8c:	bf00      	nop
 8002d8e:	e7fd      	b.n	8002d8c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d103      	bne.n	8002d9e <xQueueGenericSend+0x72>
 8002d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d101      	bne.n	8002da2 <xQueueGenericSend+0x76>
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e000      	b.n	8002da4 <xQueueGenericSend+0x78>
 8002da2:	2300      	movs	r3, #0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d10b      	bne.n	8002dc0 <xQueueGenericSend+0x94>
	__asm volatile
 8002da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dac:	f383 8811 	msr	BASEPRI, r3
 8002db0:	f3bf 8f6f 	isb	sy
 8002db4:	f3bf 8f4f 	dsb	sy
 8002db8:	623b      	str	r3, [r7, #32]
}
 8002dba:	bf00      	nop
 8002dbc:	bf00      	nop
 8002dbe:	e7fd      	b.n	8002dbc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002dc0:	f001 fc56 	bl	8004670 <xTaskGetSchedulerState>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d102      	bne.n	8002dd0 <xQueueGenericSend+0xa4>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d101      	bne.n	8002dd4 <xQueueGenericSend+0xa8>
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e000      	b.n	8002dd6 <xQueueGenericSend+0xaa>
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10b      	bne.n	8002df2 <xQueueGenericSend+0xc6>
	__asm volatile
 8002dda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dde:	f383 8811 	msr	BASEPRI, r3
 8002de2:	f3bf 8f6f 	isb	sy
 8002de6:	f3bf 8f4f 	dsb	sy
 8002dea:	61fb      	str	r3, [r7, #28]
}
 8002dec:	bf00      	nop
 8002dee:	bf00      	nop
 8002df0:	e7fd      	b.n	8002dee <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002df2:	f002 faa9 	bl	8005348 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002df8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d302      	bcc.n	8002e08 <xQueueGenericSend+0xdc>
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d129      	bne.n	8002e5c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	68b9      	ldr	r1, [r7, #8]
 8002e0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002e0e:	f000 fc6d 	bl	80036ec <prvCopyDataToQueue>
 8002e12:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d010      	beq.n	8002e3e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e1e:	3324      	adds	r3, #36	@ 0x24
 8002e20:	4618      	mov	r0, r3
 8002e22:	f001 fa65 	bl	80042f0 <xTaskRemoveFromEventList>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d013      	beq.n	8002e54 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002e2c:	4b3f      	ldr	r3, [pc, #252]	@ (8002f2c <xQueueGenericSend+0x200>)
 8002e2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	f3bf 8f4f 	dsb	sy
 8002e38:	f3bf 8f6f 	isb	sy
 8002e3c:	e00a      	b.n	8002e54 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d007      	beq.n	8002e54 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002e44:	4b39      	ldr	r3, [pc, #228]	@ (8002f2c <xQueueGenericSend+0x200>)
 8002e46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e4a:	601a      	str	r2, [r3, #0]
 8002e4c:	f3bf 8f4f 	dsb	sy
 8002e50:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002e54:	f002 faaa 	bl	80053ac <vPortExitCritical>
				return pdPASS;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e063      	b.n	8002f24 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d103      	bne.n	8002e6a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e62:	f002 faa3 	bl	80053ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002e66:	2300      	movs	r3, #0
 8002e68:	e05c      	b.n	8002f24 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d106      	bne.n	8002e7e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e70:	f107 0314 	add.w	r3, r7, #20
 8002e74:	4618      	mov	r0, r3
 8002e76:	f001 fa9f 	bl	80043b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e7e:	f002 fa95 	bl	80053ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e82:	f001 f80f 	bl	8003ea4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e86:	f002 fa5f 	bl	8005348 <vPortEnterCritical>
 8002e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e8c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002e90:	b25b      	sxtb	r3, r3
 8002e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e96:	d103      	bne.n	8002ea0 <xQueueGenericSend+0x174>
 8002e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ea2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002ea6:	b25b      	sxtb	r3, r3
 8002ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eac:	d103      	bne.n	8002eb6 <xQueueGenericSend+0x18a>
 8002eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002eb6:	f002 fa79 	bl	80053ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002eba:	1d3a      	adds	r2, r7, #4
 8002ebc:	f107 0314 	add.w	r3, r7, #20
 8002ec0:	4611      	mov	r1, r2
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f001 fa8e 	bl	80043e4 <xTaskCheckForTimeOut>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d124      	bne.n	8002f18 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002ece:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ed0:	f000 fd04 	bl	80038dc <prvIsQueueFull>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d018      	beq.n	8002f0c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002edc:	3310      	adds	r3, #16
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	4611      	mov	r1, r2
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f001 f9b2 	bl	800424c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002ee8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002eea:	f000 fc8f 	bl	800380c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002eee:	f000 ffe7 	bl	8003ec0 <xTaskResumeAll>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f47f af7c 	bne.w	8002df2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002efa:	4b0c      	ldr	r3, [pc, #48]	@ (8002f2c <xQueueGenericSend+0x200>)
 8002efc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f00:	601a      	str	r2, [r3, #0]
 8002f02:	f3bf 8f4f 	dsb	sy
 8002f06:	f3bf 8f6f 	isb	sy
 8002f0a:	e772      	b.n	8002df2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002f0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002f0e:	f000 fc7d 	bl	800380c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f12:	f000 ffd5 	bl	8003ec0 <xTaskResumeAll>
 8002f16:	e76c      	b.n	8002df2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002f18:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002f1a:	f000 fc77 	bl	800380c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f1e:	f000 ffcf 	bl	8003ec0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002f22:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3738      	adds	r7, #56	@ 0x38
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	e000ed04 	.word	0xe000ed04

08002f30 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b090      	sub	sp, #64	@ 0x40
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
 8002f3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002f42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d10b      	bne.n	8002f60 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f4c:	f383 8811 	msr	BASEPRI, r3
 8002f50:	f3bf 8f6f 	isb	sy
 8002f54:	f3bf 8f4f 	dsb	sy
 8002f58:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002f5a:	bf00      	nop
 8002f5c:	bf00      	nop
 8002f5e:	e7fd      	b.n	8002f5c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d103      	bne.n	8002f6e <xQueueGenericSendFromISR+0x3e>
 8002f66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <xQueueGenericSendFromISR+0x42>
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e000      	b.n	8002f74 <xQueueGenericSendFromISR+0x44>
 8002f72:	2300      	movs	r3, #0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d10b      	bne.n	8002f90 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f7c:	f383 8811 	msr	BASEPRI, r3
 8002f80:	f3bf 8f6f 	isb	sy
 8002f84:	f3bf 8f4f 	dsb	sy
 8002f88:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002f8a:	bf00      	nop
 8002f8c:	bf00      	nop
 8002f8e:	e7fd      	b.n	8002f8c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d103      	bne.n	8002f9e <xQueueGenericSendFromISR+0x6e>
 8002f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d101      	bne.n	8002fa2 <xQueueGenericSendFromISR+0x72>
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e000      	b.n	8002fa4 <xQueueGenericSendFromISR+0x74>
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d10b      	bne.n	8002fc0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002fa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fac:	f383 8811 	msr	BASEPRI, r3
 8002fb0:	f3bf 8f6f 	isb	sy
 8002fb4:	f3bf 8f4f 	dsb	sy
 8002fb8:	623b      	str	r3, [r7, #32]
}
 8002fba:	bf00      	nop
 8002fbc:	bf00      	nop
 8002fbe:	e7fd      	b.n	8002fbc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002fc0:	f002 faa2 	bl	8005508 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002fc4:	f3ef 8211 	mrs	r2, BASEPRI
 8002fc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fcc:	f383 8811 	msr	BASEPRI, r3
 8002fd0:	f3bf 8f6f 	isb	sy
 8002fd4:	f3bf 8f4f 	dsb	sy
 8002fd8:	61fa      	str	r2, [r7, #28]
 8002fda:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002fdc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002fde:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fe2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d302      	bcc.n	8002ff2 <xQueueGenericSendFromISR+0xc2>
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d12f      	bne.n	8003052 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ff4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002ff8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003000:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003002:	683a      	ldr	r2, [r7, #0]
 8003004:	68b9      	ldr	r1, [r7, #8]
 8003006:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003008:	f000 fb70 	bl	80036ec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800300c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003014:	d112      	bne.n	800303c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800301a:	2b00      	cmp	r3, #0
 800301c:	d016      	beq.n	800304c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800301e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003020:	3324      	adds	r3, #36	@ 0x24
 8003022:	4618      	mov	r0, r3
 8003024:	f001 f964 	bl	80042f0 <xTaskRemoveFromEventList>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00e      	beq.n	800304c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00b      	beq.n	800304c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	601a      	str	r2, [r3, #0]
 800303a:	e007      	b.n	800304c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800303c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003040:	3301      	adds	r3, #1
 8003042:	b2db      	uxtb	r3, r3
 8003044:	b25a      	sxtb	r2, r3
 8003046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003048:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800304c:	2301      	movs	r3, #1
 800304e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003050:	e001      	b.n	8003056 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003052:	2300      	movs	r3, #0
 8003054:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003056:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003058:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003060:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003062:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003064:	4618      	mov	r0, r3
 8003066:	3740      	adds	r7, #64	@ 0x40
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b08e      	sub	sp, #56	@ 0x38
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800307a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800307c:	2b00      	cmp	r3, #0
 800307e:	d10b      	bne.n	8003098 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8003080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003084:	f383 8811 	msr	BASEPRI, r3
 8003088:	f3bf 8f6f 	isb	sy
 800308c:	f3bf 8f4f 	dsb	sy
 8003090:	623b      	str	r3, [r7, #32]
}
 8003092:	bf00      	nop
 8003094:	bf00      	nop
 8003096:	e7fd      	b.n	8003094 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800309a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00b      	beq.n	80030b8 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80030a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030a4:	f383 8811 	msr	BASEPRI, r3
 80030a8:	f3bf 8f6f 	isb	sy
 80030ac:	f3bf 8f4f 	dsb	sy
 80030b0:	61fb      	str	r3, [r7, #28]
}
 80030b2:	bf00      	nop
 80030b4:	bf00      	nop
 80030b6:	e7fd      	b.n	80030b4 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80030b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d103      	bne.n	80030c8 <xQueueGiveFromISR+0x5c>
 80030c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <xQueueGiveFromISR+0x60>
 80030c8:	2301      	movs	r3, #1
 80030ca:	e000      	b.n	80030ce <xQueueGiveFromISR+0x62>
 80030cc:	2300      	movs	r3, #0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d10b      	bne.n	80030ea <xQueueGiveFromISR+0x7e>
	__asm volatile
 80030d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030d6:	f383 8811 	msr	BASEPRI, r3
 80030da:	f3bf 8f6f 	isb	sy
 80030de:	f3bf 8f4f 	dsb	sy
 80030e2:	61bb      	str	r3, [r7, #24]
}
 80030e4:	bf00      	nop
 80030e6:	bf00      	nop
 80030e8:	e7fd      	b.n	80030e6 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80030ea:	f002 fa0d 	bl	8005508 <vPortValidateInterruptPriority>
	__asm volatile
 80030ee:	f3ef 8211 	mrs	r2, BASEPRI
 80030f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030f6:	f383 8811 	msr	BASEPRI, r3
 80030fa:	f3bf 8f6f 	isb	sy
 80030fe:	f3bf 8f4f 	dsb	sy
 8003102:	617a      	str	r2, [r7, #20]
 8003104:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8003106:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003108:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800310a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800310c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800310e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003114:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003116:	429a      	cmp	r2, r3
 8003118:	d22b      	bcs.n	8003172 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800311a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800311c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003120:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003126:	1c5a      	adds	r2, r3, #1
 8003128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800312a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800312c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003134:	d112      	bne.n	800315c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800313a:	2b00      	cmp	r3, #0
 800313c:	d016      	beq.n	800316c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800313e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003140:	3324      	adds	r3, #36	@ 0x24
 8003142:	4618      	mov	r0, r3
 8003144:	f001 f8d4 	bl	80042f0 <xTaskRemoveFromEventList>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00e      	beq.n	800316c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00b      	beq.n	800316c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	2201      	movs	r2, #1
 8003158:	601a      	str	r2, [r3, #0]
 800315a:	e007      	b.n	800316c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800315c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003160:	3301      	adds	r3, #1
 8003162:	b2db      	uxtb	r3, r3
 8003164:	b25a      	sxtb	r2, r3
 8003166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003168:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800316c:	2301      	movs	r3, #1
 800316e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003170:	e001      	b.n	8003176 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003172:	2300      	movs	r3, #0
 8003174:	637b      	str	r3, [r7, #52]	@ 0x34
 8003176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003178:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f383 8811 	msr	BASEPRI, r3
}
 8003180:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003182:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003184:	4618      	mov	r0, r3
 8003186:	3738      	adds	r7, #56	@ 0x38
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b08c      	sub	sp, #48	@ 0x30
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003198:	2300      	movs	r3, #0
 800319a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80031a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10b      	bne.n	80031be <xQueueReceive+0x32>
	__asm volatile
 80031a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031aa:	f383 8811 	msr	BASEPRI, r3
 80031ae:	f3bf 8f6f 	isb	sy
 80031b2:	f3bf 8f4f 	dsb	sy
 80031b6:	623b      	str	r3, [r7, #32]
}
 80031b8:	bf00      	nop
 80031ba:	bf00      	nop
 80031bc:	e7fd      	b.n	80031ba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d103      	bne.n	80031cc <xQueueReceive+0x40>
 80031c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d101      	bne.n	80031d0 <xQueueReceive+0x44>
 80031cc:	2301      	movs	r3, #1
 80031ce:	e000      	b.n	80031d2 <xQueueReceive+0x46>
 80031d0:	2300      	movs	r3, #0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10b      	bne.n	80031ee <xQueueReceive+0x62>
	__asm volatile
 80031d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031da:	f383 8811 	msr	BASEPRI, r3
 80031de:	f3bf 8f6f 	isb	sy
 80031e2:	f3bf 8f4f 	dsb	sy
 80031e6:	61fb      	str	r3, [r7, #28]
}
 80031e8:	bf00      	nop
 80031ea:	bf00      	nop
 80031ec:	e7fd      	b.n	80031ea <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80031ee:	f001 fa3f 	bl	8004670 <xTaskGetSchedulerState>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d102      	bne.n	80031fe <xQueueReceive+0x72>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <xQueueReceive+0x76>
 80031fe:	2301      	movs	r3, #1
 8003200:	e000      	b.n	8003204 <xQueueReceive+0x78>
 8003202:	2300      	movs	r3, #0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d10b      	bne.n	8003220 <xQueueReceive+0x94>
	__asm volatile
 8003208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800320c:	f383 8811 	msr	BASEPRI, r3
 8003210:	f3bf 8f6f 	isb	sy
 8003214:	f3bf 8f4f 	dsb	sy
 8003218:	61bb      	str	r3, [r7, #24]
}
 800321a:	bf00      	nop
 800321c:	bf00      	nop
 800321e:	e7fd      	b.n	800321c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003220:	f002 f892 	bl	8005348 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003228:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800322a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800322c:	2b00      	cmp	r3, #0
 800322e:	d01f      	beq.n	8003270 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003230:	68b9      	ldr	r1, [r7, #8]
 8003232:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003234:	f000 fac4 	bl	80037c0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800323a:	1e5a      	subs	r2, r3, #1
 800323c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800323e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d00f      	beq.n	8003268 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800324a:	3310      	adds	r3, #16
 800324c:	4618      	mov	r0, r3
 800324e:	f001 f84f 	bl	80042f0 <xTaskRemoveFromEventList>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d007      	beq.n	8003268 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003258:	4b3c      	ldr	r3, [pc, #240]	@ (800334c <xQueueReceive+0x1c0>)
 800325a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800325e:	601a      	str	r2, [r3, #0]
 8003260:	f3bf 8f4f 	dsb	sy
 8003264:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003268:	f002 f8a0 	bl	80053ac <vPortExitCritical>
				return pdPASS;
 800326c:	2301      	movs	r3, #1
 800326e:	e069      	b.n	8003344 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d103      	bne.n	800327e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003276:	f002 f899 	bl	80053ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800327a:	2300      	movs	r3, #0
 800327c:	e062      	b.n	8003344 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800327e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003280:	2b00      	cmp	r3, #0
 8003282:	d106      	bne.n	8003292 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003284:	f107 0310 	add.w	r3, r7, #16
 8003288:	4618      	mov	r0, r3
 800328a:	f001 f895 	bl	80043b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800328e:	2301      	movs	r3, #1
 8003290:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003292:	f002 f88b 	bl	80053ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003296:	f000 fe05 	bl	8003ea4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800329a:	f002 f855 	bl	8005348 <vPortEnterCritical>
 800329e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80032a4:	b25b      	sxtb	r3, r3
 80032a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032aa:	d103      	bne.n	80032b4 <xQueueReceive+0x128>
 80032ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80032ba:	b25b      	sxtb	r3, r3
 80032bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c0:	d103      	bne.n	80032ca <xQueueReceive+0x13e>
 80032c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80032ca:	f002 f86f 	bl	80053ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80032ce:	1d3a      	adds	r2, r7, #4
 80032d0:	f107 0310 	add.w	r3, r7, #16
 80032d4:	4611      	mov	r1, r2
 80032d6:	4618      	mov	r0, r3
 80032d8:	f001 f884 	bl	80043e4 <xTaskCheckForTimeOut>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d123      	bne.n	800332a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80032e4:	f000 fae4 	bl	80038b0 <prvIsQueueEmpty>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d017      	beq.n	800331e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80032ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032f0:	3324      	adds	r3, #36	@ 0x24
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	4611      	mov	r1, r2
 80032f6:	4618      	mov	r0, r3
 80032f8:	f000 ffa8 	bl	800424c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80032fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80032fe:	f000 fa85 	bl	800380c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003302:	f000 fddd 	bl	8003ec0 <xTaskResumeAll>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d189      	bne.n	8003220 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800330c:	4b0f      	ldr	r3, [pc, #60]	@ (800334c <xQueueReceive+0x1c0>)
 800330e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003312:	601a      	str	r2, [r3, #0]
 8003314:	f3bf 8f4f 	dsb	sy
 8003318:	f3bf 8f6f 	isb	sy
 800331c:	e780      	b.n	8003220 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800331e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003320:	f000 fa74 	bl	800380c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003324:	f000 fdcc 	bl	8003ec0 <xTaskResumeAll>
 8003328:	e77a      	b.n	8003220 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800332a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800332c:	f000 fa6e 	bl	800380c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003330:	f000 fdc6 	bl	8003ec0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003334:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003336:	f000 fabb 	bl	80038b0 <prvIsQueueEmpty>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	f43f af6f 	beq.w	8003220 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003342:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003344:	4618      	mov	r0, r3
 8003346:	3730      	adds	r7, #48	@ 0x30
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	e000ed04 	.word	0xe000ed04

08003350 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b08e      	sub	sp, #56	@ 0x38
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800335a:	2300      	movs	r3, #0
 800335c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003362:	2300      	movs	r3, #0
 8003364:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003368:	2b00      	cmp	r3, #0
 800336a:	d10b      	bne.n	8003384 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800336c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003370:	f383 8811 	msr	BASEPRI, r3
 8003374:	f3bf 8f6f 	isb	sy
 8003378:	f3bf 8f4f 	dsb	sy
 800337c:	623b      	str	r3, [r7, #32]
}
 800337e:	bf00      	nop
 8003380:	bf00      	nop
 8003382:	e7fd      	b.n	8003380 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00b      	beq.n	80033a4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800338c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003390:	f383 8811 	msr	BASEPRI, r3
 8003394:	f3bf 8f6f 	isb	sy
 8003398:	f3bf 8f4f 	dsb	sy
 800339c:	61fb      	str	r3, [r7, #28]
}
 800339e:	bf00      	nop
 80033a0:	bf00      	nop
 80033a2:	e7fd      	b.n	80033a0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80033a4:	f001 f964 	bl	8004670 <xTaskGetSchedulerState>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d102      	bne.n	80033b4 <xQueueSemaphoreTake+0x64>
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d101      	bne.n	80033b8 <xQueueSemaphoreTake+0x68>
 80033b4:	2301      	movs	r3, #1
 80033b6:	e000      	b.n	80033ba <xQueueSemaphoreTake+0x6a>
 80033b8:	2300      	movs	r3, #0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10b      	bne.n	80033d6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80033be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033c2:	f383 8811 	msr	BASEPRI, r3
 80033c6:	f3bf 8f6f 	isb	sy
 80033ca:	f3bf 8f4f 	dsb	sy
 80033ce:	61bb      	str	r3, [r7, #24]
}
 80033d0:	bf00      	nop
 80033d2:	bf00      	nop
 80033d4:	e7fd      	b.n	80033d2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80033d6:	f001 ffb7 	bl	8005348 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80033da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033de:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80033e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d024      	beq.n	8003430 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80033e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033e8:	1e5a      	subs	r2, r3, #1
 80033ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033ec:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80033ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d104      	bne.n	8003400 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80033f6:	f001 fab5 	bl	8004964 <pvTaskIncrementMutexHeldCount>
 80033fa:	4602      	mov	r2, r0
 80033fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033fe:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00f      	beq.n	8003428 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800340a:	3310      	adds	r3, #16
 800340c:	4618      	mov	r0, r3
 800340e:	f000 ff6f 	bl	80042f0 <xTaskRemoveFromEventList>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d007      	beq.n	8003428 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003418:	4b54      	ldr	r3, [pc, #336]	@ (800356c <xQueueSemaphoreTake+0x21c>)
 800341a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800341e:	601a      	str	r2, [r3, #0]
 8003420:	f3bf 8f4f 	dsb	sy
 8003424:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003428:	f001 ffc0 	bl	80053ac <vPortExitCritical>
				return pdPASS;
 800342c:	2301      	movs	r3, #1
 800342e:	e098      	b.n	8003562 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d112      	bne.n	800345c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00b      	beq.n	8003454 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800343c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003440:	f383 8811 	msr	BASEPRI, r3
 8003444:	f3bf 8f6f 	isb	sy
 8003448:	f3bf 8f4f 	dsb	sy
 800344c:	617b      	str	r3, [r7, #20]
}
 800344e:	bf00      	nop
 8003450:	bf00      	nop
 8003452:	e7fd      	b.n	8003450 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003454:	f001 ffaa 	bl	80053ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003458:	2300      	movs	r3, #0
 800345a:	e082      	b.n	8003562 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800345c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800345e:	2b00      	cmp	r3, #0
 8003460:	d106      	bne.n	8003470 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003462:	f107 030c 	add.w	r3, r7, #12
 8003466:	4618      	mov	r0, r3
 8003468:	f000 ffa6 	bl	80043b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800346c:	2301      	movs	r3, #1
 800346e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003470:	f001 ff9c 	bl	80053ac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003474:	f000 fd16 	bl	8003ea4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003478:	f001 ff66 	bl	8005348 <vPortEnterCritical>
 800347c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800347e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003482:	b25b      	sxtb	r3, r3
 8003484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003488:	d103      	bne.n	8003492 <xQueueSemaphoreTake+0x142>
 800348a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003494:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003498:	b25b      	sxtb	r3, r3
 800349a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800349e:	d103      	bne.n	80034a8 <xQueueSemaphoreTake+0x158>
 80034a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80034a8:	f001 ff80 	bl	80053ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80034ac:	463a      	mov	r2, r7
 80034ae:	f107 030c 	add.w	r3, r7, #12
 80034b2:	4611      	mov	r1, r2
 80034b4:	4618      	mov	r0, r3
 80034b6:	f000 ff95 	bl	80043e4 <xTaskCheckForTimeOut>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d132      	bne.n	8003526 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034c0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80034c2:	f000 f9f5 	bl	80038b0 <prvIsQueueEmpty>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d026      	beq.n	800351a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80034cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d109      	bne.n	80034e8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80034d4:	f001 ff38 	bl	8005348 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80034d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	4618      	mov	r0, r3
 80034de:	f001 f8e5 	bl	80046ac <xTaskPriorityInherit>
 80034e2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80034e4:	f001 ff62 	bl	80053ac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80034e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034ea:	3324      	adds	r3, #36	@ 0x24
 80034ec:	683a      	ldr	r2, [r7, #0]
 80034ee:	4611      	mov	r1, r2
 80034f0:	4618      	mov	r0, r3
 80034f2:	f000 feab 	bl	800424c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80034f6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80034f8:	f000 f988 	bl	800380c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80034fc:	f000 fce0 	bl	8003ec0 <xTaskResumeAll>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	f47f af67 	bne.w	80033d6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8003508:	4b18      	ldr	r3, [pc, #96]	@ (800356c <xQueueSemaphoreTake+0x21c>)
 800350a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800350e:	601a      	str	r2, [r3, #0]
 8003510:	f3bf 8f4f 	dsb	sy
 8003514:	f3bf 8f6f 	isb	sy
 8003518:	e75d      	b.n	80033d6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800351a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800351c:	f000 f976 	bl	800380c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003520:	f000 fcce 	bl	8003ec0 <xTaskResumeAll>
 8003524:	e757      	b.n	80033d6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003526:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003528:	f000 f970 	bl	800380c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800352c:	f000 fcc8 	bl	8003ec0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003530:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003532:	f000 f9bd 	bl	80038b0 <prvIsQueueEmpty>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	f43f af4c 	beq.w	80033d6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800353e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00d      	beq.n	8003560 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8003544:	f001 ff00 	bl	8005348 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003548:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800354a:	f000 f8b7 	bl	80036bc <prvGetDisinheritPriorityAfterTimeout>
 800354e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003556:	4618      	mov	r0, r3
 8003558:	f001 f980 	bl	800485c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800355c:	f001 ff26 	bl	80053ac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003560:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003562:	4618      	mov	r0, r3
 8003564:	3738      	adds	r7, #56	@ 0x38
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	e000ed04 	.word	0xe000ed04

08003570 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b08e      	sub	sp, #56	@ 0x38
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10b      	bne.n	800359e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8003586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800358a:	f383 8811 	msr	BASEPRI, r3
 800358e:	f3bf 8f6f 	isb	sy
 8003592:	f3bf 8f4f 	dsb	sy
 8003596:	623b      	str	r3, [r7, #32]
}
 8003598:	bf00      	nop
 800359a:	bf00      	nop
 800359c:	e7fd      	b.n	800359a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d103      	bne.n	80035ac <xQueueReceiveFromISR+0x3c>
 80035a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d101      	bne.n	80035b0 <xQueueReceiveFromISR+0x40>
 80035ac:	2301      	movs	r3, #1
 80035ae:	e000      	b.n	80035b2 <xQueueReceiveFromISR+0x42>
 80035b0:	2300      	movs	r3, #0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10b      	bne.n	80035ce <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80035b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035ba:	f383 8811 	msr	BASEPRI, r3
 80035be:	f3bf 8f6f 	isb	sy
 80035c2:	f3bf 8f4f 	dsb	sy
 80035c6:	61fb      	str	r3, [r7, #28]
}
 80035c8:	bf00      	nop
 80035ca:	bf00      	nop
 80035cc:	e7fd      	b.n	80035ca <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80035ce:	f001 ff9b 	bl	8005508 <vPortValidateInterruptPriority>
	__asm volatile
 80035d2:	f3ef 8211 	mrs	r2, BASEPRI
 80035d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035da:	f383 8811 	msr	BASEPRI, r3
 80035de:	f3bf 8f6f 	isb	sy
 80035e2:	f3bf 8f4f 	dsb	sy
 80035e6:	61ba      	str	r2, [r7, #24]
 80035e8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80035ea:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80035ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80035ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035f2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80035f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d02f      	beq.n	800365a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80035fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003600:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003604:	68b9      	ldr	r1, [r7, #8]
 8003606:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003608:	f000 f8da 	bl	80037c0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800360c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800360e:	1e5a      	subs	r2, r3, #1
 8003610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003612:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003614:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800361c:	d112      	bne.n	8003644 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800361e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d016      	beq.n	8003654 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003628:	3310      	adds	r3, #16
 800362a:	4618      	mov	r0, r3
 800362c:	f000 fe60 	bl	80042f0 <xTaskRemoveFromEventList>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00e      	beq.n	8003654 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00b      	beq.n	8003654 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	601a      	str	r2, [r3, #0]
 8003642:	e007      	b.n	8003654 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003644:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003648:	3301      	adds	r3, #1
 800364a:	b2db      	uxtb	r3, r3
 800364c:	b25a      	sxtb	r2, r3
 800364e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003650:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8003654:	2301      	movs	r3, #1
 8003656:	637b      	str	r3, [r7, #52]	@ 0x34
 8003658:	e001      	b.n	800365e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800365a:	2300      	movs	r3, #0
 800365c:	637b      	str	r3, [r7, #52]	@ 0x34
 800365e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003660:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	f383 8811 	msr	BASEPRI, r3
}
 8003668:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800366a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800366c:	4618      	mov	r0, r3
 800366e:	3738      	adds	r7, #56	@ 0x38
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d10b      	bne.n	800369e <vQueueDelete+0x2a>
	__asm volatile
 8003686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800368a:	f383 8811 	msr	BASEPRI, r3
 800368e:	f3bf 8f6f 	isb	sy
 8003692:	f3bf 8f4f 	dsb	sy
 8003696:	60bb      	str	r3, [r7, #8]
}
 8003698:	bf00      	nop
 800369a:	bf00      	nop
 800369c:	e7fd      	b.n	800369a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f000 f95e 	bl	8003960 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d102      	bne.n	80036b4 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80036ae:	68f8      	ldr	r0, [r7, #12]
 80036b0:	f002 f83a 	bl	8005728 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80036b4:	bf00      	nop
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d006      	beq.n	80036da <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80036d6:	60fb      	str	r3, [r7, #12]
 80036d8:	e001      	b.n	80036de <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80036da:	2300      	movs	r3, #0
 80036dc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80036de:	68fb      	ldr	r3, [r7, #12]
	}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3714      	adds	r7, #20
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80036f8:	2300      	movs	r3, #0
 80036fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003700:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10d      	bne.n	8003726 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d14d      	bne.n	80037ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	4618      	mov	r0, r3
 8003718:	f001 f830 	bl	800477c <xTaskPriorityDisinherit>
 800371c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	609a      	str	r2, [r3, #8]
 8003724:	e043      	b.n	80037ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d119      	bne.n	8003760 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6858      	ldr	r0, [r3, #4]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003734:	461a      	mov	r2, r3
 8003736:	68b9      	ldr	r1, [r7, #8]
 8003738:	f002 f942 	bl	80059c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	685a      	ldr	r2, [r3, #4]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003744:	441a      	add	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	429a      	cmp	r2, r3
 8003754:	d32b      	bcc.n	80037ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	605a      	str	r2, [r3, #4]
 800375e:	e026      	b.n	80037ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	68d8      	ldr	r0, [r3, #12]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003768:	461a      	mov	r2, r3
 800376a:	68b9      	ldr	r1, [r7, #8]
 800376c:	f002 f928 	bl	80059c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	68da      	ldr	r2, [r3, #12]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003778:	425b      	negs	r3, r3
 800377a:	441a      	add	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	68da      	ldr	r2, [r3, #12]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	429a      	cmp	r2, r3
 800378a:	d207      	bcs.n	800379c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	689a      	ldr	r2, [r3, #8]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003794:	425b      	negs	r3, r3
 8003796:	441a      	add	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d105      	bne.n	80037ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d002      	beq.n	80037ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	3b01      	subs	r3, #1
 80037ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	1c5a      	adds	r2, r3, #1
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80037b6:	697b      	ldr	r3, [r7, #20]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3718      	adds	r7, #24
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d018      	beq.n	8003804 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	68da      	ldr	r2, [r3, #12]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037da:	441a      	add	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	68da      	ldr	r2, [r3, #12]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d303      	bcc.n	80037f4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68d9      	ldr	r1, [r3, #12]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fc:	461a      	mov	r2, r3
 80037fe:	6838      	ldr	r0, [r7, #0]
 8003800:	f002 f8de 	bl	80059c0 <memcpy>
	}
}
 8003804:	bf00      	nop
 8003806:	3708      	adds	r7, #8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003814:	f001 fd98 	bl	8005348 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800381e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003820:	e011      	b.n	8003846 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003826:	2b00      	cmp	r3, #0
 8003828:	d012      	beq.n	8003850 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	3324      	adds	r3, #36	@ 0x24
 800382e:	4618      	mov	r0, r3
 8003830:	f000 fd5e 	bl	80042f0 <xTaskRemoveFromEventList>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800383a:	f000 fe37 	bl	80044ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800383e:	7bfb      	ldrb	r3, [r7, #15]
 8003840:	3b01      	subs	r3, #1
 8003842:	b2db      	uxtb	r3, r3
 8003844:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800384a:	2b00      	cmp	r3, #0
 800384c:	dce9      	bgt.n	8003822 <prvUnlockQueue+0x16>
 800384e:	e000      	b.n	8003852 <prvUnlockQueue+0x46>
					break;
 8003850:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	22ff      	movs	r2, #255	@ 0xff
 8003856:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800385a:	f001 fda7 	bl	80053ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800385e:	f001 fd73 	bl	8005348 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003868:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800386a:	e011      	b.n	8003890 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	691b      	ldr	r3, [r3, #16]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d012      	beq.n	800389a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	3310      	adds	r3, #16
 8003878:	4618      	mov	r0, r3
 800387a:	f000 fd39 	bl	80042f0 <xTaskRemoveFromEventList>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003884:	f000 fe12 	bl	80044ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003888:	7bbb      	ldrb	r3, [r7, #14]
 800388a:	3b01      	subs	r3, #1
 800388c:	b2db      	uxtb	r3, r3
 800388e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003890:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003894:	2b00      	cmp	r3, #0
 8003896:	dce9      	bgt.n	800386c <prvUnlockQueue+0x60>
 8003898:	e000      	b.n	800389c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800389a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	22ff      	movs	r2, #255	@ 0xff
 80038a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80038a4:	f001 fd82 	bl	80053ac <vPortExitCritical>
}
 80038a8:	bf00      	nop
 80038aa:	3710      	adds	r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80038b8:	f001 fd46 	bl	8005348 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d102      	bne.n	80038ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80038c4:	2301      	movs	r3, #1
 80038c6:	60fb      	str	r3, [r7, #12]
 80038c8:	e001      	b.n	80038ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80038ca:	2300      	movs	r3, #0
 80038cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80038ce:	f001 fd6d 	bl	80053ac <vPortExitCritical>

	return xReturn;
 80038d2:	68fb      	ldr	r3, [r7, #12]
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80038e4:	f001 fd30 	bl	8005348 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d102      	bne.n	80038fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80038f4:	2301      	movs	r3, #1
 80038f6:	60fb      	str	r3, [r7, #12]
 80038f8:	e001      	b.n	80038fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80038fa:	2300      	movs	r3, #0
 80038fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80038fe:	f001 fd55 	bl	80053ac <vPortExitCritical>

	return xReturn;
 8003902:	68fb      	ldr	r3, [r7, #12]
}
 8003904:	4618      	mov	r0, r3
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800390c:	b480      	push	{r7}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003916:	2300      	movs	r3, #0
 8003918:	60fb      	str	r3, [r7, #12]
 800391a:	e014      	b.n	8003946 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800391c:	4a0f      	ldr	r2, [pc, #60]	@ (800395c <vQueueAddToRegistry+0x50>)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d10b      	bne.n	8003940 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003928:	490c      	ldr	r1, [pc, #48]	@ (800395c <vQueueAddToRegistry+0x50>)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	683a      	ldr	r2, [r7, #0]
 800392e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003932:	4a0a      	ldr	r2, [pc, #40]	@ (800395c <vQueueAddToRegistry+0x50>)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	00db      	lsls	r3, r3, #3
 8003938:	4413      	add	r3, r2
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800393e:	e006      	b.n	800394e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	3301      	adds	r3, #1
 8003944:	60fb      	str	r3, [r7, #12]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2b07      	cmp	r3, #7
 800394a:	d9e7      	bls.n	800391c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800394c:	bf00      	nop
 800394e:	bf00      	nop
 8003950:	3714      	adds	r7, #20
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	20000794 	.word	0x20000794

08003960 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003968:	2300      	movs	r3, #0
 800396a:	60fb      	str	r3, [r7, #12]
 800396c:	e016      	b.n	800399c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800396e:	4a10      	ldr	r2, [pc, #64]	@ (80039b0 <vQueueUnregisterQueue+0x50>)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	00db      	lsls	r3, r3, #3
 8003974:	4413      	add	r3, r2
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	429a      	cmp	r2, r3
 800397c:	d10b      	bne.n	8003996 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800397e:	4a0c      	ldr	r2, [pc, #48]	@ (80039b0 <vQueueUnregisterQueue+0x50>)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2100      	movs	r1, #0
 8003984:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8003988:	4a09      	ldr	r2, [pc, #36]	@ (80039b0 <vQueueUnregisterQueue+0x50>)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	00db      	lsls	r3, r3, #3
 800398e:	4413      	add	r3, r2
 8003990:	2200      	movs	r2, #0
 8003992:	605a      	str	r2, [r3, #4]
				break;
 8003994:	e006      	b.n	80039a4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	3301      	adds	r3, #1
 800399a:	60fb      	str	r3, [r7, #12]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2b07      	cmp	r3, #7
 80039a0:	d9e5      	bls.n	800396e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80039a2:	bf00      	nop
 80039a4:	bf00      	nop
 80039a6:	3714      	adds	r7, #20
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr
 80039b0:	20000794 	.word	0x20000794

080039b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80039c4:	f001 fcc0 	bl	8005348 <vPortEnterCritical>
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80039ce:	b25b      	sxtb	r3, r3
 80039d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d4:	d103      	bne.n	80039de <vQueueWaitForMessageRestricted+0x2a>
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80039e4:	b25b      	sxtb	r3, r3
 80039e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ea:	d103      	bne.n	80039f4 <vQueueWaitForMessageRestricted+0x40>
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80039f4:	f001 fcda 	bl	80053ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d106      	bne.n	8003a0e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	3324      	adds	r3, #36	@ 0x24
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	68b9      	ldr	r1, [r7, #8]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f000 fc45 	bl	8004298 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003a0e:	6978      	ldr	r0, [r7, #20]
 8003a10:	f7ff fefc 	bl	800380c <prvUnlockQueue>
	}
 8003a14:	bf00      	nop
 8003a16:	3718      	adds	r7, #24
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b08e      	sub	sp, #56	@ 0x38
 8003a20:	af04      	add	r7, sp, #16
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]
 8003a28:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003a2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d10b      	bne.n	8003a48 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a34:	f383 8811 	msr	BASEPRI, r3
 8003a38:	f3bf 8f6f 	isb	sy
 8003a3c:	f3bf 8f4f 	dsb	sy
 8003a40:	623b      	str	r3, [r7, #32]
}
 8003a42:	bf00      	nop
 8003a44:	bf00      	nop
 8003a46:	e7fd      	b.n	8003a44 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003a48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d10b      	bne.n	8003a66 <xTaskCreateStatic+0x4a>
	__asm volatile
 8003a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a52:	f383 8811 	msr	BASEPRI, r3
 8003a56:	f3bf 8f6f 	isb	sy
 8003a5a:	f3bf 8f4f 	dsb	sy
 8003a5e:	61fb      	str	r3, [r7, #28]
}
 8003a60:	bf00      	nop
 8003a62:	bf00      	nop
 8003a64:	e7fd      	b.n	8003a62 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003a66:	235c      	movs	r3, #92	@ 0x5c
 8003a68:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	2b5c      	cmp	r3, #92	@ 0x5c
 8003a6e:	d00b      	beq.n	8003a88 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a74:	f383 8811 	msr	BASEPRI, r3
 8003a78:	f3bf 8f6f 	isb	sy
 8003a7c:	f3bf 8f4f 	dsb	sy
 8003a80:	61bb      	str	r3, [r7, #24]
}
 8003a82:	bf00      	nop
 8003a84:	bf00      	nop
 8003a86:	e7fd      	b.n	8003a84 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003a88:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d01e      	beq.n	8003ace <xTaskCreateStatic+0xb2>
 8003a90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d01b      	beq.n	8003ace <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a98:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a9c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003a9e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	9303      	str	r3, [sp, #12]
 8003aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aae:	9302      	str	r3, [sp, #8]
 8003ab0:	f107 0314 	add.w	r3, r7, #20
 8003ab4:	9301      	str	r3, [sp, #4]
 8003ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	68b9      	ldr	r1, [r7, #8]
 8003ac0:	68f8      	ldr	r0, [r7, #12]
 8003ac2:	f000 f850 	bl	8003b66 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ac6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003ac8:	f000 f8de 	bl	8003c88 <prvAddNewTaskToReadyList>
 8003acc:	e001      	b.n	8003ad2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003ad2:	697b      	ldr	r3, [r7, #20]
	}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3728      	adds	r7, #40	@ 0x28
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b08c      	sub	sp, #48	@ 0x30
 8003ae0:	af04      	add	r7, sp, #16
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	603b      	str	r3, [r7, #0]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003aec:	88fb      	ldrh	r3, [r7, #6]
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	4618      	mov	r0, r3
 8003af2:	f001 fd4b 	bl	800558c <pvPortMalloc>
 8003af6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00e      	beq.n	8003b1c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003afe:	205c      	movs	r0, #92	@ 0x5c
 8003b00:	f001 fd44 	bl	800558c <pvPortMalloc>
 8003b04:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d003      	beq.n	8003b14 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b12:	e005      	b.n	8003b20 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003b14:	6978      	ldr	r0, [r7, #20]
 8003b16:	f001 fe07 	bl	8005728 <vPortFree>
 8003b1a:	e001      	b.n	8003b20 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d017      	beq.n	8003b56 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003b2e:	88fa      	ldrh	r2, [r7, #6]
 8003b30:	2300      	movs	r3, #0
 8003b32:	9303      	str	r3, [sp, #12]
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	9302      	str	r3, [sp, #8]
 8003b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b3a:	9301      	str	r3, [sp, #4]
 8003b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b3e:	9300      	str	r3, [sp, #0]
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	68b9      	ldr	r1, [r7, #8]
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	f000 f80e 	bl	8003b66 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b4a:	69f8      	ldr	r0, [r7, #28]
 8003b4c:	f000 f89c 	bl	8003c88 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003b50:	2301      	movs	r3, #1
 8003b52:	61bb      	str	r3, [r7, #24]
 8003b54:	e002      	b.n	8003b5c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003b56:	f04f 33ff 	mov.w	r3, #4294967295
 8003b5a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003b5c:	69bb      	ldr	r3, [r7, #24]
	}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3720      	adds	r7, #32
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b088      	sub	sp, #32
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	60f8      	str	r0, [r7, #12]
 8003b6e:	60b9      	str	r1, [r7, #8]
 8003b70:	607a      	str	r2, [r7, #4]
 8003b72:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b76:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	21a5      	movs	r1, #165	@ 0xa5
 8003b80:	f001 fef2 	bl	8005968 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	4413      	add	r3, r2
 8003b94:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	f023 0307 	bic.w	r3, r3, #7
 8003b9c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	f003 0307 	and.w	r3, r3, #7
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00b      	beq.n	8003bc0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bac:	f383 8811 	msr	BASEPRI, r3
 8003bb0:	f3bf 8f6f 	isb	sy
 8003bb4:	f3bf 8f4f 	dsb	sy
 8003bb8:	617b      	str	r3, [r7, #20]
}
 8003bba:	bf00      	nop
 8003bbc:	bf00      	nop
 8003bbe:	e7fd      	b.n	8003bbc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d01f      	beq.n	8003c06 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	61fb      	str	r3, [r7, #28]
 8003bca:	e012      	b.n	8003bf2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003bcc:	68ba      	ldr	r2, [r7, #8]
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	7819      	ldrb	r1, [r3, #0]
 8003bd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	4413      	add	r3, r2
 8003bda:	3334      	adds	r3, #52	@ 0x34
 8003bdc:	460a      	mov	r2, r1
 8003bde:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003be0:	68ba      	ldr	r2, [r7, #8]
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	4413      	add	r3, r2
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d006      	beq.n	8003bfa <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	3301      	adds	r3, #1
 8003bf0:	61fb      	str	r3, [r7, #28]
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	2b0f      	cmp	r3, #15
 8003bf6:	d9e9      	bls.n	8003bcc <prvInitialiseNewTask+0x66>
 8003bf8:	e000      	b.n	8003bfc <prvInitialiseNewTask+0x96>
			{
				break;
 8003bfa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c04:	e003      	b.n	8003c0e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c10:	2b37      	cmp	r3, #55	@ 0x37
 8003c12:	d901      	bls.n	8003c18 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003c14:	2337      	movs	r3, #55	@ 0x37
 8003c16:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c1c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c22:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c26:	2200      	movs	r2, #0
 8003c28:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c2c:	3304      	adds	r3, #4
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7fe fe34 	bl	800289c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c36:	3318      	adds	r3, #24
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7fe fe2f 	bl	800289c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c42:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c46:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c4c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c52:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c56:	2200      	movs	r2, #0
 8003c58:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003c62:	683a      	ldr	r2, [r7, #0]
 8003c64:	68f9      	ldr	r1, [r7, #12]
 8003c66:	69b8      	ldr	r0, [r7, #24]
 8003c68:	f001 fa3e 	bl	80050e8 <pxPortInitialiseStack>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c70:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003c72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d002      	beq.n	8003c7e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c7c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c7e:	bf00      	nop
 8003c80:	3720      	adds	r7, #32
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
	...

08003c88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003c90:	f001 fb5a 	bl	8005348 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003c94:	4b2d      	ldr	r3, [pc, #180]	@ (8003d4c <prvAddNewTaskToReadyList+0xc4>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	3301      	adds	r3, #1
 8003c9a:	4a2c      	ldr	r2, [pc, #176]	@ (8003d4c <prvAddNewTaskToReadyList+0xc4>)
 8003c9c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003c9e:	4b2c      	ldr	r3, [pc, #176]	@ (8003d50 <prvAddNewTaskToReadyList+0xc8>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d109      	bne.n	8003cba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003ca6:	4a2a      	ldr	r2, [pc, #168]	@ (8003d50 <prvAddNewTaskToReadyList+0xc8>)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003cac:	4b27      	ldr	r3, [pc, #156]	@ (8003d4c <prvAddNewTaskToReadyList+0xc4>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d110      	bne.n	8003cd6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003cb4:	f000 fc1e 	bl	80044f4 <prvInitialiseTaskLists>
 8003cb8:	e00d      	b.n	8003cd6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003cba:	4b26      	ldr	r3, [pc, #152]	@ (8003d54 <prvAddNewTaskToReadyList+0xcc>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d109      	bne.n	8003cd6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003cc2:	4b23      	ldr	r3, [pc, #140]	@ (8003d50 <prvAddNewTaskToReadyList+0xc8>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d802      	bhi.n	8003cd6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003cd0:	4a1f      	ldr	r2, [pc, #124]	@ (8003d50 <prvAddNewTaskToReadyList+0xc8>)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003cd6:	4b20      	ldr	r3, [pc, #128]	@ (8003d58 <prvAddNewTaskToReadyList+0xd0>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	3301      	adds	r3, #1
 8003cdc:	4a1e      	ldr	r2, [pc, #120]	@ (8003d58 <prvAddNewTaskToReadyList+0xd0>)
 8003cde:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003ce0:	4b1d      	ldr	r3, [pc, #116]	@ (8003d58 <prvAddNewTaskToReadyList+0xd0>)
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cec:	4b1b      	ldr	r3, [pc, #108]	@ (8003d5c <prvAddNewTaskToReadyList+0xd4>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d903      	bls.n	8003cfc <prvAddNewTaskToReadyList+0x74>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf8:	4a18      	ldr	r2, [pc, #96]	@ (8003d5c <prvAddNewTaskToReadyList+0xd4>)
 8003cfa:	6013      	str	r3, [r2, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d00:	4613      	mov	r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	4413      	add	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	4a15      	ldr	r2, [pc, #84]	@ (8003d60 <prvAddNewTaskToReadyList+0xd8>)
 8003d0a:	441a      	add	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	3304      	adds	r3, #4
 8003d10:	4619      	mov	r1, r3
 8003d12:	4610      	mov	r0, r2
 8003d14:	f7fe fdcf 	bl	80028b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003d18:	f001 fb48 	bl	80053ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003d1c:	4b0d      	ldr	r3, [pc, #52]	@ (8003d54 <prvAddNewTaskToReadyList+0xcc>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d00e      	beq.n	8003d42 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003d24:	4b0a      	ldr	r3, [pc, #40]	@ (8003d50 <prvAddNewTaskToReadyList+0xc8>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d207      	bcs.n	8003d42 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003d32:	4b0c      	ldr	r3, [pc, #48]	@ (8003d64 <prvAddNewTaskToReadyList+0xdc>)
 8003d34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d38:	601a      	str	r2, [r3, #0]
 8003d3a:	f3bf 8f4f 	dsb	sy
 8003d3e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d42:	bf00      	nop
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	20000ca8 	.word	0x20000ca8
 8003d50:	200007d4 	.word	0x200007d4
 8003d54:	20000cb4 	.word	0x20000cb4
 8003d58:	20000cc4 	.word	0x20000cc4
 8003d5c:	20000cb0 	.word	0x20000cb0
 8003d60:	200007d8 	.word	0x200007d8
 8003d64:	e000ed04 	.word	0xe000ed04

08003d68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003d70:	2300      	movs	r3, #0
 8003d72:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d018      	beq.n	8003dac <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003d7a:	4b14      	ldr	r3, [pc, #80]	@ (8003dcc <vTaskDelay+0x64>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00b      	beq.n	8003d9a <vTaskDelay+0x32>
	__asm volatile
 8003d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d86:	f383 8811 	msr	BASEPRI, r3
 8003d8a:	f3bf 8f6f 	isb	sy
 8003d8e:	f3bf 8f4f 	dsb	sy
 8003d92:	60bb      	str	r3, [r7, #8]
}
 8003d94:	bf00      	nop
 8003d96:	bf00      	nop
 8003d98:	e7fd      	b.n	8003d96 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003d9a:	f000 f883 	bl	8003ea4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003d9e:	2100      	movs	r1, #0
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 fdf3 	bl	800498c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003da6:	f000 f88b 	bl	8003ec0 <xTaskResumeAll>
 8003daa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d107      	bne.n	8003dc2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003db2:	4b07      	ldr	r3, [pc, #28]	@ (8003dd0 <vTaskDelay+0x68>)
 8003db4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003db8:	601a      	str	r2, [r3, #0]
 8003dba:	f3bf 8f4f 	dsb	sy
 8003dbe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003dc2:	bf00      	nop
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	20000cd0 	.word	0x20000cd0
 8003dd0:	e000ed04 	.word	0xe000ed04

08003dd4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b08a      	sub	sp, #40	@ 0x28
 8003dd8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003dde:	2300      	movs	r3, #0
 8003de0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003de2:	463a      	mov	r2, r7
 8003de4:	1d39      	adds	r1, r7, #4
 8003de6:	f107 0308 	add.w	r3, r7, #8
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7fe fd02 	bl	80027f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003df0:	6839      	ldr	r1, [r7, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	68ba      	ldr	r2, [r7, #8]
 8003df6:	9202      	str	r2, [sp, #8]
 8003df8:	9301      	str	r3, [sp, #4]
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	9300      	str	r3, [sp, #0]
 8003dfe:	2300      	movs	r3, #0
 8003e00:	460a      	mov	r2, r1
 8003e02:	4922      	ldr	r1, [pc, #136]	@ (8003e8c <vTaskStartScheduler+0xb8>)
 8003e04:	4822      	ldr	r0, [pc, #136]	@ (8003e90 <vTaskStartScheduler+0xbc>)
 8003e06:	f7ff fe09 	bl	8003a1c <xTaskCreateStatic>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	4a21      	ldr	r2, [pc, #132]	@ (8003e94 <vTaskStartScheduler+0xc0>)
 8003e0e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003e10:	4b20      	ldr	r3, [pc, #128]	@ (8003e94 <vTaskStartScheduler+0xc0>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d002      	beq.n	8003e1e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	617b      	str	r3, [r7, #20]
 8003e1c:	e001      	b.n	8003e22 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d102      	bne.n	8003e2e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003e28:	f000 fe04 	bl	8004a34 <xTimerCreateTimerTask>
 8003e2c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d116      	bne.n	8003e62 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003e34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e38:	f383 8811 	msr	BASEPRI, r3
 8003e3c:	f3bf 8f6f 	isb	sy
 8003e40:	f3bf 8f4f 	dsb	sy
 8003e44:	613b      	str	r3, [r7, #16]
}
 8003e46:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003e48:	4b13      	ldr	r3, [pc, #76]	@ (8003e98 <vTaskStartScheduler+0xc4>)
 8003e4a:	f04f 32ff 	mov.w	r2, #4294967295
 8003e4e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003e50:	4b12      	ldr	r3, [pc, #72]	@ (8003e9c <vTaskStartScheduler+0xc8>)
 8003e52:	2201      	movs	r2, #1
 8003e54:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003e56:	4b12      	ldr	r3, [pc, #72]	@ (8003ea0 <vTaskStartScheduler+0xcc>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003e5c:	f001 f9d0 	bl	8005200 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003e60:	e00f      	b.n	8003e82 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e68:	d10b      	bne.n	8003e82 <vTaskStartScheduler+0xae>
	__asm volatile
 8003e6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e6e:	f383 8811 	msr	BASEPRI, r3
 8003e72:	f3bf 8f6f 	isb	sy
 8003e76:	f3bf 8f4f 	dsb	sy
 8003e7a:	60fb      	str	r3, [r7, #12]
}
 8003e7c:	bf00      	nop
 8003e7e:	bf00      	nop
 8003e80:	e7fd      	b.n	8003e7e <vTaskStartScheduler+0xaa>
}
 8003e82:	bf00      	nop
 8003e84:	3718      	adds	r7, #24
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	08005a3c 	.word	0x08005a3c
 8003e90:	080044c5 	.word	0x080044c5
 8003e94:	20000ccc 	.word	0x20000ccc
 8003e98:	20000cc8 	.word	0x20000cc8
 8003e9c:	20000cb4 	.word	0x20000cb4
 8003ea0:	20000cac 	.word	0x20000cac

08003ea4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003ea8:	4b04      	ldr	r3, [pc, #16]	@ (8003ebc <vTaskSuspendAll+0x18>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	3301      	adds	r3, #1
 8003eae:	4a03      	ldr	r2, [pc, #12]	@ (8003ebc <vTaskSuspendAll+0x18>)
 8003eb0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003eb2:	bf00      	nop
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr
 8003ebc:	20000cd0 	.word	0x20000cd0

08003ec0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003ece:	4b42      	ldr	r3, [pc, #264]	@ (8003fd8 <xTaskResumeAll+0x118>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d10b      	bne.n	8003eee <xTaskResumeAll+0x2e>
	__asm volatile
 8003ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eda:	f383 8811 	msr	BASEPRI, r3
 8003ede:	f3bf 8f6f 	isb	sy
 8003ee2:	f3bf 8f4f 	dsb	sy
 8003ee6:	603b      	str	r3, [r7, #0]
}
 8003ee8:	bf00      	nop
 8003eea:	bf00      	nop
 8003eec:	e7fd      	b.n	8003eea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003eee:	f001 fa2b 	bl	8005348 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003ef2:	4b39      	ldr	r3, [pc, #228]	@ (8003fd8 <xTaskResumeAll+0x118>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	4a37      	ldr	r2, [pc, #220]	@ (8003fd8 <xTaskResumeAll+0x118>)
 8003efa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003efc:	4b36      	ldr	r3, [pc, #216]	@ (8003fd8 <xTaskResumeAll+0x118>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d162      	bne.n	8003fca <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003f04:	4b35      	ldr	r3, [pc, #212]	@ (8003fdc <xTaskResumeAll+0x11c>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d05e      	beq.n	8003fca <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f0c:	e02f      	b.n	8003f6e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f0e:	4b34      	ldr	r3, [pc, #208]	@ (8003fe0 <xTaskResumeAll+0x120>)
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	3318      	adds	r3, #24
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7fe fd28 	bl	8002970 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	3304      	adds	r3, #4
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7fe fd23 	bl	8002970 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f2e:	4b2d      	ldr	r3, [pc, #180]	@ (8003fe4 <xTaskResumeAll+0x124>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d903      	bls.n	8003f3e <xTaskResumeAll+0x7e>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f3a:	4a2a      	ldr	r2, [pc, #168]	@ (8003fe4 <xTaskResumeAll+0x124>)
 8003f3c:	6013      	str	r3, [r2, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f42:	4613      	mov	r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	4413      	add	r3, r2
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	4a27      	ldr	r2, [pc, #156]	@ (8003fe8 <xTaskResumeAll+0x128>)
 8003f4c:	441a      	add	r2, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	3304      	adds	r3, #4
 8003f52:	4619      	mov	r1, r3
 8003f54:	4610      	mov	r0, r2
 8003f56:	f7fe fcae 	bl	80028b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f5e:	4b23      	ldr	r3, [pc, #140]	@ (8003fec <xTaskResumeAll+0x12c>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d302      	bcc.n	8003f6e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003f68:	4b21      	ldr	r3, [pc, #132]	@ (8003ff0 <xTaskResumeAll+0x130>)
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f6e:	4b1c      	ldr	r3, [pc, #112]	@ (8003fe0 <xTaskResumeAll+0x120>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1cb      	bne.n	8003f0e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d001      	beq.n	8003f80 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003f7c:	f000 fb58 	bl	8004630 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003f80:	4b1c      	ldr	r3, [pc, #112]	@ (8003ff4 <xTaskResumeAll+0x134>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d010      	beq.n	8003fae <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003f8c:	f000 f846 	bl	800401c <xTaskIncrementTick>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d002      	beq.n	8003f9c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003f96:	4b16      	ldr	r3, [pc, #88]	@ (8003ff0 <xTaskResumeAll+0x130>)
 8003f98:	2201      	movs	r2, #1
 8003f9a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1f1      	bne.n	8003f8c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003fa8:	4b12      	ldr	r3, [pc, #72]	@ (8003ff4 <xTaskResumeAll+0x134>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003fae:	4b10      	ldr	r3, [pc, #64]	@ (8003ff0 <xTaskResumeAll+0x130>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d009      	beq.n	8003fca <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003fba:	4b0f      	ldr	r3, [pc, #60]	@ (8003ff8 <xTaskResumeAll+0x138>)
 8003fbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fc0:	601a      	str	r2, [r3, #0]
 8003fc2:	f3bf 8f4f 	dsb	sy
 8003fc6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003fca:	f001 f9ef 	bl	80053ac <vPortExitCritical>

	return xAlreadyYielded;
 8003fce:	68bb      	ldr	r3, [r7, #8]
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	20000cd0 	.word	0x20000cd0
 8003fdc:	20000ca8 	.word	0x20000ca8
 8003fe0:	20000c68 	.word	0x20000c68
 8003fe4:	20000cb0 	.word	0x20000cb0
 8003fe8:	200007d8 	.word	0x200007d8
 8003fec:	200007d4 	.word	0x200007d4
 8003ff0:	20000cbc 	.word	0x20000cbc
 8003ff4:	20000cb8 	.word	0x20000cb8
 8003ff8:	e000ed04 	.word	0xe000ed04

08003ffc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004002:	4b05      	ldr	r3, [pc, #20]	@ (8004018 <xTaskGetTickCount+0x1c>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004008:	687b      	ldr	r3, [r7, #4]
}
 800400a:	4618      	mov	r0, r3
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	20000cac 	.word	0x20000cac

0800401c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b086      	sub	sp, #24
 8004020:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004022:	2300      	movs	r3, #0
 8004024:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004026:	4b4f      	ldr	r3, [pc, #316]	@ (8004164 <xTaskIncrementTick+0x148>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2b00      	cmp	r3, #0
 800402c:	f040 8090 	bne.w	8004150 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004030:	4b4d      	ldr	r3, [pc, #308]	@ (8004168 <xTaskIncrementTick+0x14c>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	3301      	adds	r3, #1
 8004036:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004038:	4a4b      	ldr	r2, [pc, #300]	@ (8004168 <xTaskIncrementTick+0x14c>)
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d121      	bne.n	8004088 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004044:	4b49      	ldr	r3, [pc, #292]	@ (800416c <xTaskIncrementTick+0x150>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00b      	beq.n	8004066 <xTaskIncrementTick+0x4a>
	__asm volatile
 800404e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004052:	f383 8811 	msr	BASEPRI, r3
 8004056:	f3bf 8f6f 	isb	sy
 800405a:	f3bf 8f4f 	dsb	sy
 800405e:	603b      	str	r3, [r7, #0]
}
 8004060:	bf00      	nop
 8004062:	bf00      	nop
 8004064:	e7fd      	b.n	8004062 <xTaskIncrementTick+0x46>
 8004066:	4b41      	ldr	r3, [pc, #260]	@ (800416c <xTaskIncrementTick+0x150>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	60fb      	str	r3, [r7, #12]
 800406c:	4b40      	ldr	r3, [pc, #256]	@ (8004170 <xTaskIncrementTick+0x154>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a3e      	ldr	r2, [pc, #248]	@ (800416c <xTaskIncrementTick+0x150>)
 8004072:	6013      	str	r3, [r2, #0]
 8004074:	4a3e      	ldr	r2, [pc, #248]	@ (8004170 <xTaskIncrementTick+0x154>)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6013      	str	r3, [r2, #0]
 800407a:	4b3e      	ldr	r3, [pc, #248]	@ (8004174 <xTaskIncrementTick+0x158>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	3301      	adds	r3, #1
 8004080:	4a3c      	ldr	r2, [pc, #240]	@ (8004174 <xTaskIncrementTick+0x158>)
 8004082:	6013      	str	r3, [r2, #0]
 8004084:	f000 fad4 	bl	8004630 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004088:	4b3b      	ldr	r3, [pc, #236]	@ (8004178 <xTaskIncrementTick+0x15c>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	429a      	cmp	r2, r3
 8004090:	d349      	bcc.n	8004126 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004092:	4b36      	ldr	r3, [pc, #216]	@ (800416c <xTaskIncrementTick+0x150>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d104      	bne.n	80040a6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800409c:	4b36      	ldr	r3, [pc, #216]	@ (8004178 <xTaskIncrementTick+0x15c>)
 800409e:	f04f 32ff 	mov.w	r2, #4294967295
 80040a2:	601a      	str	r2, [r3, #0]
					break;
 80040a4:	e03f      	b.n	8004126 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040a6:	4b31      	ldr	r3, [pc, #196]	@ (800416c <xTaskIncrementTick+0x150>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80040b6:	693a      	ldr	r2, [r7, #16]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d203      	bcs.n	80040c6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80040be:	4a2e      	ldr	r2, [pc, #184]	@ (8004178 <xTaskIncrementTick+0x15c>)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80040c4:	e02f      	b.n	8004126 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	3304      	adds	r3, #4
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7fe fc50 	bl	8002970 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d004      	beq.n	80040e2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	3318      	adds	r3, #24
 80040dc:	4618      	mov	r0, r3
 80040de:	f7fe fc47 	bl	8002970 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040e6:	4b25      	ldr	r3, [pc, #148]	@ (800417c <xTaskIncrementTick+0x160>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d903      	bls.n	80040f6 <xTaskIncrementTick+0xda>
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040f2:	4a22      	ldr	r2, [pc, #136]	@ (800417c <xTaskIncrementTick+0x160>)
 80040f4:	6013      	str	r3, [r2, #0]
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040fa:	4613      	mov	r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	4413      	add	r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	4a1f      	ldr	r2, [pc, #124]	@ (8004180 <xTaskIncrementTick+0x164>)
 8004104:	441a      	add	r2, r3
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	3304      	adds	r3, #4
 800410a:	4619      	mov	r1, r3
 800410c:	4610      	mov	r0, r2
 800410e:	f7fe fbd2 	bl	80028b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004116:	4b1b      	ldr	r3, [pc, #108]	@ (8004184 <xTaskIncrementTick+0x168>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800411c:	429a      	cmp	r2, r3
 800411e:	d3b8      	bcc.n	8004092 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004120:	2301      	movs	r3, #1
 8004122:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004124:	e7b5      	b.n	8004092 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004126:	4b17      	ldr	r3, [pc, #92]	@ (8004184 <xTaskIncrementTick+0x168>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800412c:	4914      	ldr	r1, [pc, #80]	@ (8004180 <xTaskIncrementTick+0x164>)
 800412e:	4613      	mov	r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	4413      	add	r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	440b      	add	r3, r1
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d901      	bls.n	8004142 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800413e:	2301      	movs	r3, #1
 8004140:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004142:	4b11      	ldr	r3, [pc, #68]	@ (8004188 <xTaskIncrementTick+0x16c>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d007      	beq.n	800415a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800414a:	2301      	movs	r3, #1
 800414c:	617b      	str	r3, [r7, #20]
 800414e:	e004      	b.n	800415a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004150:	4b0e      	ldr	r3, [pc, #56]	@ (800418c <xTaskIncrementTick+0x170>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	3301      	adds	r3, #1
 8004156:	4a0d      	ldr	r2, [pc, #52]	@ (800418c <xTaskIncrementTick+0x170>)
 8004158:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800415a:	697b      	ldr	r3, [r7, #20]
}
 800415c:	4618      	mov	r0, r3
 800415e:	3718      	adds	r7, #24
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	20000cd0 	.word	0x20000cd0
 8004168:	20000cac 	.word	0x20000cac
 800416c:	20000c60 	.word	0x20000c60
 8004170:	20000c64 	.word	0x20000c64
 8004174:	20000cc0 	.word	0x20000cc0
 8004178:	20000cc8 	.word	0x20000cc8
 800417c:	20000cb0 	.word	0x20000cb0
 8004180:	200007d8 	.word	0x200007d8
 8004184:	200007d4 	.word	0x200007d4
 8004188:	20000cbc 	.word	0x20000cbc
 800418c:	20000cb8 	.word	0x20000cb8

08004190 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004190:	b480      	push	{r7}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004196:	4b28      	ldr	r3, [pc, #160]	@ (8004238 <vTaskSwitchContext+0xa8>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d003      	beq.n	80041a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800419e:	4b27      	ldr	r3, [pc, #156]	@ (800423c <vTaskSwitchContext+0xac>)
 80041a0:	2201      	movs	r2, #1
 80041a2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80041a4:	e042      	b.n	800422c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80041a6:	4b25      	ldr	r3, [pc, #148]	@ (800423c <vTaskSwitchContext+0xac>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041ac:	4b24      	ldr	r3, [pc, #144]	@ (8004240 <vTaskSwitchContext+0xb0>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	60fb      	str	r3, [r7, #12]
 80041b2:	e011      	b.n	80041d8 <vTaskSwitchContext+0x48>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10b      	bne.n	80041d2 <vTaskSwitchContext+0x42>
	__asm volatile
 80041ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041be:	f383 8811 	msr	BASEPRI, r3
 80041c2:	f3bf 8f6f 	isb	sy
 80041c6:	f3bf 8f4f 	dsb	sy
 80041ca:	607b      	str	r3, [r7, #4]
}
 80041cc:	bf00      	nop
 80041ce:	bf00      	nop
 80041d0:	e7fd      	b.n	80041ce <vTaskSwitchContext+0x3e>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	3b01      	subs	r3, #1
 80041d6:	60fb      	str	r3, [r7, #12]
 80041d8:	491a      	ldr	r1, [pc, #104]	@ (8004244 <vTaskSwitchContext+0xb4>)
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	4613      	mov	r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	4413      	add	r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	440b      	add	r3, r1
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d0e3      	beq.n	80041b4 <vTaskSwitchContext+0x24>
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	4613      	mov	r3, r2
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	4413      	add	r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	4a13      	ldr	r2, [pc, #76]	@ (8004244 <vTaskSwitchContext+0xb4>)
 80041f8:	4413      	add	r3, r2
 80041fa:	60bb      	str	r3, [r7, #8]
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	685a      	ldr	r2, [r3, #4]
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	605a      	str	r2, [r3, #4]
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	685a      	ldr	r2, [r3, #4]
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	3308      	adds	r3, #8
 800420e:	429a      	cmp	r2, r3
 8004210:	d104      	bne.n	800421c <vTaskSwitchContext+0x8c>
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	685a      	ldr	r2, [r3, #4]
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	605a      	str	r2, [r3, #4]
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	4a09      	ldr	r2, [pc, #36]	@ (8004248 <vTaskSwitchContext+0xb8>)
 8004224:	6013      	str	r3, [r2, #0]
 8004226:	4a06      	ldr	r2, [pc, #24]	@ (8004240 <vTaskSwitchContext+0xb0>)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6013      	str	r3, [r2, #0]
}
 800422c:	bf00      	nop
 800422e:	3714      	adds	r7, #20
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr
 8004238:	20000cd0 	.word	0x20000cd0
 800423c:	20000cbc 	.word	0x20000cbc
 8004240:	20000cb0 	.word	0x20000cb0
 8004244:	200007d8 	.word	0x200007d8
 8004248:	200007d4 	.word	0x200007d4

0800424c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d10b      	bne.n	8004274 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800425c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004260:	f383 8811 	msr	BASEPRI, r3
 8004264:	f3bf 8f6f 	isb	sy
 8004268:	f3bf 8f4f 	dsb	sy
 800426c:	60fb      	str	r3, [r7, #12]
}
 800426e:	bf00      	nop
 8004270:	bf00      	nop
 8004272:	e7fd      	b.n	8004270 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004274:	4b07      	ldr	r3, [pc, #28]	@ (8004294 <vTaskPlaceOnEventList+0x48>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	3318      	adds	r3, #24
 800427a:	4619      	mov	r1, r3
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f7fe fb3e 	bl	80028fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004282:	2101      	movs	r1, #1
 8004284:	6838      	ldr	r0, [r7, #0]
 8004286:	f000 fb81 	bl	800498c <prvAddCurrentTaskToDelayedList>
}
 800428a:	bf00      	nop
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	200007d4 	.word	0x200007d4

08004298 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004298:	b580      	push	{r7, lr}
 800429a:	b086      	sub	sp, #24
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d10b      	bne.n	80042c2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80042aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042ae:	f383 8811 	msr	BASEPRI, r3
 80042b2:	f3bf 8f6f 	isb	sy
 80042b6:	f3bf 8f4f 	dsb	sy
 80042ba:	617b      	str	r3, [r7, #20]
}
 80042bc:	bf00      	nop
 80042be:	bf00      	nop
 80042c0:	e7fd      	b.n	80042be <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80042c2:	4b0a      	ldr	r3, [pc, #40]	@ (80042ec <vTaskPlaceOnEventListRestricted+0x54>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	3318      	adds	r3, #24
 80042c8:	4619      	mov	r1, r3
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f7fe faf3 	bl	80028b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d002      	beq.n	80042dc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80042d6:	f04f 33ff 	mov.w	r3, #4294967295
 80042da:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80042dc:	6879      	ldr	r1, [r7, #4]
 80042de:	68b8      	ldr	r0, [r7, #8]
 80042e0:	f000 fb54 	bl	800498c <prvAddCurrentTaskToDelayedList>
	}
 80042e4:	bf00      	nop
 80042e6:	3718      	adds	r7, #24
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	200007d4 	.word	0x200007d4

080042f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b086      	sub	sp, #24
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10b      	bne.n	800431e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800430a:	f383 8811 	msr	BASEPRI, r3
 800430e:	f3bf 8f6f 	isb	sy
 8004312:	f3bf 8f4f 	dsb	sy
 8004316:	60fb      	str	r3, [r7, #12]
}
 8004318:	bf00      	nop
 800431a:	bf00      	nop
 800431c:	e7fd      	b.n	800431a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	3318      	adds	r3, #24
 8004322:	4618      	mov	r0, r3
 8004324:	f7fe fb24 	bl	8002970 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004328:	4b1d      	ldr	r3, [pc, #116]	@ (80043a0 <xTaskRemoveFromEventList+0xb0>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d11d      	bne.n	800436c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	3304      	adds	r3, #4
 8004334:	4618      	mov	r0, r3
 8004336:	f7fe fb1b 	bl	8002970 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800433e:	4b19      	ldr	r3, [pc, #100]	@ (80043a4 <xTaskRemoveFromEventList+0xb4>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	429a      	cmp	r2, r3
 8004344:	d903      	bls.n	800434e <xTaskRemoveFromEventList+0x5e>
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800434a:	4a16      	ldr	r2, [pc, #88]	@ (80043a4 <xTaskRemoveFromEventList+0xb4>)
 800434c:	6013      	str	r3, [r2, #0]
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004352:	4613      	mov	r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	4413      	add	r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	4a13      	ldr	r2, [pc, #76]	@ (80043a8 <xTaskRemoveFromEventList+0xb8>)
 800435c:	441a      	add	r2, r3
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	3304      	adds	r3, #4
 8004362:	4619      	mov	r1, r3
 8004364:	4610      	mov	r0, r2
 8004366:	f7fe faa6 	bl	80028b6 <vListInsertEnd>
 800436a:	e005      	b.n	8004378 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	3318      	adds	r3, #24
 8004370:	4619      	mov	r1, r3
 8004372:	480e      	ldr	r0, [pc, #56]	@ (80043ac <xTaskRemoveFromEventList+0xbc>)
 8004374:	f7fe fa9f 	bl	80028b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800437c:	4b0c      	ldr	r3, [pc, #48]	@ (80043b0 <xTaskRemoveFromEventList+0xc0>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004382:	429a      	cmp	r2, r3
 8004384:	d905      	bls.n	8004392 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004386:	2301      	movs	r3, #1
 8004388:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800438a:	4b0a      	ldr	r3, [pc, #40]	@ (80043b4 <xTaskRemoveFromEventList+0xc4>)
 800438c:	2201      	movs	r2, #1
 800438e:	601a      	str	r2, [r3, #0]
 8004390:	e001      	b.n	8004396 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004392:	2300      	movs	r3, #0
 8004394:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004396:	697b      	ldr	r3, [r7, #20]
}
 8004398:	4618      	mov	r0, r3
 800439a:	3718      	adds	r7, #24
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	20000cd0 	.word	0x20000cd0
 80043a4:	20000cb0 	.word	0x20000cb0
 80043a8:	200007d8 	.word	0x200007d8
 80043ac:	20000c68 	.word	0x20000c68
 80043b0:	200007d4 	.word	0x200007d4
 80043b4:	20000cbc 	.word	0x20000cbc

080043b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80043c0:	4b06      	ldr	r3, [pc, #24]	@ (80043dc <vTaskInternalSetTimeOutState+0x24>)
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80043c8:	4b05      	ldr	r3, [pc, #20]	@ (80043e0 <vTaskInternalSetTimeOutState+0x28>)
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	605a      	str	r2, [r3, #4]
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr
 80043dc:	20000cc0 	.word	0x20000cc0
 80043e0:	20000cac 	.word	0x20000cac

080043e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b088      	sub	sp, #32
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d10b      	bne.n	800440c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80043f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043f8:	f383 8811 	msr	BASEPRI, r3
 80043fc:	f3bf 8f6f 	isb	sy
 8004400:	f3bf 8f4f 	dsb	sy
 8004404:	613b      	str	r3, [r7, #16]
}
 8004406:	bf00      	nop
 8004408:	bf00      	nop
 800440a:	e7fd      	b.n	8004408 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d10b      	bne.n	800442a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004416:	f383 8811 	msr	BASEPRI, r3
 800441a:	f3bf 8f6f 	isb	sy
 800441e:	f3bf 8f4f 	dsb	sy
 8004422:	60fb      	str	r3, [r7, #12]
}
 8004424:	bf00      	nop
 8004426:	bf00      	nop
 8004428:	e7fd      	b.n	8004426 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800442a:	f000 ff8d 	bl	8005348 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800442e:	4b1d      	ldr	r3, [pc, #116]	@ (80044a4 <xTaskCheckForTimeOut+0xc0>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	69ba      	ldr	r2, [r7, #24]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004446:	d102      	bne.n	800444e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004448:	2300      	movs	r3, #0
 800444a:	61fb      	str	r3, [r7, #28]
 800444c:	e023      	b.n	8004496 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	4b15      	ldr	r3, [pc, #84]	@ (80044a8 <xTaskCheckForTimeOut+0xc4>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	429a      	cmp	r2, r3
 8004458:	d007      	beq.n	800446a <xTaskCheckForTimeOut+0x86>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	69ba      	ldr	r2, [r7, #24]
 8004460:	429a      	cmp	r2, r3
 8004462:	d302      	bcc.n	800446a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004464:	2301      	movs	r3, #1
 8004466:	61fb      	str	r3, [r7, #28]
 8004468:	e015      	b.n	8004496 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	429a      	cmp	r2, r3
 8004472:	d20b      	bcs.n	800448c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	1ad2      	subs	r2, r2, r3
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f7ff ff99 	bl	80043b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004486:	2300      	movs	r3, #0
 8004488:	61fb      	str	r3, [r7, #28]
 800448a:	e004      	b.n	8004496 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	2200      	movs	r2, #0
 8004490:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004492:	2301      	movs	r3, #1
 8004494:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004496:	f000 ff89 	bl	80053ac <vPortExitCritical>

	return xReturn;
 800449a:	69fb      	ldr	r3, [r7, #28]
}
 800449c:	4618      	mov	r0, r3
 800449e:	3720      	adds	r7, #32
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	20000cac 	.word	0x20000cac
 80044a8:	20000cc0 	.word	0x20000cc0

080044ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80044ac:	b480      	push	{r7}
 80044ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80044b0:	4b03      	ldr	r3, [pc, #12]	@ (80044c0 <vTaskMissedYield+0x14>)
 80044b2:	2201      	movs	r2, #1
 80044b4:	601a      	str	r2, [r3, #0]
}
 80044b6:	bf00      	nop
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr
 80044c0:	20000cbc 	.word	0x20000cbc

080044c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80044cc:	f000 f852 	bl	8004574 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80044d0:	4b06      	ldr	r3, [pc, #24]	@ (80044ec <prvIdleTask+0x28>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d9f9      	bls.n	80044cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80044d8:	4b05      	ldr	r3, [pc, #20]	@ (80044f0 <prvIdleTask+0x2c>)
 80044da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044de:	601a      	str	r2, [r3, #0]
 80044e0:	f3bf 8f4f 	dsb	sy
 80044e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80044e8:	e7f0      	b.n	80044cc <prvIdleTask+0x8>
 80044ea:	bf00      	nop
 80044ec:	200007d8 	.word	0x200007d8
 80044f0:	e000ed04 	.word	0xe000ed04

080044f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80044fa:	2300      	movs	r3, #0
 80044fc:	607b      	str	r3, [r7, #4]
 80044fe:	e00c      	b.n	800451a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	4613      	mov	r3, r2
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	4413      	add	r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	4a12      	ldr	r2, [pc, #72]	@ (8004554 <prvInitialiseTaskLists+0x60>)
 800450c:	4413      	add	r3, r2
 800450e:	4618      	mov	r0, r3
 8004510:	f7fe f9a4 	bl	800285c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	3301      	adds	r3, #1
 8004518:	607b      	str	r3, [r7, #4]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2b37      	cmp	r3, #55	@ 0x37
 800451e:	d9ef      	bls.n	8004500 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004520:	480d      	ldr	r0, [pc, #52]	@ (8004558 <prvInitialiseTaskLists+0x64>)
 8004522:	f7fe f99b 	bl	800285c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004526:	480d      	ldr	r0, [pc, #52]	@ (800455c <prvInitialiseTaskLists+0x68>)
 8004528:	f7fe f998 	bl	800285c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800452c:	480c      	ldr	r0, [pc, #48]	@ (8004560 <prvInitialiseTaskLists+0x6c>)
 800452e:	f7fe f995 	bl	800285c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004532:	480c      	ldr	r0, [pc, #48]	@ (8004564 <prvInitialiseTaskLists+0x70>)
 8004534:	f7fe f992 	bl	800285c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004538:	480b      	ldr	r0, [pc, #44]	@ (8004568 <prvInitialiseTaskLists+0x74>)
 800453a:	f7fe f98f 	bl	800285c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800453e:	4b0b      	ldr	r3, [pc, #44]	@ (800456c <prvInitialiseTaskLists+0x78>)
 8004540:	4a05      	ldr	r2, [pc, #20]	@ (8004558 <prvInitialiseTaskLists+0x64>)
 8004542:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004544:	4b0a      	ldr	r3, [pc, #40]	@ (8004570 <prvInitialiseTaskLists+0x7c>)
 8004546:	4a05      	ldr	r2, [pc, #20]	@ (800455c <prvInitialiseTaskLists+0x68>)
 8004548:	601a      	str	r2, [r3, #0]
}
 800454a:	bf00      	nop
 800454c:	3708      	adds	r7, #8
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	200007d8 	.word	0x200007d8
 8004558:	20000c38 	.word	0x20000c38
 800455c:	20000c4c 	.word	0x20000c4c
 8004560:	20000c68 	.word	0x20000c68
 8004564:	20000c7c 	.word	0x20000c7c
 8004568:	20000c94 	.word	0x20000c94
 800456c:	20000c60 	.word	0x20000c60
 8004570:	20000c64 	.word	0x20000c64

08004574 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800457a:	e019      	b.n	80045b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800457c:	f000 fee4 	bl	8005348 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004580:	4b10      	ldr	r3, [pc, #64]	@ (80045c4 <prvCheckTasksWaitingTermination+0x50>)
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	3304      	adds	r3, #4
 800458c:	4618      	mov	r0, r3
 800458e:	f7fe f9ef 	bl	8002970 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004592:	4b0d      	ldr	r3, [pc, #52]	@ (80045c8 <prvCheckTasksWaitingTermination+0x54>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	3b01      	subs	r3, #1
 8004598:	4a0b      	ldr	r2, [pc, #44]	@ (80045c8 <prvCheckTasksWaitingTermination+0x54>)
 800459a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800459c:	4b0b      	ldr	r3, [pc, #44]	@ (80045cc <prvCheckTasksWaitingTermination+0x58>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	3b01      	subs	r3, #1
 80045a2:	4a0a      	ldr	r2, [pc, #40]	@ (80045cc <prvCheckTasksWaitingTermination+0x58>)
 80045a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80045a6:	f000 ff01 	bl	80053ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f810 	bl	80045d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80045b0:	4b06      	ldr	r3, [pc, #24]	@ (80045cc <prvCheckTasksWaitingTermination+0x58>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1e1      	bne.n	800457c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80045b8:	bf00      	nop
 80045ba:	bf00      	nop
 80045bc:	3708      	adds	r7, #8
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	20000c7c 	.word	0x20000c7c
 80045c8:	20000ca8 	.word	0x20000ca8
 80045cc:	20000c90 	.word	0x20000c90

080045d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d108      	bne.n	80045f4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045e6:	4618      	mov	r0, r3
 80045e8:	f001 f89e 	bl	8005728 <vPortFree>
				vPortFree( pxTCB );
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f001 f89b 	bl	8005728 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80045f2:	e019      	b.n	8004628 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d103      	bne.n	8004606 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f001 f892 	bl	8005728 <vPortFree>
	}
 8004604:	e010      	b.n	8004628 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800460c:	2b02      	cmp	r3, #2
 800460e:	d00b      	beq.n	8004628 <prvDeleteTCB+0x58>
	__asm volatile
 8004610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004614:	f383 8811 	msr	BASEPRI, r3
 8004618:	f3bf 8f6f 	isb	sy
 800461c:	f3bf 8f4f 	dsb	sy
 8004620:	60fb      	str	r3, [r7, #12]
}
 8004622:	bf00      	nop
 8004624:	bf00      	nop
 8004626:	e7fd      	b.n	8004624 <prvDeleteTCB+0x54>
	}
 8004628:	bf00      	nop
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004636:	4b0c      	ldr	r3, [pc, #48]	@ (8004668 <prvResetNextTaskUnblockTime+0x38>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d104      	bne.n	800464a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004640:	4b0a      	ldr	r3, [pc, #40]	@ (800466c <prvResetNextTaskUnblockTime+0x3c>)
 8004642:	f04f 32ff 	mov.w	r2, #4294967295
 8004646:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004648:	e008      	b.n	800465c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800464a:	4b07      	ldr	r3, [pc, #28]	@ (8004668 <prvResetNextTaskUnblockTime+0x38>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	4a04      	ldr	r2, [pc, #16]	@ (800466c <prvResetNextTaskUnblockTime+0x3c>)
 800465a:	6013      	str	r3, [r2, #0]
}
 800465c:	bf00      	nop
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr
 8004668:	20000c60 	.word	0x20000c60
 800466c:	20000cc8 	.word	0x20000cc8

08004670 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004676:	4b0b      	ldr	r3, [pc, #44]	@ (80046a4 <xTaskGetSchedulerState+0x34>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d102      	bne.n	8004684 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800467e:	2301      	movs	r3, #1
 8004680:	607b      	str	r3, [r7, #4]
 8004682:	e008      	b.n	8004696 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004684:	4b08      	ldr	r3, [pc, #32]	@ (80046a8 <xTaskGetSchedulerState+0x38>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d102      	bne.n	8004692 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800468c:	2302      	movs	r3, #2
 800468e:	607b      	str	r3, [r7, #4]
 8004690:	e001      	b.n	8004696 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004692:	2300      	movs	r3, #0
 8004694:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004696:	687b      	ldr	r3, [r7, #4]
	}
 8004698:	4618      	mov	r0, r3
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr
 80046a4:	20000cb4 	.word	0x20000cb4
 80046a8:	20000cd0 	.word	0x20000cd0

080046ac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80046b8:	2300      	movs	r3, #0
 80046ba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d051      	beq.n	8004766 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046c6:	4b2a      	ldr	r3, [pc, #168]	@ (8004770 <xTaskPriorityInherit+0xc4>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d241      	bcs.n	8004754 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	699b      	ldr	r3, [r3, #24]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	db06      	blt.n	80046e6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046d8:	4b25      	ldr	r3, [pc, #148]	@ (8004770 <xTaskPriorityInherit+0xc4>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046de:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	6959      	ldr	r1, [r3, #20]
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046ee:	4613      	mov	r3, r2
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	4413      	add	r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	4a1f      	ldr	r2, [pc, #124]	@ (8004774 <xTaskPriorityInherit+0xc8>)
 80046f8:	4413      	add	r3, r2
 80046fa:	4299      	cmp	r1, r3
 80046fc:	d122      	bne.n	8004744 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	3304      	adds	r3, #4
 8004702:	4618      	mov	r0, r3
 8004704:	f7fe f934 	bl	8002970 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004708:	4b19      	ldr	r3, [pc, #100]	@ (8004770 <xTaskPriorityInherit+0xc4>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004716:	4b18      	ldr	r3, [pc, #96]	@ (8004778 <xTaskPriorityInherit+0xcc>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	429a      	cmp	r2, r3
 800471c:	d903      	bls.n	8004726 <xTaskPriorityInherit+0x7a>
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004722:	4a15      	ldr	r2, [pc, #84]	@ (8004778 <xTaskPriorityInherit+0xcc>)
 8004724:	6013      	str	r3, [r2, #0]
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800472a:	4613      	mov	r3, r2
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	4413      	add	r3, r2
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	4a10      	ldr	r2, [pc, #64]	@ (8004774 <xTaskPriorityInherit+0xc8>)
 8004734:	441a      	add	r2, r3
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	3304      	adds	r3, #4
 800473a:	4619      	mov	r1, r3
 800473c:	4610      	mov	r0, r2
 800473e:	f7fe f8ba 	bl	80028b6 <vListInsertEnd>
 8004742:	e004      	b.n	800474e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004744:	4b0a      	ldr	r3, [pc, #40]	@ (8004770 <xTaskPriorityInherit+0xc4>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800474e:	2301      	movs	r3, #1
 8004750:	60fb      	str	r3, [r7, #12]
 8004752:	e008      	b.n	8004766 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004758:	4b05      	ldr	r3, [pc, #20]	@ (8004770 <xTaskPriorityInherit+0xc4>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800475e:	429a      	cmp	r2, r3
 8004760:	d201      	bcs.n	8004766 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004762:	2301      	movs	r3, #1
 8004764:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004766:	68fb      	ldr	r3, [r7, #12]
	}
 8004768:	4618      	mov	r0, r3
 800476a:	3710      	adds	r7, #16
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	200007d4 	.word	0x200007d4
 8004774:	200007d8 	.word	0x200007d8
 8004778:	20000cb0 	.word	0x20000cb0

0800477c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800477c:	b580      	push	{r7, lr}
 800477e:	b086      	sub	sp, #24
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004788:	2300      	movs	r3, #0
 800478a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d058      	beq.n	8004844 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004792:	4b2f      	ldr	r3, [pc, #188]	@ (8004850 <xTaskPriorityDisinherit+0xd4>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	693a      	ldr	r2, [r7, #16]
 8004798:	429a      	cmp	r2, r3
 800479a:	d00b      	beq.n	80047b4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800479c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047a0:	f383 8811 	msr	BASEPRI, r3
 80047a4:	f3bf 8f6f 	isb	sy
 80047a8:	f3bf 8f4f 	dsb	sy
 80047ac:	60fb      	str	r3, [r7, #12]
}
 80047ae:	bf00      	nop
 80047b0:	bf00      	nop
 80047b2:	e7fd      	b.n	80047b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d10b      	bne.n	80047d4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80047bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047c0:	f383 8811 	msr	BASEPRI, r3
 80047c4:	f3bf 8f6f 	isb	sy
 80047c8:	f3bf 8f4f 	dsb	sy
 80047cc:	60bb      	str	r3, [r7, #8]
}
 80047ce:	bf00      	nop
 80047d0:	bf00      	nop
 80047d2:	e7fd      	b.n	80047d0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047d8:	1e5a      	subs	r2, r3, #1
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d02c      	beq.n	8004844 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d128      	bne.n	8004844 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	3304      	adds	r3, #4
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7fe f8ba 	bl	8002970 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004808:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004814:	4b0f      	ldr	r3, [pc, #60]	@ (8004854 <xTaskPriorityDisinherit+0xd8>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	429a      	cmp	r2, r3
 800481a:	d903      	bls.n	8004824 <xTaskPriorityDisinherit+0xa8>
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004820:	4a0c      	ldr	r2, [pc, #48]	@ (8004854 <xTaskPriorityDisinherit+0xd8>)
 8004822:	6013      	str	r3, [r2, #0]
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004828:	4613      	mov	r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	4413      	add	r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	4a09      	ldr	r2, [pc, #36]	@ (8004858 <xTaskPriorityDisinherit+0xdc>)
 8004832:	441a      	add	r2, r3
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	3304      	adds	r3, #4
 8004838:	4619      	mov	r1, r3
 800483a:	4610      	mov	r0, r2
 800483c:	f7fe f83b 	bl	80028b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004840:	2301      	movs	r3, #1
 8004842:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004844:	697b      	ldr	r3, [r7, #20]
	}
 8004846:	4618      	mov	r0, r3
 8004848:	3718      	adds	r7, #24
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	200007d4 	.word	0x200007d4
 8004854:	20000cb0 	.word	0x20000cb0
 8004858:	200007d8 	.word	0x200007d8

0800485c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800485c:	b580      	push	{r7, lr}
 800485e:	b088      	sub	sp, #32
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800486a:	2301      	movs	r3, #1
 800486c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d06c      	beq.n	800494e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004878:	2b00      	cmp	r3, #0
 800487a:	d10b      	bne.n	8004894 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800487c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004880:	f383 8811 	msr	BASEPRI, r3
 8004884:	f3bf 8f6f 	isb	sy
 8004888:	f3bf 8f4f 	dsb	sy
 800488c:	60fb      	str	r3, [r7, #12]
}
 800488e:	bf00      	nop
 8004890:	bf00      	nop
 8004892:	e7fd      	b.n	8004890 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004898:	683a      	ldr	r2, [r7, #0]
 800489a:	429a      	cmp	r2, r3
 800489c:	d902      	bls.n	80048a4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	61fb      	str	r3, [r7, #28]
 80048a2:	e002      	b.n	80048aa <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048a8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ae:	69fa      	ldr	r2, [r7, #28]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d04c      	beq.n	800494e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048b8:	697a      	ldr	r2, [r7, #20]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d147      	bne.n	800494e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80048be:	4b26      	ldr	r3, [pc, #152]	@ (8004958 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	69ba      	ldr	r2, [r7, #24]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d10b      	bne.n	80048e0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80048c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048cc:	f383 8811 	msr	BASEPRI, r3
 80048d0:	f3bf 8f6f 	isb	sy
 80048d4:	f3bf 8f4f 	dsb	sy
 80048d8:	60bb      	str	r3, [r7, #8]
}
 80048da:	bf00      	nop
 80048dc:	bf00      	nop
 80048de:	e7fd      	b.n	80048dc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048e4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	69fa      	ldr	r2, [r7, #28]
 80048ea:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	db04      	blt.n	80048fe <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	6959      	ldr	r1, [r3, #20]
 8004902:	693a      	ldr	r2, [r7, #16]
 8004904:	4613      	mov	r3, r2
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	4413      	add	r3, r2
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	4a13      	ldr	r2, [pc, #76]	@ (800495c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800490e:	4413      	add	r3, r2
 8004910:	4299      	cmp	r1, r3
 8004912:	d11c      	bne.n	800494e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	3304      	adds	r3, #4
 8004918:	4618      	mov	r0, r3
 800491a:	f7fe f829 	bl	8002970 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004922:	4b0f      	ldr	r3, [pc, #60]	@ (8004960 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	429a      	cmp	r2, r3
 8004928:	d903      	bls.n	8004932 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800492e:	4a0c      	ldr	r2, [pc, #48]	@ (8004960 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004930:	6013      	str	r3, [r2, #0]
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004936:	4613      	mov	r3, r2
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	4413      	add	r3, r2
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	4a07      	ldr	r2, [pc, #28]	@ (800495c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004940:	441a      	add	r2, r3
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	3304      	adds	r3, #4
 8004946:	4619      	mov	r1, r3
 8004948:	4610      	mov	r0, r2
 800494a:	f7fd ffb4 	bl	80028b6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800494e:	bf00      	nop
 8004950:	3720      	adds	r7, #32
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	200007d4 	.word	0x200007d4
 800495c:	200007d8 	.word	0x200007d8
 8004960:	20000cb0 	.word	0x20000cb0

08004964 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004964:	b480      	push	{r7}
 8004966:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004968:	4b07      	ldr	r3, [pc, #28]	@ (8004988 <pvTaskIncrementMutexHeldCount+0x24>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d004      	beq.n	800497a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004970:	4b05      	ldr	r3, [pc, #20]	@ (8004988 <pvTaskIncrementMutexHeldCount+0x24>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004976:	3201      	adds	r2, #1
 8004978:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800497a:	4b03      	ldr	r3, [pc, #12]	@ (8004988 <pvTaskIncrementMutexHeldCount+0x24>)
 800497c:	681b      	ldr	r3, [r3, #0]
	}
 800497e:	4618      	mov	r0, r3
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr
 8004988:	200007d4 	.word	0x200007d4

0800498c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004996:	4b21      	ldr	r3, [pc, #132]	@ (8004a1c <prvAddCurrentTaskToDelayedList+0x90>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800499c:	4b20      	ldr	r3, [pc, #128]	@ (8004a20 <prvAddCurrentTaskToDelayedList+0x94>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	3304      	adds	r3, #4
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7fd ffe4 	bl	8002970 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ae:	d10a      	bne.n	80049c6 <prvAddCurrentTaskToDelayedList+0x3a>
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d007      	beq.n	80049c6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049b6:	4b1a      	ldr	r3, [pc, #104]	@ (8004a20 <prvAddCurrentTaskToDelayedList+0x94>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	3304      	adds	r3, #4
 80049bc:	4619      	mov	r1, r3
 80049be:	4819      	ldr	r0, [pc, #100]	@ (8004a24 <prvAddCurrentTaskToDelayedList+0x98>)
 80049c0:	f7fd ff79 	bl	80028b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80049c4:	e026      	b.n	8004a14 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80049c6:	68fa      	ldr	r2, [r7, #12]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4413      	add	r3, r2
 80049cc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80049ce:	4b14      	ldr	r3, [pc, #80]	@ (8004a20 <prvAddCurrentTaskToDelayedList+0x94>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68ba      	ldr	r2, [r7, #8]
 80049d4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80049d6:	68ba      	ldr	r2, [r7, #8]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	429a      	cmp	r2, r3
 80049dc:	d209      	bcs.n	80049f2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049de:	4b12      	ldr	r3, [pc, #72]	@ (8004a28 <prvAddCurrentTaskToDelayedList+0x9c>)
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	4b0f      	ldr	r3, [pc, #60]	@ (8004a20 <prvAddCurrentTaskToDelayedList+0x94>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	3304      	adds	r3, #4
 80049e8:	4619      	mov	r1, r3
 80049ea:	4610      	mov	r0, r2
 80049ec:	f7fd ff87 	bl	80028fe <vListInsert>
}
 80049f0:	e010      	b.n	8004a14 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049f2:	4b0e      	ldr	r3, [pc, #56]	@ (8004a2c <prvAddCurrentTaskToDelayedList+0xa0>)
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	4b0a      	ldr	r3, [pc, #40]	@ (8004a20 <prvAddCurrentTaskToDelayedList+0x94>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	3304      	adds	r3, #4
 80049fc:	4619      	mov	r1, r3
 80049fe:	4610      	mov	r0, r2
 8004a00:	f7fd ff7d 	bl	80028fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004a04:	4b0a      	ldr	r3, [pc, #40]	@ (8004a30 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68ba      	ldr	r2, [r7, #8]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d202      	bcs.n	8004a14 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004a0e:	4a08      	ldr	r2, [pc, #32]	@ (8004a30 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	6013      	str	r3, [r2, #0]
}
 8004a14:	bf00      	nop
 8004a16:	3710      	adds	r7, #16
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	20000cac 	.word	0x20000cac
 8004a20:	200007d4 	.word	0x200007d4
 8004a24:	20000c94 	.word	0x20000c94
 8004a28:	20000c64 	.word	0x20000c64
 8004a2c:	20000c60 	.word	0x20000c60
 8004a30:	20000cc8 	.word	0x20000cc8

08004a34 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b08a      	sub	sp, #40	@ 0x28
 8004a38:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004a3e:	f000 fb13 	bl	8005068 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004a42:	4b1d      	ldr	r3, [pc, #116]	@ (8004ab8 <xTimerCreateTimerTask+0x84>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d021      	beq.n	8004a8e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004a52:	1d3a      	adds	r2, r7, #4
 8004a54:	f107 0108 	add.w	r1, r7, #8
 8004a58:	f107 030c 	add.w	r3, r7, #12
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7fd fee3 	bl	8002828 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004a62:	6879      	ldr	r1, [r7, #4]
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	9202      	str	r2, [sp, #8]
 8004a6a:	9301      	str	r3, [sp, #4]
 8004a6c:	2302      	movs	r3, #2
 8004a6e:	9300      	str	r3, [sp, #0]
 8004a70:	2300      	movs	r3, #0
 8004a72:	460a      	mov	r2, r1
 8004a74:	4911      	ldr	r1, [pc, #68]	@ (8004abc <xTimerCreateTimerTask+0x88>)
 8004a76:	4812      	ldr	r0, [pc, #72]	@ (8004ac0 <xTimerCreateTimerTask+0x8c>)
 8004a78:	f7fe ffd0 	bl	8003a1c <xTaskCreateStatic>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	4a11      	ldr	r2, [pc, #68]	@ (8004ac4 <xTimerCreateTimerTask+0x90>)
 8004a80:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004a82:	4b10      	ldr	r3, [pc, #64]	@ (8004ac4 <xTimerCreateTimerTask+0x90>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d001      	beq.n	8004a8e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d10b      	bne.n	8004aac <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a98:	f383 8811 	msr	BASEPRI, r3
 8004a9c:	f3bf 8f6f 	isb	sy
 8004aa0:	f3bf 8f4f 	dsb	sy
 8004aa4:	613b      	str	r3, [r7, #16]
}
 8004aa6:	bf00      	nop
 8004aa8:	bf00      	nop
 8004aaa:	e7fd      	b.n	8004aa8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004aac:	697b      	ldr	r3, [r7, #20]
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3718      	adds	r7, #24
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	20000d04 	.word	0x20000d04
 8004abc:	08005a44 	.word	0x08005a44
 8004ac0:	08004c01 	.word	0x08004c01
 8004ac4:	20000d08 	.word	0x20000d08

08004ac8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b08a      	sub	sp, #40	@ 0x28
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]
 8004ad4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d10b      	bne.n	8004af8 <xTimerGenericCommand+0x30>
	__asm volatile
 8004ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ae4:	f383 8811 	msr	BASEPRI, r3
 8004ae8:	f3bf 8f6f 	isb	sy
 8004aec:	f3bf 8f4f 	dsb	sy
 8004af0:	623b      	str	r3, [r7, #32]
}
 8004af2:	bf00      	nop
 8004af4:	bf00      	nop
 8004af6:	e7fd      	b.n	8004af4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004af8:	4b19      	ldr	r3, [pc, #100]	@ (8004b60 <xTimerGenericCommand+0x98>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d02a      	beq.n	8004b56 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	2b05      	cmp	r3, #5
 8004b10:	dc18      	bgt.n	8004b44 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004b12:	f7ff fdad 	bl	8004670 <xTaskGetSchedulerState>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d109      	bne.n	8004b30 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004b1c:	4b10      	ldr	r3, [pc, #64]	@ (8004b60 <xTimerGenericCommand+0x98>)
 8004b1e:	6818      	ldr	r0, [r3, #0]
 8004b20:	f107 0110 	add.w	r1, r7, #16
 8004b24:	2300      	movs	r3, #0
 8004b26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b28:	f7fe f900 	bl	8002d2c <xQueueGenericSend>
 8004b2c:	6278      	str	r0, [r7, #36]	@ 0x24
 8004b2e:	e012      	b.n	8004b56 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004b30:	4b0b      	ldr	r3, [pc, #44]	@ (8004b60 <xTimerGenericCommand+0x98>)
 8004b32:	6818      	ldr	r0, [r3, #0]
 8004b34:	f107 0110 	add.w	r1, r7, #16
 8004b38:	2300      	movs	r3, #0
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f7fe f8f6 	bl	8002d2c <xQueueGenericSend>
 8004b40:	6278      	str	r0, [r7, #36]	@ 0x24
 8004b42:	e008      	b.n	8004b56 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004b44:	4b06      	ldr	r3, [pc, #24]	@ (8004b60 <xTimerGenericCommand+0x98>)
 8004b46:	6818      	ldr	r0, [r3, #0]
 8004b48:	f107 0110 	add.w	r1, r7, #16
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	683a      	ldr	r2, [r7, #0]
 8004b50:	f7fe f9ee 	bl	8002f30 <xQueueGenericSendFromISR>
 8004b54:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3728      	adds	r7, #40	@ 0x28
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	20000d04 	.word	0x20000d04

08004b64 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b088      	sub	sp, #32
 8004b68:	af02      	add	r7, sp, #8
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b6e:	4b23      	ldr	r3, [pc, #140]	@ (8004bfc <prvProcessExpiredTimer+0x98>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	3304      	adds	r3, #4
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f7fd fef7 	bl	8002970 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b88:	f003 0304 	and.w	r3, r3, #4
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d023      	beq.n	8004bd8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	699a      	ldr	r2, [r3, #24]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	18d1      	adds	r1, r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	683a      	ldr	r2, [r7, #0]
 8004b9c:	6978      	ldr	r0, [r7, #20]
 8004b9e:	f000 f8d5 	bl	8004d4c <prvInsertTimerInActiveList>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d020      	beq.n	8004bea <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ba8:	2300      	movs	r3, #0
 8004baa:	9300      	str	r3, [sp, #0]
 8004bac:	2300      	movs	r3, #0
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	2100      	movs	r1, #0
 8004bb2:	6978      	ldr	r0, [r7, #20]
 8004bb4:	f7ff ff88 	bl	8004ac8 <xTimerGenericCommand>
 8004bb8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d114      	bne.n	8004bea <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bc4:	f383 8811 	msr	BASEPRI, r3
 8004bc8:	f3bf 8f6f 	isb	sy
 8004bcc:	f3bf 8f4f 	dsb	sy
 8004bd0:	60fb      	str	r3, [r7, #12]
}
 8004bd2:	bf00      	nop
 8004bd4:	bf00      	nop
 8004bd6:	e7fd      	b.n	8004bd4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004bde:	f023 0301 	bic.w	r3, r3, #1
 8004be2:	b2da      	uxtb	r2, r3
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	6978      	ldr	r0, [r7, #20]
 8004bf0:	4798      	blx	r3
}
 8004bf2:	bf00      	nop
 8004bf4:	3718      	adds	r7, #24
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	20000cfc 	.word	0x20000cfc

08004c00 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004c08:	f107 0308 	add.w	r3, r7, #8
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f000 f859 	bl	8004cc4 <prvGetNextExpireTime>
 8004c12:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	4619      	mov	r1, r3
 8004c18:	68f8      	ldr	r0, [r7, #12]
 8004c1a:	f000 f805 	bl	8004c28 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004c1e:	f000 f8d7 	bl	8004dd0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004c22:	bf00      	nop
 8004c24:	e7f0      	b.n	8004c08 <prvTimerTask+0x8>
	...

08004c28 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004c32:	f7ff f937 	bl	8003ea4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004c36:	f107 0308 	add.w	r3, r7, #8
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f000 f866 	bl	8004d0c <prvSampleTimeNow>
 8004c40:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d130      	bne.n	8004caa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d10a      	bne.n	8004c64 <prvProcessTimerOrBlockTask+0x3c>
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d806      	bhi.n	8004c64 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004c56:	f7ff f933 	bl	8003ec0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004c5a:	68f9      	ldr	r1, [r7, #12]
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f7ff ff81 	bl	8004b64 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004c62:	e024      	b.n	8004cae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d008      	beq.n	8004c7c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004c6a:	4b13      	ldr	r3, [pc, #76]	@ (8004cb8 <prvProcessTimerOrBlockTask+0x90>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d101      	bne.n	8004c78 <prvProcessTimerOrBlockTask+0x50>
 8004c74:	2301      	movs	r3, #1
 8004c76:	e000      	b.n	8004c7a <prvProcessTimerOrBlockTask+0x52>
 8004c78:	2300      	movs	r3, #0
 8004c7a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004c7c:	4b0f      	ldr	r3, [pc, #60]	@ (8004cbc <prvProcessTimerOrBlockTask+0x94>)
 8004c7e:	6818      	ldr	r0, [r3, #0]
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	683a      	ldr	r2, [r7, #0]
 8004c88:	4619      	mov	r1, r3
 8004c8a:	f7fe fe93 	bl	80039b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004c8e:	f7ff f917 	bl	8003ec0 <xTaskResumeAll>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d10a      	bne.n	8004cae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004c98:	4b09      	ldr	r3, [pc, #36]	@ (8004cc0 <prvProcessTimerOrBlockTask+0x98>)
 8004c9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c9e:	601a      	str	r2, [r3, #0]
 8004ca0:	f3bf 8f4f 	dsb	sy
 8004ca4:	f3bf 8f6f 	isb	sy
}
 8004ca8:	e001      	b.n	8004cae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004caa:	f7ff f909 	bl	8003ec0 <xTaskResumeAll>
}
 8004cae:	bf00      	nop
 8004cb0:	3710      	adds	r7, #16
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	20000d00 	.word	0x20000d00
 8004cbc:	20000d04 	.word	0x20000d04
 8004cc0:	e000ed04 	.word	0xe000ed04

08004cc4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b085      	sub	sp, #20
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004ccc:	4b0e      	ldr	r3, [pc, #56]	@ (8004d08 <prvGetNextExpireTime+0x44>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <prvGetNextExpireTime+0x16>
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	e000      	b.n	8004cdc <prvGetNextExpireTime+0x18>
 8004cda:	2200      	movs	r2, #0
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d105      	bne.n	8004cf4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ce8:	4b07      	ldr	r3, [pc, #28]	@ (8004d08 <prvGetNextExpireTime+0x44>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	60fb      	str	r3, [r7, #12]
 8004cf2:	e001      	b.n	8004cf8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3714      	adds	r7, #20
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	20000cfc 	.word	0x20000cfc

08004d0c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004d14:	f7ff f972 	bl	8003ffc <xTaskGetTickCount>
 8004d18:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8004d48 <prvSampleTimeNow+0x3c>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d205      	bcs.n	8004d30 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004d24:	f000 f93a 	bl	8004f9c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	601a      	str	r2, [r3, #0]
 8004d2e:	e002      	b.n	8004d36 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004d36:	4a04      	ldr	r2, [pc, #16]	@ (8004d48 <prvSampleTimeNow+0x3c>)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3710      	adds	r7, #16
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	20000d0c 	.word	0x20000d0c

08004d4c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b086      	sub	sp, #24
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
 8004d58:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	68ba      	ldr	r2, [r7, #8]
 8004d62:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004d6a:	68ba      	ldr	r2, [r7, #8]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d812      	bhi.n	8004d98 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	1ad2      	subs	r2, r2, r3
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d302      	bcc.n	8004d86 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004d80:	2301      	movs	r3, #1
 8004d82:	617b      	str	r3, [r7, #20]
 8004d84:	e01b      	b.n	8004dbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004d86:	4b10      	ldr	r3, [pc, #64]	@ (8004dc8 <prvInsertTimerInActiveList+0x7c>)
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	3304      	adds	r3, #4
 8004d8e:	4619      	mov	r1, r3
 8004d90:	4610      	mov	r0, r2
 8004d92:	f7fd fdb4 	bl	80028fe <vListInsert>
 8004d96:	e012      	b.n	8004dbe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d206      	bcs.n	8004dae <prvInsertTimerInActiveList+0x62>
 8004da0:	68ba      	ldr	r2, [r7, #8]
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d302      	bcc.n	8004dae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004da8:	2301      	movs	r3, #1
 8004daa:	617b      	str	r3, [r7, #20]
 8004dac:	e007      	b.n	8004dbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004dae:	4b07      	ldr	r3, [pc, #28]	@ (8004dcc <prvInsertTimerInActiveList+0x80>)
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	3304      	adds	r3, #4
 8004db6:	4619      	mov	r1, r3
 8004db8:	4610      	mov	r0, r2
 8004dba:	f7fd fda0 	bl	80028fe <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004dbe:	697b      	ldr	r3, [r7, #20]
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3718      	adds	r7, #24
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	20000d00 	.word	0x20000d00
 8004dcc:	20000cfc 	.word	0x20000cfc

08004dd0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b08e      	sub	sp, #56	@ 0x38
 8004dd4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004dd6:	e0ce      	b.n	8004f76 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	da19      	bge.n	8004e12 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004dde:	1d3b      	adds	r3, r7, #4
 8004de0:	3304      	adds	r3, #4
 8004de2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d10b      	bne.n	8004e02 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dee:	f383 8811 	msr	BASEPRI, r3
 8004df2:	f3bf 8f6f 	isb	sy
 8004df6:	f3bf 8f4f 	dsb	sy
 8004dfa:	61fb      	str	r3, [r7, #28]
}
 8004dfc:	bf00      	nop
 8004dfe:	bf00      	nop
 8004e00:	e7fd      	b.n	8004dfe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004e02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e08:	6850      	ldr	r0, [r2, #4]
 8004e0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e0c:	6892      	ldr	r2, [r2, #8]
 8004e0e:	4611      	mov	r1, r2
 8004e10:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	f2c0 80ae 	blt.w	8004f76 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d004      	beq.n	8004e30 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e28:	3304      	adds	r3, #4
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f7fd fda0 	bl	8002970 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004e30:	463b      	mov	r3, r7
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7ff ff6a 	bl	8004d0c <prvSampleTimeNow>
 8004e38:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2b09      	cmp	r3, #9
 8004e3e:	f200 8097 	bhi.w	8004f70 <prvProcessReceivedCommands+0x1a0>
 8004e42:	a201      	add	r2, pc, #4	@ (adr r2, 8004e48 <prvProcessReceivedCommands+0x78>)
 8004e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e48:	08004e71 	.word	0x08004e71
 8004e4c:	08004e71 	.word	0x08004e71
 8004e50:	08004e71 	.word	0x08004e71
 8004e54:	08004ee7 	.word	0x08004ee7
 8004e58:	08004efb 	.word	0x08004efb
 8004e5c:	08004f47 	.word	0x08004f47
 8004e60:	08004e71 	.word	0x08004e71
 8004e64:	08004e71 	.word	0x08004e71
 8004e68:	08004ee7 	.word	0x08004ee7
 8004e6c:	08004efb 	.word	0x08004efb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e72:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004e76:	f043 0301 	orr.w	r3, r3, #1
 8004e7a:	b2da      	uxtb	r2, r3
 8004e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e7e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004e82:	68ba      	ldr	r2, [r7, #8]
 8004e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	18d1      	adds	r1, r2, r3
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e90:	f7ff ff5c 	bl	8004d4c <prvInsertTimerInActiveList>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d06c      	beq.n	8004f74 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e9c:	6a1b      	ldr	r3, [r3, #32]
 8004e9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ea0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ea4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ea8:	f003 0304 	and.w	r3, r3, #4
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d061      	beq.n	8004f74 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004eb0:	68ba      	ldr	r2, [r7, #8]
 8004eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	441a      	add	r2, r3
 8004eb8:	2300      	movs	r3, #0
 8004eba:	9300      	str	r3, [sp, #0]
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	2100      	movs	r1, #0
 8004ec0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ec2:	f7ff fe01 	bl	8004ac8 <xTimerGenericCommand>
 8004ec6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004ec8:	6a3b      	ldr	r3, [r7, #32]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d152      	bne.n	8004f74 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ed2:	f383 8811 	msr	BASEPRI, r3
 8004ed6:	f3bf 8f6f 	isb	sy
 8004eda:	f3bf 8f4f 	dsb	sy
 8004ede:	61bb      	str	r3, [r7, #24]
}
 8004ee0:	bf00      	nop
 8004ee2:	bf00      	nop
 8004ee4:	e7fd      	b.n	8004ee2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ee8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004eec:	f023 0301 	bic.w	r3, r3, #1
 8004ef0:	b2da      	uxtb	r2, r3
 8004ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ef4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004ef8:	e03d      	b.n	8004f76 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004efc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004f00:	f043 0301 	orr.w	r3, r3, #1
 8004f04:	b2da      	uxtb	r2, r3
 8004f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f08:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004f0c:	68ba      	ldr	r2, [r7, #8]
 8004f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f10:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10b      	bne.n	8004f32 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004f1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f1e:	f383 8811 	msr	BASEPRI, r3
 8004f22:	f3bf 8f6f 	isb	sy
 8004f26:	f3bf 8f4f 	dsb	sy
 8004f2a:	617b      	str	r3, [r7, #20]
}
 8004f2c:	bf00      	nop
 8004f2e:	bf00      	nop
 8004f30:	e7fd      	b.n	8004f2e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f34:	699a      	ldr	r2, [r3, #24]
 8004f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f38:	18d1      	adds	r1, r2, r3
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f40:	f7ff ff04 	bl	8004d4c <prvInsertTimerInActiveList>
					break;
 8004f44:	e017      	b.n	8004f76 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004f4c:	f003 0302 	and.w	r3, r3, #2
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d103      	bne.n	8004f5c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004f54:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f56:	f000 fbe7 	bl	8005728 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004f5a:	e00c      	b.n	8004f76 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f5e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004f62:	f023 0301 	bic.w	r3, r3, #1
 8004f66:	b2da      	uxtb	r2, r3
 8004f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f6a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004f6e:	e002      	b.n	8004f76 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004f70:	bf00      	nop
 8004f72:	e000      	b.n	8004f76 <prvProcessReceivedCommands+0x1a6>
					break;
 8004f74:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004f76:	4b08      	ldr	r3, [pc, #32]	@ (8004f98 <prvProcessReceivedCommands+0x1c8>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	1d39      	adds	r1, r7, #4
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7fe f904 	bl	800318c <xQueueReceive>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	f47f af26 	bne.w	8004dd8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004f8c:	bf00      	nop
 8004f8e:	bf00      	nop
 8004f90:	3730      	adds	r7, #48	@ 0x30
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	20000d04 	.word	0x20000d04

08004f9c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b088      	sub	sp, #32
 8004fa0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004fa2:	e049      	b.n	8005038 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004fa4:	4b2e      	ldr	r3, [pc, #184]	@ (8005060 <prvSwitchTimerLists+0xc4>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fae:	4b2c      	ldr	r3, [pc, #176]	@ (8005060 <prvSwitchTimerLists+0xc4>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	3304      	adds	r3, #4
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f7fd fcd7 	bl	8002970 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	68f8      	ldr	r0, [r7, #12]
 8004fc8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004fd0:	f003 0304 	and.w	r3, r3, #4
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d02f      	beq.n	8005038 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	699b      	ldr	r3, [r3, #24]
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	4413      	add	r3, r2
 8004fe0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004fe2:	68ba      	ldr	r2, [r7, #8]
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d90e      	bls.n	8005008 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	68ba      	ldr	r2, [r7, #8]
 8004fee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ff6:	4b1a      	ldr	r3, [pc, #104]	@ (8005060 <prvSwitchTimerLists+0xc4>)
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	3304      	adds	r3, #4
 8004ffe:	4619      	mov	r1, r3
 8005000:	4610      	mov	r0, r2
 8005002:	f7fd fc7c 	bl	80028fe <vListInsert>
 8005006:	e017      	b.n	8005038 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005008:	2300      	movs	r3, #0
 800500a:	9300      	str	r3, [sp, #0]
 800500c:	2300      	movs	r3, #0
 800500e:	693a      	ldr	r2, [r7, #16]
 8005010:	2100      	movs	r1, #0
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	f7ff fd58 	bl	8004ac8 <xTimerGenericCommand>
 8005018:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d10b      	bne.n	8005038 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005024:	f383 8811 	msr	BASEPRI, r3
 8005028:	f3bf 8f6f 	isb	sy
 800502c:	f3bf 8f4f 	dsb	sy
 8005030:	603b      	str	r3, [r7, #0]
}
 8005032:	bf00      	nop
 8005034:	bf00      	nop
 8005036:	e7fd      	b.n	8005034 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005038:	4b09      	ldr	r3, [pc, #36]	@ (8005060 <prvSwitchTimerLists+0xc4>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1b0      	bne.n	8004fa4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005042:	4b07      	ldr	r3, [pc, #28]	@ (8005060 <prvSwitchTimerLists+0xc4>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005048:	4b06      	ldr	r3, [pc, #24]	@ (8005064 <prvSwitchTimerLists+0xc8>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a04      	ldr	r2, [pc, #16]	@ (8005060 <prvSwitchTimerLists+0xc4>)
 800504e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005050:	4a04      	ldr	r2, [pc, #16]	@ (8005064 <prvSwitchTimerLists+0xc8>)
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	6013      	str	r3, [r2, #0]
}
 8005056:	bf00      	nop
 8005058:	3718      	adds	r7, #24
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	20000cfc 	.word	0x20000cfc
 8005064:	20000d00 	.word	0x20000d00

08005068 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800506e:	f000 f96b 	bl	8005348 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005072:	4b15      	ldr	r3, [pc, #84]	@ (80050c8 <prvCheckForValidListAndQueue+0x60>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d120      	bne.n	80050bc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800507a:	4814      	ldr	r0, [pc, #80]	@ (80050cc <prvCheckForValidListAndQueue+0x64>)
 800507c:	f7fd fbee 	bl	800285c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005080:	4813      	ldr	r0, [pc, #76]	@ (80050d0 <prvCheckForValidListAndQueue+0x68>)
 8005082:	f7fd fbeb 	bl	800285c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005086:	4b13      	ldr	r3, [pc, #76]	@ (80050d4 <prvCheckForValidListAndQueue+0x6c>)
 8005088:	4a10      	ldr	r2, [pc, #64]	@ (80050cc <prvCheckForValidListAndQueue+0x64>)
 800508a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800508c:	4b12      	ldr	r3, [pc, #72]	@ (80050d8 <prvCheckForValidListAndQueue+0x70>)
 800508e:	4a10      	ldr	r2, [pc, #64]	@ (80050d0 <prvCheckForValidListAndQueue+0x68>)
 8005090:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005092:	2300      	movs	r3, #0
 8005094:	9300      	str	r3, [sp, #0]
 8005096:	4b11      	ldr	r3, [pc, #68]	@ (80050dc <prvCheckForValidListAndQueue+0x74>)
 8005098:	4a11      	ldr	r2, [pc, #68]	@ (80050e0 <prvCheckForValidListAndQueue+0x78>)
 800509a:	2110      	movs	r1, #16
 800509c:	200a      	movs	r0, #10
 800509e:	f7fd fcfb 	bl	8002a98 <xQueueGenericCreateStatic>
 80050a2:	4603      	mov	r3, r0
 80050a4:	4a08      	ldr	r2, [pc, #32]	@ (80050c8 <prvCheckForValidListAndQueue+0x60>)
 80050a6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80050a8:	4b07      	ldr	r3, [pc, #28]	@ (80050c8 <prvCheckForValidListAndQueue+0x60>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d005      	beq.n	80050bc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80050b0:	4b05      	ldr	r3, [pc, #20]	@ (80050c8 <prvCheckForValidListAndQueue+0x60>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	490b      	ldr	r1, [pc, #44]	@ (80050e4 <prvCheckForValidListAndQueue+0x7c>)
 80050b6:	4618      	mov	r0, r3
 80050b8:	f7fe fc28 	bl	800390c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80050bc:	f000 f976 	bl	80053ac <vPortExitCritical>
}
 80050c0:	bf00      	nop
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	20000d04 	.word	0x20000d04
 80050cc:	20000cd4 	.word	0x20000cd4
 80050d0:	20000ce8 	.word	0x20000ce8
 80050d4:	20000cfc 	.word	0x20000cfc
 80050d8:	20000d00 	.word	0x20000d00
 80050dc:	20000db0 	.word	0x20000db0
 80050e0:	20000d10 	.word	0x20000d10
 80050e4:	08005a4c 	.word	0x08005a4c

080050e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80050e8:	b480      	push	{r7}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	3b04      	subs	r3, #4
 80050f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005100:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	3b04      	subs	r3, #4
 8005106:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	f023 0201 	bic.w	r2, r3, #1
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	3b04      	subs	r3, #4
 8005116:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005118:	4a0c      	ldr	r2, [pc, #48]	@ (800514c <pxPortInitialiseStack+0x64>)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	3b14      	subs	r3, #20
 8005122:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	3b04      	subs	r3, #4
 800512e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f06f 0202 	mvn.w	r2, #2
 8005136:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	3b20      	subs	r3, #32
 800513c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800513e:	68fb      	ldr	r3, [r7, #12]
}
 8005140:	4618      	mov	r0, r3
 8005142:	3714      	adds	r7, #20
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr
 800514c:	08005151 	.word	0x08005151

08005150 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005156:	2300      	movs	r3, #0
 8005158:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800515a:	4b13      	ldr	r3, [pc, #76]	@ (80051a8 <prvTaskExitError+0x58>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005162:	d00b      	beq.n	800517c <prvTaskExitError+0x2c>
	__asm volatile
 8005164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005168:	f383 8811 	msr	BASEPRI, r3
 800516c:	f3bf 8f6f 	isb	sy
 8005170:	f3bf 8f4f 	dsb	sy
 8005174:	60fb      	str	r3, [r7, #12]
}
 8005176:	bf00      	nop
 8005178:	bf00      	nop
 800517a:	e7fd      	b.n	8005178 <prvTaskExitError+0x28>
	__asm volatile
 800517c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005180:	f383 8811 	msr	BASEPRI, r3
 8005184:	f3bf 8f6f 	isb	sy
 8005188:	f3bf 8f4f 	dsb	sy
 800518c:	60bb      	str	r3, [r7, #8]
}
 800518e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005190:	bf00      	nop
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d0fc      	beq.n	8005192 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005198:	bf00      	nop
 800519a:	bf00      	nop
 800519c:	3714      	adds	r7, #20
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	20000010 	.word	0x20000010
 80051ac:	00000000 	.word	0x00000000

080051b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80051b0:	4b07      	ldr	r3, [pc, #28]	@ (80051d0 <pxCurrentTCBConst2>)
 80051b2:	6819      	ldr	r1, [r3, #0]
 80051b4:	6808      	ldr	r0, [r1, #0]
 80051b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051ba:	f380 8809 	msr	PSP, r0
 80051be:	f3bf 8f6f 	isb	sy
 80051c2:	f04f 0000 	mov.w	r0, #0
 80051c6:	f380 8811 	msr	BASEPRI, r0
 80051ca:	4770      	bx	lr
 80051cc:	f3af 8000 	nop.w

080051d0 <pxCurrentTCBConst2>:
 80051d0:	200007d4 	.word	0x200007d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80051d4:	bf00      	nop
 80051d6:	bf00      	nop

080051d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80051d8:	4808      	ldr	r0, [pc, #32]	@ (80051fc <prvPortStartFirstTask+0x24>)
 80051da:	6800      	ldr	r0, [r0, #0]
 80051dc:	6800      	ldr	r0, [r0, #0]
 80051de:	f380 8808 	msr	MSP, r0
 80051e2:	f04f 0000 	mov.w	r0, #0
 80051e6:	f380 8814 	msr	CONTROL, r0
 80051ea:	b662      	cpsie	i
 80051ec:	b661      	cpsie	f
 80051ee:	f3bf 8f4f 	dsb	sy
 80051f2:	f3bf 8f6f 	isb	sy
 80051f6:	df00      	svc	0
 80051f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80051fa:	bf00      	nop
 80051fc:	e000ed08 	.word	0xe000ed08

08005200 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b086      	sub	sp, #24
 8005204:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005206:	4b47      	ldr	r3, [pc, #284]	@ (8005324 <xPortStartScheduler+0x124>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a47      	ldr	r2, [pc, #284]	@ (8005328 <xPortStartScheduler+0x128>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d10b      	bne.n	8005228 <xPortStartScheduler+0x28>
	__asm volatile
 8005210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005214:	f383 8811 	msr	BASEPRI, r3
 8005218:	f3bf 8f6f 	isb	sy
 800521c:	f3bf 8f4f 	dsb	sy
 8005220:	613b      	str	r3, [r7, #16]
}
 8005222:	bf00      	nop
 8005224:	bf00      	nop
 8005226:	e7fd      	b.n	8005224 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005228:	4b3e      	ldr	r3, [pc, #248]	@ (8005324 <xPortStartScheduler+0x124>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a3f      	ldr	r2, [pc, #252]	@ (800532c <xPortStartScheduler+0x12c>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d10b      	bne.n	800524a <xPortStartScheduler+0x4a>
	__asm volatile
 8005232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005236:	f383 8811 	msr	BASEPRI, r3
 800523a:	f3bf 8f6f 	isb	sy
 800523e:	f3bf 8f4f 	dsb	sy
 8005242:	60fb      	str	r3, [r7, #12]
}
 8005244:	bf00      	nop
 8005246:	bf00      	nop
 8005248:	e7fd      	b.n	8005246 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800524a:	4b39      	ldr	r3, [pc, #228]	@ (8005330 <xPortStartScheduler+0x130>)
 800524c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	b2db      	uxtb	r3, r3
 8005254:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	22ff      	movs	r2, #255	@ 0xff
 800525a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	b2db      	uxtb	r3, r3
 8005262:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005264:	78fb      	ldrb	r3, [r7, #3]
 8005266:	b2db      	uxtb	r3, r3
 8005268:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800526c:	b2da      	uxtb	r2, r3
 800526e:	4b31      	ldr	r3, [pc, #196]	@ (8005334 <xPortStartScheduler+0x134>)
 8005270:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005272:	4b31      	ldr	r3, [pc, #196]	@ (8005338 <xPortStartScheduler+0x138>)
 8005274:	2207      	movs	r2, #7
 8005276:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005278:	e009      	b.n	800528e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800527a:	4b2f      	ldr	r3, [pc, #188]	@ (8005338 <xPortStartScheduler+0x138>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	3b01      	subs	r3, #1
 8005280:	4a2d      	ldr	r2, [pc, #180]	@ (8005338 <xPortStartScheduler+0x138>)
 8005282:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005284:	78fb      	ldrb	r3, [r7, #3]
 8005286:	b2db      	uxtb	r3, r3
 8005288:	005b      	lsls	r3, r3, #1
 800528a:	b2db      	uxtb	r3, r3
 800528c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800528e:	78fb      	ldrb	r3, [r7, #3]
 8005290:	b2db      	uxtb	r3, r3
 8005292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005296:	2b80      	cmp	r3, #128	@ 0x80
 8005298:	d0ef      	beq.n	800527a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800529a:	4b27      	ldr	r3, [pc, #156]	@ (8005338 <xPortStartScheduler+0x138>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f1c3 0307 	rsb	r3, r3, #7
 80052a2:	2b04      	cmp	r3, #4
 80052a4:	d00b      	beq.n	80052be <xPortStartScheduler+0xbe>
	__asm volatile
 80052a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052aa:	f383 8811 	msr	BASEPRI, r3
 80052ae:	f3bf 8f6f 	isb	sy
 80052b2:	f3bf 8f4f 	dsb	sy
 80052b6:	60bb      	str	r3, [r7, #8]
}
 80052b8:	bf00      	nop
 80052ba:	bf00      	nop
 80052bc:	e7fd      	b.n	80052ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80052be:	4b1e      	ldr	r3, [pc, #120]	@ (8005338 <xPortStartScheduler+0x138>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	021b      	lsls	r3, r3, #8
 80052c4:	4a1c      	ldr	r2, [pc, #112]	@ (8005338 <xPortStartScheduler+0x138>)
 80052c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80052c8:	4b1b      	ldr	r3, [pc, #108]	@ (8005338 <xPortStartScheduler+0x138>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80052d0:	4a19      	ldr	r2, [pc, #100]	@ (8005338 <xPortStartScheduler+0x138>)
 80052d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	b2da      	uxtb	r2, r3
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80052dc:	4b17      	ldr	r3, [pc, #92]	@ (800533c <xPortStartScheduler+0x13c>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a16      	ldr	r2, [pc, #88]	@ (800533c <xPortStartScheduler+0x13c>)
 80052e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80052e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80052e8:	4b14      	ldr	r3, [pc, #80]	@ (800533c <xPortStartScheduler+0x13c>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a13      	ldr	r2, [pc, #76]	@ (800533c <xPortStartScheduler+0x13c>)
 80052ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80052f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80052f4:	f000 f8da 	bl	80054ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80052f8:	4b11      	ldr	r3, [pc, #68]	@ (8005340 <xPortStartScheduler+0x140>)
 80052fa:	2200      	movs	r2, #0
 80052fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80052fe:	f000 f8f9 	bl	80054f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005302:	4b10      	ldr	r3, [pc, #64]	@ (8005344 <xPortStartScheduler+0x144>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a0f      	ldr	r2, [pc, #60]	@ (8005344 <xPortStartScheduler+0x144>)
 8005308:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800530c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800530e:	f7ff ff63 	bl	80051d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005312:	f7fe ff3d 	bl	8004190 <vTaskSwitchContext>
	prvTaskExitError();
 8005316:	f7ff ff1b 	bl	8005150 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800531a:	2300      	movs	r3, #0
}
 800531c:	4618      	mov	r0, r3
 800531e:	3718      	adds	r7, #24
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	e000ed00 	.word	0xe000ed00
 8005328:	410fc271 	.word	0x410fc271
 800532c:	410fc270 	.word	0x410fc270
 8005330:	e000e400 	.word	0xe000e400
 8005334:	20000e00 	.word	0x20000e00
 8005338:	20000e04 	.word	0x20000e04
 800533c:	e000ed20 	.word	0xe000ed20
 8005340:	20000010 	.word	0x20000010
 8005344:	e000ef34 	.word	0xe000ef34

08005348 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
	__asm volatile
 800534e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005352:	f383 8811 	msr	BASEPRI, r3
 8005356:	f3bf 8f6f 	isb	sy
 800535a:	f3bf 8f4f 	dsb	sy
 800535e:	607b      	str	r3, [r7, #4]
}
 8005360:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005362:	4b10      	ldr	r3, [pc, #64]	@ (80053a4 <vPortEnterCritical+0x5c>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	3301      	adds	r3, #1
 8005368:	4a0e      	ldr	r2, [pc, #56]	@ (80053a4 <vPortEnterCritical+0x5c>)
 800536a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800536c:	4b0d      	ldr	r3, [pc, #52]	@ (80053a4 <vPortEnterCritical+0x5c>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2b01      	cmp	r3, #1
 8005372:	d110      	bne.n	8005396 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005374:	4b0c      	ldr	r3, [pc, #48]	@ (80053a8 <vPortEnterCritical+0x60>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	b2db      	uxtb	r3, r3
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00b      	beq.n	8005396 <vPortEnterCritical+0x4e>
	__asm volatile
 800537e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005382:	f383 8811 	msr	BASEPRI, r3
 8005386:	f3bf 8f6f 	isb	sy
 800538a:	f3bf 8f4f 	dsb	sy
 800538e:	603b      	str	r3, [r7, #0]
}
 8005390:	bf00      	nop
 8005392:	bf00      	nop
 8005394:	e7fd      	b.n	8005392 <vPortEnterCritical+0x4a>
	}
}
 8005396:	bf00      	nop
 8005398:	370c      	adds	r7, #12
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop
 80053a4:	20000010 	.word	0x20000010
 80053a8:	e000ed04 	.word	0xe000ed04

080053ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80053b2:	4b12      	ldr	r3, [pc, #72]	@ (80053fc <vPortExitCritical+0x50>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10b      	bne.n	80053d2 <vPortExitCritical+0x26>
	__asm volatile
 80053ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053be:	f383 8811 	msr	BASEPRI, r3
 80053c2:	f3bf 8f6f 	isb	sy
 80053c6:	f3bf 8f4f 	dsb	sy
 80053ca:	607b      	str	r3, [r7, #4]
}
 80053cc:	bf00      	nop
 80053ce:	bf00      	nop
 80053d0:	e7fd      	b.n	80053ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80053d2:	4b0a      	ldr	r3, [pc, #40]	@ (80053fc <vPortExitCritical+0x50>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	3b01      	subs	r3, #1
 80053d8:	4a08      	ldr	r2, [pc, #32]	@ (80053fc <vPortExitCritical+0x50>)
 80053da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80053dc:	4b07      	ldr	r3, [pc, #28]	@ (80053fc <vPortExitCritical+0x50>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d105      	bne.n	80053f0 <vPortExitCritical+0x44>
 80053e4:	2300      	movs	r3, #0
 80053e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	f383 8811 	msr	BASEPRI, r3
}
 80053ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80053f0:	bf00      	nop
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr
 80053fc:	20000010 	.word	0x20000010

08005400 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005400:	f3ef 8009 	mrs	r0, PSP
 8005404:	f3bf 8f6f 	isb	sy
 8005408:	4b15      	ldr	r3, [pc, #84]	@ (8005460 <pxCurrentTCBConst>)
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	f01e 0f10 	tst.w	lr, #16
 8005410:	bf08      	it	eq
 8005412:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005416:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800541a:	6010      	str	r0, [r2, #0]
 800541c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005420:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005424:	f380 8811 	msr	BASEPRI, r0
 8005428:	f3bf 8f4f 	dsb	sy
 800542c:	f3bf 8f6f 	isb	sy
 8005430:	f7fe feae 	bl	8004190 <vTaskSwitchContext>
 8005434:	f04f 0000 	mov.w	r0, #0
 8005438:	f380 8811 	msr	BASEPRI, r0
 800543c:	bc09      	pop	{r0, r3}
 800543e:	6819      	ldr	r1, [r3, #0]
 8005440:	6808      	ldr	r0, [r1, #0]
 8005442:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005446:	f01e 0f10 	tst.w	lr, #16
 800544a:	bf08      	it	eq
 800544c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005450:	f380 8809 	msr	PSP, r0
 8005454:	f3bf 8f6f 	isb	sy
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	f3af 8000 	nop.w

08005460 <pxCurrentTCBConst>:
 8005460:	200007d4 	.word	0x200007d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005464:	bf00      	nop
 8005466:	bf00      	nop

08005468 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
	__asm volatile
 800546e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005472:	f383 8811 	msr	BASEPRI, r3
 8005476:	f3bf 8f6f 	isb	sy
 800547a:	f3bf 8f4f 	dsb	sy
 800547e:	607b      	str	r3, [r7, #4]
}
 8005480:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005482:	f7fe fdcb 	bl	800401c <xTaskIncrementTick>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d003      	beq.n	8005494 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800548c:	4b06      	ldr	r3, [pc, #24]	@ (80054a8 <xPortSysTickHandler+0x40>)
 800548e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005492:	601a      	str	r2, [r3, #0]
 8005494:	2300      	movs	r3, #0
 8005496:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	f383 8811 	msr	BASEPRI, r3
}
 800549e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80054a0:	bf00      	nop
 80054a2:	3708      	adds	r7, #8
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	e000ed04 	.word	0xe000ed04

080054ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80054ac:	b480      	push	{r7}
 80054ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80054b0:	4b0b      	ldr	r3, [pc, #44]	@ (80054e0 <vPortSetupTimerInterrupt+0x34>)
 80054b2:	2200      	movs	r2, #0
 80054b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80054b6:	4b0b      	ldr	r3, [pc, #44]	@ (80054e4 <vPortSetupTimerInterrupt+0x38>)
 80054b8:	2200      	movs	r2, #0
 80054ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80054bc:	4b0a      	ldr	r3, [pc, #40]	@ (80054e8 <vPortSetupTimerInterrupt+0x3c>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a0a      	ldr	r2, [pc, #40]	@ (80054ec <vPortSetupTimerInterrupt+0x40>)
 80054c2:	fba2 2303 	umull	r2, r3, r2, r3
 80054c6:	099b      	lsrs	r3, r3, #6
 80054c8:	4a09      	ldr	r2, [pc, #36]	@ (80054f0 <vPortSetupTimerInterrupt+0x44>)
 80054ca:	3b01      	subs	r3, #1
 80054cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80054ce:	4b04      	ldr	r3, [pc, #16]	@ (80054e0 <vPortSetupTimerInterrupt+0x34>)
 80054d0:	2207      	movs	r2, #7
 80054d2:	601a      	str	r2, [r3, #0]
}
 80054d4:	bf00      	nop
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	e000e010 	.word	0xe000e010
 80054e4:	e000e018 	.word	0xe000e018
 80054e8:	20000004 	.word	0x20000004
 80054ec:	10624dd3 	.word	0x10624dd3
 80054f0:	e000e014 	.word	0xe000e014

080054f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80054f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005504 <vPortEnableVFP+0x10>
 80054f8:	6801      	ldr	r1, [r0, #0]
 80054fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80054fe:	6001      	str	r1, [r0, #0]
 8005500:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005502:	bf00      	nop
 8005504:	e000ed88 	.word	0xe000ed88

08005508 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005508:	b480      	push	{r7}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800550e:	f3ef 8305 	mrs	r3, IPSR
 8005512:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2b0f      	cmp	r3, #15
 8005518:	d915      	bls.n	8005546 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800551a:	4a18      	ldr	r2, [pc, #96]	@ (800557c <vPortValidateInterruptPriority+0x74>)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	4413      	add	r3, r2
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005524:	4b16      	ldr	r3, [pc, #88]	@ (8005580 <vPortValidateInterruptPriority+0x78>)
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	7afa      	ldrb	r2, [r7, #11]
 800552a:	429a      	cmp	r2, r3
 800552c:	d20b      	bcs.n	8005546 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800552e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005532:	f383 8811 	msr	BASEPRI, r3
 8005536:	f3bf 8f6f 	isb	sy
 800553a:	f3bf 8f4f 	dsb	sy
 800553e:	607b      	str	r3, [r7, #4]
}
 8005540:	bf00      	nop
 8005542:	bf00      	nop
 8005544:	e7fd      	b.n	8005542 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005546:	4b0f      	ldr	r3, [pc, #60]	@ (8005584 <vPortValidateInterruptPriority+0x7c>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800554e:	4b0e      	ldr	r3, [pc, #56]	@ (8005588 <vPortValidateInterruptPriority+0x80>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	429a      	cmp	r2, r3
 8005554:	d90b      	bls.n	800556e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800555a:	f383 8811 	msr	BASEPRI, r3
 800555e:	f3bf 8f6f 	isb	sy
 8005562:	f3bf 8f4f 	dsb	sy
 8005566:	603b      	str	r3, [r7, #0]
}
 8005568:	bf00      	nop
 800556a:	bf00      	nop
 800556c:	e7fd      	b.n	800556a <vPortValidateInterruptPriority+0x62>
	}
 800556e:	bf00      	nop
 8005570:	3714      	adds	r7, #20
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	e000e3f0 	.word	0xe000e3f0
 8005580:	20000e00 	.word	0x20000e00
 8005584:	e000ed0c 	.word	0xe000ed0c
 8005588:	20000e04 	.word	0x20000e04

0800558c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b08a      	sub	sp, #40	@ 0x28
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005594:	2300      	movs	r3, #0
 8005596:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005598:	f7fe fc84 	bl	8003ea4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800559c:	4b5c      	ldr	r3, [pc, #368]	@ (8005710 <pvPortMalloc+0x184>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d101      	bne.n	80055a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80055a4:	f000 f924 	bl	80057f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80055a8:	4b5a      	ldr	r3, [pc, #360]	@ (8005714 <pvPortMalloc+0x188>)
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4013      	ands	r3, r2
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	f040 8095 	bne.w	80056e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d01e      	beq.n	80055fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80055bc:	2208      	movs	r2, #8
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4413      	add	r3, r2
 80055c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f003 0307 	and.w	r3, r3, #7
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d015      	beq.n	80055fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f023 0307 	bic.w	r3, r3, #7
 80055d4:	3308      	adds	r3, #8
 80055d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f003 0307 	and.w	r3, r3, #7
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00b      	beq.n	80055fa <pvPortMalloc+0x6e>
	__asm volatile
 80055e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055e6:	f383 8811 	msr	BASEPRI, r3
 80055ea:	f3bf 8f6f 	isb	sy
 80055ee:	f3bf 8f4f 	dsb	sy
 80055f2:	617b      	str	r3, [r7, #20]
}
 80055f4:	bf00      	nop
 80055f6:	bf00      	nop
 80055f8:	e7fd      	b.n	80055f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d06f      	beq.n	80056e0 <pvPortMalloc+0x154>
 8005600:	4b45      	ldr	r3, [pc, #276]	@ (8005718 <pvPortMalloc+0x18c>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	429a      	cmp	r2, r3
 8005608:	d86a      	bhi.n	80056e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800560a:	4b44      	ldr	r3, [pc, #272]	@ (800571c <pvPortMalloc+0x190>)
 800560c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800560e:	4b43      	ldr	r3, [pc, #268]	@ (800571c <pvPortMalloc+0x190>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005614:	e004      	b.n	8005620 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005618:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800561a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	429a      	cmp	r2, r3
 8005628:	d903      	bls.n	8005632 <pvPortMalloc+0xa6>
 800562a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d1f1      	bne.n	8005616 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005632:	4b37      	ldr	r3, [pc, #220]	@ (8005710 <pvPortMalloc+0x184>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005638:	429a      	cmp	r2, r3
 800563a:	d051      	beq.n	80056e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800563c:	6a3b      	ldr	r3, [r7, #32]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2208      	movs	r2, #8
 8005642:	4413      	add	r3, r2
 8005644:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	6a3b      	ldr	r3, [r7, #32]
 800564c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800564e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005650:	685a      	ldr	r2, [r3, #4]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	1ad2      	subs	r2, r2, r3
 8005656:	2308      	movs	r3, #8
 8005658:	005b      	lsls	r3, r3, #1
 800565a:	429a      	cmp	r2, r3
 800565c:	d920      	bls.n	80056a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800565e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4413      	add	r3, r2
 8005664:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	f003 0307 	and.w	r3, r3, #7
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00b      	beq.n	8005688 <pvPortMalloc+0xfc>
	__asm volatile
 8005670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005674:	f383 8811 	msr	BASEPRI, r3
 8005678:	f3bf 8f6f 	isb	sy
 800567c:	f3bf 8f4f 	dsb	sy
 8005680:	613b      	str	r3, [r7, #16]
}
 8005682:	bf00      	nop
 8005684:	bf00      	nop
 8005686:	e7fd      	b.n	8005684 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800568a:	685a      	ldr	r2, [r3, #4]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	1ad2      	subs	r2, r2, r3
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800569a:	69b8      	ldr	r0, [r7, #24]
 800569c:	f000 f90a 	bl	80058b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80056a0:	4b1d      	ldr	r3, [pc, #116]	@ (8005718 <pvPortMalloc+0x18c>)
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	4a1b      	ldr	r2, [pc, #108]	@ (8005718 <pvPortMalloc+0x18c>)
 80056ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80056ae:	4b1a      	ldr	r3, [pc, #104]	@ (8005718 <pvPortMalloc+0x18c>)
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	4b1b      	ldr	r3, [pc, #108]	@ (8005720 <pvPortMalloc+0x194>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d203      	bcs.n	80056c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80056ba:	4b17      	ldr	r3, [pc, #92]	@ (8005718 <pvPortMalloc+0x18c>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a18      	ldr	r2, [pc, #96]	@ (8005720 <pvPortMalloc+0x194>)
 80056c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80056c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c4:	685a      	ldr	r2, [r3, #4]
 80056c6:	4b13      	ldr	r3, [pc, #76]	@ (8005714 <pvPortMalloc+0x188>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	431a      	orrs	r2, r3
 80056cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80056d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d2:	2200      	movs	r2, #0
 80056d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80056d6:	4b13      	ldr	r3, [pc, #76]	@ (8005724 <pvPortMalloc+0x198>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	3301      	adds	r3, #1
 80056dc:	4a11      	ldr	r2, [pc, #68]	@ (8005724 <pvPortMalloc+0x198>)
 80056de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80056e0:	f7fe fbee 	bl	8003ec0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	f003 0307 	and.w	r3, r3, #7
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d00b      	beq.n	8005706 <pvPortMalloc+0x17a>
	__asm volatile
 80056ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056f2:	f383 8811 	msr	BASEPRI, r3
 80056f6:	f3bf 8f6f 	isb	sy
 80056fa:	f3bf 8f4f 	dsb	sy
 80056fe:	60fb      	str	r3, [r7, #12]
}
 8005700:	bf00      	nop
 8005702:	bf00      	nop
 8005704:	e7fd      	b.n	8005702 <pvPortMalloc+0x176>
	return pvReturn;
 8005706:	69fb      	ldr	r3, [r7, #28]
}
 8005708:	4618      	mov	r0, r3
 800570a:	3728      	adds	r7, #40	@ 0x28
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}
 8005710:	20004a10 	.word	0x20004a10
 8005714:	20004a24 	.word	0x20004a24
 8005718:	20004a14 	.word	0x20004a14
 800571c:	20004a08 	.word	0x20004a08
 8005720:	20004a18 	.word	0x20004a18
 8005724:	20004a1c 	.word	0x20004a1c

08005728 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b086      	sub	sp, #24
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d04f      	beq.n	80057da <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800573a:	2308      	movs	r3, #8
 800573c:	425b      	negs	r3, r3
 800573e:	697a      	ldr	r2, [r7, #20]
 8005740:	4413      	add	r3, r2
 8005742:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	685a      	ldr	r2, [r3, #4]
 800574c:	4b25      	ldr	r3, [pc, #148]	@ (80057e4 <vPortFree+0xbc>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4013      	ands	r3, r2
 8005752:	2b00      	cmp	r3, #0
 8005754:	d10b      	bne.n	800576e <vPortFree+0x46>
	__asm volatile
 8005756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800575a:	f383 8811 	msr	BASEPRI, r3
 800575e:	f3bf 8f6f 	isb	sy
 8005762:	f3bf 8f4f 	dsb	sy
 8005766:	60fb      	str	r3, [r7, #12]
}
 8005768:	bf00      	nop
 800576a:	bf00      	nop
 800576c:	e7fd      	b.n	800576a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d00b      	beq.n	800578e <vPortFree+0x66>
	__asm volatile
 8005776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800577a:	f383 8811 	msr	BASEPRI, r3
 800577e:	f3bf 8f6f 	isb	sy
 8005782:	f3bf 8f4f 	dsb	sy
 8005786:	60bb      	str	r3, [r7, #8]
}
 8005788:	bf00      	nop
 800578a:	bf00      	nop
 800578c:	e7fd      	b.n	800578a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	685a      	ldr	r2, [r3, #4]
 8005792:	4b14      	ldr	r3, [pc, #80]	@ (80057e4 <vPortFree+0xbc>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4013      	ands	r3, r2
 8005798:	2b00      	cmp	r3, #0
 800579a:	d01e      	beq.n	80057da <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d11a      	bne.n	80057da <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	685a      	ldr	r2, [r3, #4]
 80057a8:	4b0e      	ldr	r3, [pc, #56]	@ (80057e4 <vPortFree+0xbc>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	43db      	mvns	r3, r3
 80057ae:	401a      	ands	r2, r3
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80057b4:	f7fe fb76 	bl	8003ea4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	685a      	ldr	r2, [r3, #4]
 80057bc:	4b0a      	ldr	r3, [pc, #40]	@ (80057e8 <vPortFree+0xc0>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4413      	add	r3, r2
 80057c2:	4a09      	ldr	r2, [pc, #36]	@ (80057e8 <vPortFree+0xc0>)
 80057c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80057c6:	6938      	ldr	r0, [r7, #16]
 80057c8:	f000 f874 	bl	80058b4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80057cc:	4b07      	ldr	r3, [pc, #28]	@ (80057ec <vPortFree+0xc4>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	3301      	adds	r3, #1
 80057d2:	4a06      	ldr	r2, [pc, #24]	@ (80057ec <vPortFree+0xc4>)
 80057d4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80057d6:	f7fe fb73 	bl	8003ec0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80057da:	bf00      	nop
 80057dc:	3718      	adds	r7, #24
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	20004a24 	.word	0x20004a24
 80057e8:	20004a14 	.word	0x20004a14
 80057ec:	20004a20 	.word	0x20004a20

080057f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80057f6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80057fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80057fc:	4b27      	ldr	r3, [pc, #156]	@ (800589c <prvHeapInit+0xac>)
 80057fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f003 0307 	and.w	r3, r3, #7
 8005806:	2b00      	cmp	r3, #0
 8005808:	d00c      	beq.n	8005824 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	3307      	adds	r3, #7
 800580e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f023 0307 	bic.w	r3, r3, #7
 8005816:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005818:	68ba      	ldr	r2, [r7, #8]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	4a1f      	ldr	r2, [pc, #124]	@ (800589c <prvHeapInit+0xac>)
 8005820:	4413      	add	r3, r2
 8005822:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005828:	4a1d      	ldr	r2, [pc, #116]	@ (80058a0 <prvHeapInit+0xb0>)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800582e:	4b1c      	ldr	r3, [pc, #112]	@ (80058a0 <prvHeapInit+0xb0>)
 8005830:	2200      	movs	r2, #0
 8005832:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	68ba      	ldr	r2, [r7, #8]
 8005838:	4413      	add	r3, r2
 800583a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800583c:	2208      	movs	r2, #8
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	1a9b      	subs	r3, r3, r2
 8005842:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f023 0307 	bic.w	r3, r3, #7
 800584a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	4a15      	ldr	r2, [pc, #84]	@ (80058a4 <prvHeapInit+0xb4>)
 8005850:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005852:	4b14      	ldr	r3, [pc, #80]	@ (80058a4 <prvHeapInit+0xb4>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2200      	movs	r2, #0
 8005858:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800585a:	4b12      	ldr	r3, [pc, #72]	@ (80058a4 <prvHeapInit+0xb4>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2200      	movs	r2, #0
 8005860:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	1ad2      	subs	r2, r2, r3
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005870:	4b0c      	ldr	r3, [pc, #48]	@ (80058a4 <prvHeapInit+0xb4>)
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	4a0a      	ldr	r2, [pc, #40]	@ (80058a8 <prvHeapInit+0xb8>)
 800587e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	4a09      	ldr	r2, [pc, #36]	@ (80058ac <prvHeapInit+0xbc>)
 8005886:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005888:	4b09      	ldr	r3, [pc, #36]	@ (80058b0 <prvHeapInit+0xc0>)
 800588a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800588e:	601a      	str	r2, [r3, #0]
}
 8005890:	bf00      	nop
 8005892:	3714      	adds	r7, #20
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr
 800589c:	20000e08 	.word	0x20000e08
 80058a0:	20004a08 	.word	0x20004a08
 80058a4:	20004a10 	.word	0x20004a10
 80058a8:	20004a18 	.word	0x20004a18
 80058ac:	20004a14 	.word	0x20004a14
 80058b0:	20004a24 	.word	0x20004a24

080058b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80058b4:	b480      	push	{r7}
 80058b6:	b085      	sub	sp, #20
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80058bc:	4b28      	ldr	r3, [pc, #160]	@ (8005960 <prvInsertBlockIntoFreeList+0xac>)
 80058be:	60fb      	str	r3, [r7, #12]
 80058c0:	e002      	b.n	80058c8 <prvInsertBlockIntoFreeList+0x14>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	60fb      	str	r3, [r7, #12]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d8f7      	bhi.n	80058c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	68ba      	ldr	r2, [r7, #8]
 80058dc:	4413      	add	r3, r2
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d108      	bne.n	80058f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	685a      	ldr	r2, [r3, #4]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	441a      	add	r2, r3
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	68ba      	ldr	r2, [r7, #8]
 8005900:	441a      	add	r2, r3
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	429a      	cmp	r2, r3
 8005908:	d118      	bne.n	800593c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	4b15      	ldr	r3, [pc, #84]	@ (8005964 <prvInsertBlockIntoFreeList+0xb0>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	429a      	cmp	r2, r3
 8005914:	d00d      	beq.n	8005932 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685a      	ldr	r2, [r3, #4]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	441a      	add	r2, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	601a      	str	r2, [r3, #0]
 8005930:	e008      	b.n	8005944 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005932:	4b0c      	ldr	r3, [pc, #48]	@ (8005964 <prvInsertBlockIntoFreeList+0xb0>)
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	601a      	str	r2, [r3, #0]
 800593a:	e003      	b.n	8005944 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	429a      	cmp	r2, r3
 800594a:	d002      	beq.n	8005952 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005952:	bf00      	nop
 8005954:	3714      	adds	r7, #20
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	20004a08 	.word	0x20004a08
 8005964:	20004a10 	.word	0x20004a10

08005968 <memset>:
 8005968:	4402      	add	r2, r0
 800596a:	4603      	mov	r3, r0
 800596c:	4293      	cmp	r3, r2
 800596e:	d100      	bne.n	8005972 <memset+0xa>
 8005970:	4770      	bx	lr
 8005972:	f803 1b01 	strb.w	r1, [r3], #1
 8005976:	e7f9      	b.n	800596c <memset+0x4>

08005978 <__libc_init_array>:
 8005978:	b570      	push	{r4, r5, r6, lr}
 800597a:	4d0d      	ldr	r5, [pc, #52]	@ (80059b0 <__libc_init_array+0x38>)
 800597c:	4c0d      	ldr	r4, [pc, #52]	@ (80059b4 <__libc_init_array+0x3c>)
 800597e:	1b64      	subs	r4, r4, r5
 8005980:	10a4      	asrs	r4, r4, #2
 8005982:	2600      	movs	r6, #0
 8005984:	42a6      	cmp	r6, r4
 8005986:	d109      	bne.n	800599c <__libc_init_array+0x24>
 8005988:	4d0b      	ldr	r5, [pc, #44]	@ (80059b8 <__libc_init_array+0x40>)
 800598a:	4c0c      	ldr	r4, [pc, #48]	@ (80059bc <__libc_init_array+0x44>)
 800598c:	f000 f826 	bl	80059dc <_init>
 8005990:	1b64      	subs	r4, r4, r5
 8005992:	10a4      	asrs	r4, r4, #2
 8005994:	2600      	movs	r6, #0
 8005996:	42a6      	cmp	r6, r4
 8005998:	d105      	bne.n	80059a6 <__libc_init_array+0x2e>
 800599a:	bd70      	pop	{r4, r5, r6, pc}
 800599c:	f855 3b04 	ldr.w	r3, [r5], #4
 80059a0:	4798      	blx	r3
 80059a2:	3601      	adds	r6, #1
 80059a4:	e7ee      	b.n	8005984 <__libc_init_array+0xc>
 80059a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80059aa:	4798      	blx	r3
 80059ac:	3601      	adds	r6, #1
 80059ae:	e7f2      	b.n	8005996 <__libc_init_array+0x1e>
 80059b0:	08005af0 	.word	0x08005af0
 80059b4:	08005af0 	.word	0x08005af0
 80059b8:	08005af0 	.word	0x08005af0
 80059bc:	08005af4 	.word	0x08005af4

080059c0 <memcpy>:
 80059c0:	440a      	add	r2, r1
 80059c2:	4291      	cmp	r1, r2
 80059c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80059c8:	d100      	bne.n	80059cc <memcpy+0xc>
 80059ca:	4770      	bx	lr
 80059cc:	b510      	push	{r4, lr}
 80059ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059d6:	4291      	cmp	r1, r2
 80059d8:	d1f9      	bne.n	80059ce <memcpy+0xe>
 80059da:	bd10      	pop	{r4, pc}

080059dc <_init>:
 80059dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059de:	bf00      	nop
 80059e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059e2:	bc08      	pop	{r3}
 80059e4:	469e      	mov	lr, r3
 80059e6:	4770      	bx	lr

080059e8 <_fini>:
 80059e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ea:	bf00      	nop
 80059ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ee:	bc08      	pop	{r3}
 80059f0:	469e      	mov	lr, r3
 80059f2:	4770      	bx	lr
